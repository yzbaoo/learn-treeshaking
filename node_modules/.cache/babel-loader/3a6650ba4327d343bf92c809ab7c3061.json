{"ast":null,"code":"import { __values } from \"tslib\";\nimport { fromHex, toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { Int64 } from \"./Int64\";\n\nvar HeaderMarshaller = function () {\n  function HeaderMarshaller(toUtf8, fromUtf8) {\n    this.toUtf8 = toUtf8;\n    this.fromUtf8 = fromUtf8;\n  }\n\n  HeaderMarshaller.prototype.format = function (headers) {\n    var e_1, _a, e_2, _b;\n\n    var chunks = [];\n\n    try {\n      for (var _c = __values(Object.keys(headers)), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var headerName = _d.value;\n        var bytes = this.fromUtf8(headerName);\n        chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    var out = new Uint8Array(chunks.reduce(function (carry, bytes) {\n      return carry + bytes.byteLength;\n    }, 0));\n    var position = 0;\n\n    try {\n      for (var chunks_1 = __values(chunks), chunks_1_1 = chunks_1.next(); !chunks_1_1.done; chunks_1_1 = chunks_1.next()) {\n        var chunk = chunks_1_1.value;\n        out.set(chunk, position);\n        position += chunk.byteLength;\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (chunks_1_1 && !chunks_1_1.done && (_b = chunks_1.return)) _b.call(chunks_1);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    return out;\n  };\n\n  HeaderMarshaller.prototype.formatHeaderValue = function (header) {\n    switch (header.type) {\n      case \"boolean\":\n        return Uint8Array.from([header.value ? 0 : 1]);\n\n      case \"byte\":\n        return Uint8Array.from([2, header.value]);\n\n      case \"short\":\n        var shortView = new DataView(new ArrayBuffer(3));\n        shortView.setUint8(0, 3);\n        shortView.setInt16(1, header.value, false);\n        return new Uint8Array(shortView.buffer);\n\n      case \"integer\":\n        var intView = new DataView(new ArrayBuffer(5));\n        intView.setUint8(0, 4);\n        intView.setInt32(1, header.value, false);\n        return new Uint8Array(intView.buffer);\n\n      case \"long\":\n        var longBytes = new Uint8Array(9);\n        longBytes[0] = 5;\n        longBytes.set(header.value.bytes, 1);\n        return longBytes;\n\n      case \"binary\":\n        var binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));\n        binView.setUint8(0, 6);\n        binView.setUint16(1, header.value.byteLength, false);\n        var binBytes = new Uint8Array(binView.buffer);\n        binBytes.set(header.value, 3);\n        return binBytes;\n\n      case \"string\":\n        var utf8Bytes = this.fromUtf8(header.value);\n        var strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));\n        strView.setUint8(0, 7);\n        strView.setUint16(1, utf8Bytes.byteLength, false);\n        var strBytes = new Uint8Array(strView.buffer);\n        strBytes.set(utf8Bytes, 3);\n        return strBytes;\n\n      case \"timestamp\":\n        var tsBytes = new Uint8Array(9);\n        tsBytes[0] = 8;\n        tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);\n        return tsBytes;\n\n      case \"uuid\":\n        if (!UUID_PATTERN.test(header.value)) {\n          throw new Error(\"Invalid UUID received: \" + header.value);\n        }\n\n        var uuidBytes = new Uint8Array(17);\n        uuidBytes[0] = 9;\n        uuidBytes.set(fromHex(header.value.replace(/\\-/g, \"\")), 1);\n        return uuidBytes;\n    }\n  };\n\n  HeaderMarshaller.prototype.parse = function (headers) {\n    var out = {};\n    var position = 0;\n\n    while (position < headers.byteLength) {\n      var nameLength = headers.getUint8(position++);\n      var name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));\n      position += nameLength;\n\n      switch (headers.getUint8(position++)) {\n        case 0:\n          out[name] = {\n            type: BOOLEAN_TAG,\n            value: true\n          };\n          break;\n\n        case 1:\n          out[name] = {\n            type: BOOLEAN_TAG,\n            value: false\n          };\n          break;\n\n        case 2:\n          out[name] = {\n            type: BYTE_TAG,\n            value: headers.getInt8(position++)\n          };\n          break;\n\n        case 3:\n          out[name] = {\n            type: SHORT_TAG,\n            value: headers.getInt16(position, false)\n          };\n          position += 2;\n          break;\n\n        case 4:\n          out[name] = {\n            type: INT_TAG,\n            value: headers.getInt32(position, false)\n          };\n          position += 4;\n          break;\n\n        case 5:\n          out[name] = {\n            type: LONG_TAG,\n            value: new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8))\n          };\n          position += 8;\n          break;\n\n        case 6:\n          var binaryLength = headers.getUint16(position, false);\n          position += 2;\n          out[name] = {\n            type: BINARY_TAG,\n            value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength)\n          };\n          position += binaryLength;\n          break;\n\n        case 7:\n          var stringLength = headers.getUint16(position, false);\n          position += 2;\n          out[name] = {\n            type: STRING_TAG,\n            value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength))\n          };\n          position += stringLength;\n          break;\n\n        case 8:\n          out[name] = {\n            type: TIMESTAMP_TAG,\n            value: new Date(new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf())\n          };\n          position += 8;\n          break;\n\n        case 9:\n          var uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);\n          position += 16;\n          out[name] = {\n            type: UUID_TAG,\n            value: toHex(uuidBytes.subarray(0, 4)) + \"-\" + toHex(uuidBytes.subarray(4, 6)) + \"-\" + toHex(uuidBytes.subarray(6, 8)) + \"-\" + toHex(uuidBytes.subarray(8, 10)) + \"-\" + toHex(uuidBytes.subarray(10))\n          };\n          break;\n\n        default:\n          throw new Error(\"Unrecognized header type tag\");\n      }\n    }\n\n    return out;\n  };\n\n  return HeaderMarshaller;\n}();\n\nexport { HeaderMarshaller };\nvar HEADER_VALUE_TYPE;\n\n(function (HEADER_VALUE_TYPE) {\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolTrue\"] = 0] = \"boolTrue\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolFalse\"] = 1] = \"boolFalse\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byte\"] = 2] = \"byte\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"short\"] = 3] = \"short\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"integer\"] = 4] = \"integer\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"long\"] = 5] = \"long\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byteArray\"] = 6] = \"byteArray\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"string\"] = 7] = \"string\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"timestamp\"] = 8] = \"timestamp\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"uuid\"] = 9] = \"uuid\";\n})(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));\n\nvar BOOLEAN_TAG = \"boolean\";\nvar BYTE_TAG = \"byte\";\nvar SHORT_TAG = \"short\";\nvar INT_TAG = \"integer\";\nvar LONG_TAG = \"long\";\nvar BINARY_TAG = \"binary\";\nvar STRING_TAG = \"string\";\nvar TIMESTAMP_TAG = \"timestamp\";\nvar UUID_TAG = \"uuid\";\nvar UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;","map":{"version":3,"names":["__values","fromHex","toHex","Int64","HeaderMarshaller","toUtf8","fromUtf8","prototype","format","headers","e_1","_a","e_2","_b","chunks","_c","Object","keys","_d","next","done","headerName","value","bytes","push","Uint8Array","from","byteLength","formatHeaderValue","e_1_1","error","return","call","out","reduce","carry","position","chunks_1","chunks_1_1","chunk","set","e_2_1","header","type","shortView","DataView","ArrayBuffer","setUint8","setInt16","buffer","intView","setInt32","longBytes","binView","setUint16","binBytes","utf8Bytes","strView","strBytes","tsBytes","fromNumber","valueOf","UUID_PATTERN","test","Error","uuidBytes","replace","parse","nameLength","getUint8","name","byteOffset","BOOLEAN_TAG","BYTE_TAG","getInt8","SHORT_TAG","getInt16","INT_TAG","getInt32","LONG_TAG","binaryLength","getUint16","BINARY_TAG","stringLength","STRING_TAG","TIMESTAMP_TAG","Date","UUID_TAG","subarray","HEADER_VALUE_TYPE"],"sources":["/Users/yzbaoo/Desktop/huohua/ilc-web-packages/node_modules/@aws-sdk/eventstream-marshaller/dist-es/HeaderMarshaller.js"],"sourcesContent":["import { __values } from \"tslib\";\nimport { fromHex, toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { Int64 } from \"./Int64\";\nvar HeaderMarshaller = (function () {\n    function HeaderMarshaller(toUtf8, fromUtf8) {\n        this.toUtf8 = toUtf8;\n        this.fromUtf8 = fromUtf8;\n    }\n    HeaderMarshaller.prototype.format = function (headers) {\n        var e_1, _a, e_2, _b;\n        var chunks = [];\n        try {\n            for (var _c = __values(Object.keys(headers)), _d = _c.next(); !_d.done; _d = _c.next()) {\n                var headerName = _d.value;\n                var bytes = this.fromUtf8(headerName);\n                chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        var out = new Uint8Array(chunks.reduce(function (carry, bytes) { return carry + bytes.byteLength; }, 0));\n        var position = 0;\n        try {\n            for (var chunks_1 = __values(chunks), chunks_1_1 = chunks_1.next(); !chunks_1_1.done; chunks_1_1 = chunks_1.next()) {\n                var chunk = chunks_1_1.value;\n                out.set(chunk, position);\n                position += chunk.byteLength;\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (chunks_1_1 && !chunks_1_1.done && (_b = chunks_1.return)) _b.call(chunks_1);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        return out;\n    };\n    HeaderMarshaller.prototype.formatHeaderValue = function (header) {\n        switch (header.type) {\n            case \"boolean\":\n                return Uint8Array.from([header.value ? 0 : 1]);\n            case \"byte\":\n                return Uint8Array.from([2, header.value]);\n            case \"short\":\n                var shortView = new DataView(new ArrayBuffer(3));\n                shortView.setUint8(0, 3);\n                shortView.setInt16(1, header.value, false);\n                return new Uint8Array(shortView.buffer);\n            case \"integer\":\n                var intView = new DataView(new ArrayBuffer(5));\n                intView.setUint8(0, 4);\n                intView.setInt32(1, header.value, false);\n                return new Uint8Array(intView.buffer);\n            case \"long\":\n                var longBytes = new Uint8Array(9);\n                longBytes[0] = 5;\n                longBytes.set(header.value.bytes, 1);\n                return longBytes;\n            case \"binary\":\n                var binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));\n                binView.setUint8(0, 6);\n                binView.setUint16(1, header.value.byteLength, false);\n                var binBytes = new Uint8Array(binView.buffer);\n                binBytes.set(header.value, 3);\n                return binBytes;\n            case \"string\":\n                var utf8Bytes = this.fromUtf8(header.value);\n                var strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));\n                strView.setUint8(0, 7);\n                strView.setUint16(1, utf8Bytes.byteLength, false);\n                var strBytes = new Uint8Array(strView.buffer);\n                strBytes.set(utf8Bytes, 3);\n                return strBytes;\n            case \"timestamp\":\n                var tsBytes = new Uint8Array(9);\n                tsBytes[0] = 8;\n                tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);\n                return tsBytes;\n            case \"uuid\":\n                if (!UUID_PATTERN.test(header.value)) {\n                    throw new Error(\"Invalid UUID received: \" + header.value);\n                }\n                var uuidBytes = new Uint8Array(17);\n                uuidBytes[0] = 9;\n                uuidBytes.set(fromHex(header.value.replace(/\\-/g, \"\")), 1);\n                return uuidBytes;\n        }\n    };\n    HeaderMarshaller.prototype.parse = function (headers) {\n        var out = {};\n        var position = 0;\n        while (position < headers.byteLength) {\n            var nameLength = headers.getUint8(position++);\n            var name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));\n            position += nameLength;\n            switch (headers.getUint8(position++)) {\n                case 0:\n                    out[name] = {\n                        type: BOOLEAN_TAG,\n                        value: true,\n                    };\n                    break;\n                case 1:\n                    out[name] = {\n                        type: BOOLEAN_TAG,\n                        value: false,\n                    };\n                    break;\n                case 2:\n                    out[name] = {\n                        type: BYTE_TAG,\n                        value: headers.getInt8(position++),\n                    };\n                    break;\n                case 3:\n                    out[name] = {\n                        type: SHORT_TAG,\n                        value: headers.getInt16(position, false),\n                    };\n                    position += 2;\n                    break;\n                case 4:\n                    out[name] = {\n                        type: INT_TAG,\n                        value: headers.getInt32(position, false),\n                    };\n                    position += 4;\n                    break;\n                case 5:\n                    out[name] = {\n                        type: LONG_TAG,\n                        value: new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)),\n                    };\n                    position += 8;\n                    break;\n                case 6:\n                    var binaryLength = headers.getUint16(position, false);\n                    position += 2;\n                    out[name] = {\n                        type: BINARY_TAG,\n                        value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength),\n                    };\n                    position += binaryLength;\n                    break;\n                case 7:\n                    var stringLength = headers.getUint16(position, false);\n                    position += 2;\n                    out[name] = {\n                        type: STRING_TAG,\n                        value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength)),\n                    };\n                    position += stringLength;\n                    break;\n                case 8:\n                    out[name] = {\n                        type: TIMESTAMP_TAG,\n                        value: new Date(new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf()),\n                    };\n                    position += 8;\n                    break;\n                case 9:\n                    var uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);\n                    position += 16;\n                    out[name] = {\n                        type: UUID_TAG,\n                        value: toHex(uuidBytes.subarray(0, 4)) + \"-\" + toHex(uuidBytes.subarray(4, 6)) + \"-\" + toHex(uuidBytes.subarray(6, 8)) + \"-\" + toHex(uuidBytes.subarray(8, 10)) + \"-\" + toHex(uuidBytes.subarray(10)),\n                    };\n                    break;\n                default:\n                    throw new Error(\"Unrecognized header type tag\");\n            }\n        }\n        return out;\n    };\n    return HeaderMarshaller;\n}());\nexport { HeaderMarshaller };\nvar HEADER_VALUE_TYPE;\n(function (HEADER_VALUE_TYPE) {\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolTrue\"] = 0] = \"boolTrue\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolFalse\"] = 1] = \"boolFalse\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byte\"] = 2] = \"byte\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"short\"] = 3] = \"short\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"integer\"] = 4] = \"integer\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"long\"] = 5] = \"long\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byteArray\"] = 6] = \"byteArray\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"string\"] = 7] = \"string\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"timestamp\"] = 8] = \"timestamp\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"uuid\"] = 9] = \"uuid\";\n})(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));\nvar BOOLEAN_TAG = \"boolean\";\nvar BYTE_TAG = \"byte\";\nvar SHORT_TAG = \"short\";\nvar INT_TAG = \"integer\";\nvar LONG_TAG = \"long\";\nvar BINARY_TAG = \"binary\";\nvar STRING_TAG = \"string\";\nvar TIMESTAMP_TAG = \"timestamp\";\nvar UUID_TAG = \"uuid\";\nvar UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}