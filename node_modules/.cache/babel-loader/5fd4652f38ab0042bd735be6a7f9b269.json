{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { parse as parseArn, validate as validateArn } from \"@aws-sdk/util-arn-parser\";\nimport { bucketHostname } from \"./bucketHostname\";\nexport var bucketEndpointMiddleware = function (options) {\n  return function (next, context) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var bucketName, replaceBucketInPath, request, bucketArn, clientRegion, useDualstackEndpoint, useFipsEndpoint, _a, partition, _b, signingRegion, useArnRegion, _c, hostname, bucketEndpoint, modifiedSigningRegion, signingService, _d, clientRegion, dualstackEndpoint, fipsEndpoint, _e, hostname, bucketEndpoint;\n\n        var _f;\n\n        return __generator(this, function (_g) {\n          switch (_g.label) {\n            case 0:\n              bucketName = args.input.Bucket;\n              replaceBucketInPath = options.bucketEndpoint;\n              request = args.request;\n              if (!HttpRequest.isInstance(request)) return [3, 13];\n              if (!options.bucketEndpoint) return [3, 1];\n              request.hostname = bucketName;\n              return [3, 12];\n\n            case 1:\n              if (!validateArn(bucketName)) return [3, 8];\n              bucketArn = parseArn(bucketName);\n              return [4, options.region()];\n\n            case 2:\n              clientRegion = _g.sent();\n              return [4, options.useDualstackEndpoint()];\n\n            case 3:\n              useDualstackEndpoint = _g.sent();\n              return [4, options.useFipsEndpoint()];\n\n            case 4:\n              useFipsEndpoint = _g.sent();\n              return [4, options.regionInfoProvider(clientRegion, {\n                useDualstackEndpoint: useDualstackEndpoint,\n                useFipsEndpoint: useFipsEndpoint\n              })];\n\n            case 5:\n              _a = _g.sent() || {}, partition = _a.partition, _b = _a.signingRegion, signingRegion = _b === void 0 ? clientRegion : _b;\n              return [4, options.useArnRegion()];\n\n            case 6:\n              useArnRegion = _g.sent();\n              _d = bucketHostname;\n              _f = {\n                bucketName: bucketArn,\n                baseHostname: request.hostname,\n                accelerateEndpoint: options.useAccelerateEndpoint,\n                dualstackEndpoint: useDualstackEndpoint,\n                fipsEndpoint: useFipsEndpoint,\n                pathStyleEndpoint: options.forcePathStyle,\n                tlsCompatible: request.protocol === \"https:\",\n                useArnRegion: useArnRegion,\n                clientPartition: partition,\n                clientSigningRegion: signingRegion,\n                clientRegion: clientRegion,\n                isCustomEndpoint: options.isCustomEndpoint\n              };\n              return [4, options.disableMultiregionAccessPoints()];\n\n            case 7:\n              _c = _d.apply(void 0, [(_f.disableMultiregionAccessPoints = _g.sent(), _f)]), hostname = _c.hostname, bucketEndpoint = _c.bucketEndpoint, modifiedSigningRegion = _c.signingRegion, signingService = _c.signingService;\n\n              if (modifiedSigningRegion && modifiedSigningRegion !== signingRegion) {\n                context[\"signing_region\"] = modifiedSigningRegion;\n              }\n\n              if (signingService && signingService !== \"s3\") {\n                context[\"signing_service\"] = signingService;\n              }\n\n              request.hostname = hostname;\n              replaceBucketInPath = bucketEndpoint;\n              return [3, 12];\n\n            case 8:\n              return [4, options.region()];\n\n            case 9:\n              clientRegion = _g.sent();\n              return [4, options.useDualstackEndpoint()];\n\n            case 10:\n              dualstackEndpoint = _g.sent();\n              return [4, options.useFipsEndpoint()];\n\n            case 11:\n              fipsEndpoint = _g.sent();\n              _e = bucketHostname({\n                bucketName: bucketName,\n                clientRegion: clientRegion,\n                baseHostname: request.hostname,\n                accelerateEndpoint: options.useAccelerateEndpoint,\n                dualstackEndpoint: dualstackEndpoint,\n                fipsEndpoint: fipsEndpoint,\n                pathStyleEndpoint: options.forcePathStyle,\n                tlsCompatible: request.protocol === \"https:\",\n                isCustomEndpoint: options.isCustomEndpoint\n              }), hostname = _e.hostname, bucketEndpoint = _e.bucketEndpoint;\n              request.hostname = hostname;\n              replaceBucketInPath = bucketEndpoint;\n              _g.label = 12;\n\n            case 12:\n              if (replaceBucketInPath) {\n                request.path = request.path.replace(/^(\\/)?[^\\/]+/, \"\");\n\n                if (request.path === \"\") {\n                  request.path = \"/\";\n                }\n              }\n\n              _g.label = 13;\n\n            case 13:\n              return [2, next(__assign(__assign({}, args), {\n                request: request\n              }))];\n          }\n        });\n      });\n    };\n  };\n};\nexport var bucketEndpointMiddlewareOptions = {\n  tags: [\"BUCKET_ENDPOINT\"],\n  name: \"bucketEndpointMiddleware\",\n  relation: \"before\",\n  toMiddleware: \"hostHeaderMiddleware\",\n  override: true\n};\nexport var getBucketEndpointPlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.addRelativeTo(bucketEndpointMiddleware(options), bucketEndpointMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"names":["__assign","__awaiter","__generator","HttpRequest","parse","parseArn","validate","validateArn","bucketHostname","bucketEndpointMiddleware","options","next","context","args","bucketName","replaceBucketInPath","request","bucketArn","clientRegion","useDualstackEndpoint","useFipsEndpoint","_a","partition","_b","signingRegion","useArnRegion","_c","hostname","bucketEndpoint","modifiedSigningRegion","signingService","_d","dualstackEndpoint","fipsEndpoint","_e","_f","_g","label","input","Bucket","isInstance","region","sent","regionInfoProvider","baseHostname","accelerateEndpoint","useAccelerateEndpoint","pathStyleEndpoint","forcePathStyle","tlsCompatible","protocol","clientPartition","clientSigningRegion","isCustomEndpoint","disableMultiregionAccessPoints","apply","path","replace","bucketEndpointMiddlewareOptions","tags","name","relation","toMiddleware","override","getBucketEndpointPlugin","applyToStack","clientStack","addRelativeTo"],"sources":["/Users/yzbaoo/Desktop/huohua/ilc-web-packages/node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketEndpointMiddleware.js"],"sourcesContent":["import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { parse as parseArn, validate as validateArn } from \"@aws-sdk/util-arn-parser\";\nimport { bucketHostname } from \"./bucketHostname\";\nexport var bucketEndpointMiddleware = function (options) {\n    return function (next, context) {\n        return function (args) { return __awaiter(void 0, void 0, void 0, function () {\n            var bucketName, replaceBucketInPath, request, bucketArn, clientRegion, useDualstackEndpoint, useFipsEndpoint, _a, partition, _b, signingRegion, useArnRegion, _c, hostname, bucketEndpoint, modifiedSigningRegion, signingService, _d, clientRegion, dualstackEndpoint, fipsEndpoint, _e, hostname, bucketEndpoint;\n            var _f;\n            return __generator(this, function (_g) {\n                switch (_g.label) {\n                    case 0:\n                        bucketName = args.input.Bucket;\n                        replaceBucketInPath = options.bucketEndpoint;\n                        request = args.request;\n                        if (!HttpRequest.isInstance(request)) return [3, 13];\n                        if (!options.bucketEndpoint) return [3, 1];\n                        request.hostname = bucketName;\n                        return [3, 12];\n                    case 1:\n                        if (!validateArn(bucketName)) return [3, 8];\n                        bucketArn = parseArn(bucketName);\n                        return [4, options.region()];\n                    case 2:\n                        clientRegion = _g.sent();\n                        return [4, options.useDualstackEndpoint()];\n                    case 3:\n                        useDualstackEndpoint = _g.sent();\n                        return [4, options.useFipsEndpoint()];\n                    case 4:\n                        useFipsEndpoint = _g.sent();\n                        return [4, options.regionInfoProvider(clientRegion, { useDualstackEndpoint: useDualstackEndpoint, useFipsEndpoint: useFipsEndpoint })];\n                    case 5:\n                        _a = (_g.sent()) || {}, partition = _a.partition, _b = _a.signingRegion, signingRegion = _b === void 0 ? clientRegion : _b;\n                        return [4, options.useArnRegion()];\n                    case 6:\n                        useArnRegion = _g.sent();\n                        _d = bucketHostname;\n                        _f = {\n                            bucketName: bucketArn,\n                            baseHostname: request.hostname,\n                            accelerateEndpoint: options.useAccelerateEndpoint,\n                            dualstackEndpoint: useDualstackEndpoint,\n                            fipsEndpoint: useFipsEndpoint,\n                            pathStyleEndpoint: options.forcePathStyle,\n                            tlsCompatible: request.protocol === \"https:\",\n                            useArnRegion: useArnRegion,\n                            clientPartition: partition,\n                            clientSigningRegion: signingRegion,\n                            clientRegion: clientRegion,\n                            isCustomEndpoint: options.isCustomEndpoint\n                        };\n                        return [4, options.disableMultiregionAccessPoints()];\n                    case 7:\n                        _c = _d.apply(void 0, [(_f.disableMultiregionAccessPoints = _g.sent(),\n                                _f)]), hostname = _c.hostname, bucketEndpoint = _c.bucketEndpoint, modifiedSigningRegion = _c.signingRegion, signingService = _c.signingService;\n                        if (modifiedSigningRegion && modifiedSigningRegion !== signingRegion) {\n                            context[\"signing_region\"] = modifiedSigningRegion;\n                        }\n                        if (signingService && signingService !== \"s3\") {\n                            context[\"signing_service\"] = signingService;\n                        }\n                        request.hostname = hostname;\n                        replaceBucketInPath = bucketEndpoint;\n                        return [3, 12];\n                    case 8: return [4, options.region()];\n                    case 9:\n                        clientRegion = _g.sent();\n                        return [4, options.useDualstackEndpoint()];\n                    case 10:\n                        dualstackEndpoint = _g.sent();\n                        return [4, options.useFipsEndpoint()];\n                    case 11:\n                        fipsEndpoint = _g.sent();\n                        _e = bucketHostname({\n                            bucketName: bucketName,\n                            clientRegion: clientRegion,\n                            baseHostname: request.hostname,\n                            accelerateEndpoint: options.useAccelerateEndpoint,\n                            dualstackEndpoint: dualstackEndpoint,\n                            fipsEndpoint: fipsEndpoint,\n                            pathStyleEndpoint: options.forcePathStyle,\n                            tlsCompatible: request.protocol === \"https:\",\n                            isCustomEndpoint: options.isCustomEndpoint,\n                        }), hostname = _e.hostname, bucketEndpoint = _e.bucketEndpoint;\n                        request.hostname = hostname;\n                        replaceBucketInPath = bucketEndpoint;\n                        _g.label = 12;\n                    case 12:\n                        if (replaceBucketInPath) {\n                            request.path = request.path.replace(/^(\\/)?[^\\/]+/, \"\");\n                            if (request.path === \"\") {\n                                request.path = \"/\";\n                            }\n                        }\n                        _g.label = 13;\n                    case 13: return [2, next(__assign(__assign({}, args), { request: request }))];\n                }\n            });\n        }); };\n    };\n};\nexport var bucketEndpointMiddlewareOptions = {\n    tags: [\"BUCKET_ENDPOINT\"],\n    name: \"bucketEndpointMiddleware\",\n    relation: \"before\",\n    toMiddleware: \"hostHeaderMiddleware\",\n    override: true,\n};\nexport var getBucketEndpointPlugin = function (options) { return ({\n    applyToStack: function (clientStack) {\n        clientStack.addRelativeTo(bucketEndpointMiddleware(options), bucketEndpointMiddlewareOptions);\n    },\n}); };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}