{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AwsCrc32 = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar util_1 = require(\"@aws-crypto/util\");\n\nvar index_1 = require(\"./index\");\n\nvar AwsCrc32 =\n/** @class */\nfunction () {\n  function AwsCrc32() {\n    this.crc32 = new index_1.Crc32();\n  }\n\n  AwsCrc32.prototype.update = function (toHash) {\n    if ((0, util_1.isEmptyData)(toHash)) return;\n    this.crc32.update((0, util_1.convertToBuffer)(toHash));\n  };\n\n  AwsCrc32.prototype.digest = function () {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {\n      return (0, tslib_1.__generator)(this, function (_a) {\n        return [2\n        /*return*/\n        , (0, util_1.numToUint8)(this.crc32.digest())];\n      });\n    });\n  };\n\n  return AwsCrc32;\n}();\n\nexports.AwsCrc32 = AwsCrc32;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;;;AAGA;;AACA;;AAEA;AAAA;AAAA;EAAA;IACmB,aAAQ,IAAIA,aAAJ,EAAR;EAWlB;;EATCC,sCAAOC,MAAP,EAAyB;IACvB,IAAI,wBAAYA,MAAZ,CAAJ,EAAyB;IAEzB,KAAKC,KAAL,CAAWC,MAAX,CAAkB,4BAAgBF,MAAhB,CAAlB;EACD,CAJD;;EAMMD,4BAAN;;;QACE;QAAA;QAAA,EAAO,uBAAW,KAAKE,KAAL,CAAWE,MAAX,EAAX,CAAP;;;EACD,CAFK;;EAGR;AAAC,CAZD;;AAAaC","names":["index_1","AwsCrc32","toHash","crc32","update","digest","exports"],"sources":["/Users/yzbaoo/Desktop/huohua/ilc-web-packages/node_modules/@aws-crypto/crc32/src/aws_crc32.ts"],"sourcesContent":["// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Hash, SourceData } from \"@aws-sdk/types\";\nimport { convertToBuffer, isEmptyData, numToUint8 } from \"@aws-crypto/util\";\nimport { Crc32 } from \"./index\";\n\nexport class AwsCrc32 implements Hash {\n  private readonly crc32 = new Crc32();\n\n  update(toHash: SourceData) {\n    if (isEmptyData(toHash)) return;\n\n    this.crc32.update(convertToBuffer(toHash));\n  }\n\n  async digest(): Promise<Uint8Array> {\n    return numToUint8(this.crc32.digest());\n  }\n}\n"]},"metadata":{},"sourceType":"script"}