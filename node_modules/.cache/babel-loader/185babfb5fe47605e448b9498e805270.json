{"ast":null,"code":"import { __asyncGenerator, __asyncValues, __await, __generator } from \"tslib\";\nexport function getUnmarshalledStream(source, options) {\n  var _a;\n\n  return _a = {}, _a[Symbol.asyncIterator] = function () {\n    return __asyncGenerator(this, arguments, function () {\n      var source_1, source_1_1, chunk, message, messageType, unmodeledError, code, exception, deserializedException, error, event, deserialized, e_1_1;\n\n      var _a, _b;\n\n      var e_1, _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _d.trys.push([0, 12, 13, 18]);\n\n            source_1 = __asyncValues(source);\n            _d.label = 1;\n\n          case 1:\n            return [4, __await(source_1.next())];\n\n          case 2:\n            if (!(source_1_1 = _d.sent(), !source_1_1.done)) return [3, 11];\n            chunk = source_1_1.value;\n            message = options.eventMarshaller.unmarshall(chunk);\n            messageType = message.headers[\":message-type\"].value;\n            if (!(messageType === \"error\")) return [3, 3];\n            unmodeledError = new Error(message.headers[\":error-message\"].value || \"UnknownError\");\n            unmodeledError.name = message.headers[\":error-code\"].value;\n            throw unmodeledError;\n\n          case 3:\n            if (!(messageType === \"exception\")) return [3, 5];\n            code = message.headers[\":exception-type\"].value;\n            exception = (_a = {}, _a[code] = message, _a);\n            return [4, __await(options.deserializer(exception))];\n\n          case 4:\n            deserializedException = _d.sent();\n\n            if (deserializedException.$unknown) {\n              error = new Error(options.toUtf8(message.body));\n              error.name = code;\n              throw error;\n            }\n\n            throw deserializedException[code];\n\n          case 5:\n            if (!(messageType === \"event\")) return [3, 9];\n            event = (_b = {}, _b[message.headers[\":event-type\"].value] = message, _b);\n            return [4, __await(options.deserializer(event))];\n\n          case 6:\n            deserialized = _d.sent();\n            if (deserialized.$unknown) return [3, 10];\n            return [4, __await(deserialized)];\n\n          case 7:\n            return [4, _d.sent()];\n\n          case 8:\n            _d.sent();\n\n            return [3, 10];\n\n          case 9:\n            throw Error(\"Unrecognizable event type: \" + message.headers[\":event-type\"].value);\n\n          case 10:\n            return [3, 1];\n\n          case 11:\n            return [3, 18];\n\n          case 12:\n            e_1_1 = _d.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3, 18];\n\n          case 13:\n            _d.trys.push([13,, 16, 17]);\n\n            if (!(source_1_1 && !source_1_1.done && (_c = source_1.return))) return [3, 15];\n            return [4, __await(_c.call(source_1))];\n\n          case 14:\n            _d.sent();\n\n            _d.label = 15;\n\n          case 15:\n            return [3, 17];\n\n          case 16:\n            if (e_1) throw e_1.error;\n            return [7];\n\n          case 17:\n            return [7];\n\n          case 18:\n            return [2];\n        }\n      });\n    });\n  }, _a;\n}","map":{"version":3,"names":["__asyncGenerator","__asyncValues","__await","__generator","getUnmarshalledStream","source","options","_a","Symbol","asyncIterator","arguments","source_1","source_1_1","chunk","message","messageType","unmodeledError","code","exception","deserializedException","error","event","deserialized","e_1_1","_b","e_1","_c","_d","label","trys","push","next","sent","done","value","eventMarshaller","unmarshall","headers","Error","name","deserializer","$unknown","toUtf8","body","return","call"],"sources":["/Users/yzbaoo/Desktop/huohua/ilc-web-packages/node_modules/@aws-sdk/eventstream-serde-universal/dist-es/getUnmarshalledStream.js"],"sourcesContent":["import { __asyncGenerator, __asyncValues, __await, __generator } from \"tslib\";\nexport function getUnmarshalledStream(source, options) {\n    var _a;\n    return _a = {},\n        _a[Symbol.asyncIterator] = function () {\n            return __asyncGenerator(this, arguments, function () {\n                var source_1, source_1_1, chunk, message, messageType, unmodeledError, code, exception, deserializedException, error, event, deserialized, e_1_1;\n                var _a, _b;\n                var e_1, _c;\n                return __generator(this, function (_d) {\n                    switch (_d.label) {\n                        case 0:\n                            _d.trys.push([0, 12, 13, 18]);\n                            source_1 = __asyncValues(source);\n                            _d.label = 1;\n                        case 1: return [4, __await(source_1.next())];\n                        case 2:\n                            if (!(source_1_1 = _d.sent(), !source_1_1.done)) return [3, 11];\n                            chunk = source_1_1.value;\n                            message = options.eventMarshaller.unmarshall(chunk);\n                            messageType = message.headers[\":message-type\"].value;\n                            if (!(messageType === \"error\")) return [3, 3];\n                            unmodeledError = new Error(message.headers[\":error-message\"].value || \"UnknownError\");\n                            unmodeledError.name = message.headers[\":error-code\"].value;\n                            throw unmodeledError;\n                        case 3:\n                            if (!(messageType === \"exception\")) return [3, 5];\n                            code = message.headers[\":exception-type\"].value;\n                            exception = (_a = {}, _a[code] = message, _a);\n                            return [4, __await(options.deserializer(exception))];\n                        case 4:\n                            deserializedException = _d.sent();\n                            if (deserializedException.$unknown) {\n                                error = new Error(options.toUtf8(message.body));\n                                error.name = code;\n                                throw error;\n                            }\n                            throw deserializedException[code];\n                        case 5:\n                            if (!(messageType === \"event\")) return [3, 9];\n                            event = (_b = {},\n                                _b[message.headers[\":event-type\"].value] = message,\n                                _b);\n                            return [4, __await(options.deserializer(event))];\n                        case 6:\n                            deserialized = _d.sent();\n                            if (deserialized.$unknown)\n                                return [3, 10];\n                            return [4, __await(deserialized)];\n                        case 7: return [4, _d.sent()];\n                        case 8:\n                            _d.sent();\n                            return [3, 10];\n                        case 9: throw Error(\"Unrecognizable event type: \" + message.headers[\":event-type\"].value);\n                        case 10: return [3, 1];\n                        case 11: return [3, 18];\n                        case 12:\n                            e_1_1 = _d.sent();\n                            e_1 = { error: e_1_1 };\n                            return [3, 18];\n                        case 13:\n                            _d.trys.push([13, , 16, 17]);\n                            if (!(source_1_1 && !source_1_1.done && (_c = source_1.return))) return [3, 15];\n                            return [4, __await(_c.call(source_1))];\n                        case 14:\n                            _d.sent();\n                            _d.label = 15;\n                        case 15: return [3, 17];\n                        case 16:\n                            if (e_1) throw e_1.error;\n                            return [7];\n                        case 17: return [7];\n                        case 18: return [2];\n                    }\n                });\n            });\n        },\n        _a;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}