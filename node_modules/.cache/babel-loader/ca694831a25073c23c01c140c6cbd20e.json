{"ast":null,"code":"import { Crc32 } from \"@aws-crypto/crc32\";\nvar PRELUDE_MEMBER_LENGTH = 4;\nvar PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;\nvar CHECKSUM_LENGTH = 4;\nvar MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;\nexport function splitMessage(_a) {\n  var byteLength = _a.byteLength,\n      byteOffset = _a.byteOffset,\n      buffer = _a.buffer;\n\n  if (byteLength < MINIMUM_MESSAGE_LENGTH) {\n    throw new Error(\"Provided message too short to accommodate event stream message overhead\");\n  }\n\n  var view = new DataView(buffer, byteOffset, byteLength);\n  var messageLength = view.getUint32(0, false);\n\n  if (byteLength !== messageLength) {\n    throw new Error(\"Reported message length does not match received message length\");\n  }\n\n  var headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);\n  var expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);\n  var expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);\n  var checksummer = new Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));\n\n  if (expectedPreludeChecksum !== checksummer.digest()) {\n    throw new Error(\"The prelude checksum specified in the message (\" + expectedPreludeChecksum + \") does not match the calculated CRC32 checksum (\" + checksummer.digest() + \")\");\n  }\n\n  checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));\n\n  if (expectedMessageChecksum !== checksummer.digest()) {\n    throw new Error(\"The message checksum (\" + checksummer.digest() + \") did not match the expected value of \" + expectedMessageChecksum);\n  }\n\n  return {\n    headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),\n    body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH))\n  };\n}","map":{"version":3,"names":["Crc32","PRELUDE_MEMBER_LENGTH","PRELUDE_LENGTH","CHECKSUM_LENGTH","MINIMUM_MESSAGE_LENGTH","splitMessage","_a","byteLength","byteOffset","buffer","Error","view","DataView","messageLength","getUint32","headerLength","expectedPreludeChecksum","expectedMessageChecksum","checksummer","update","Uint8Array","digest","headers","body"],"sources":["/Users/yzbaoo/Desktop/huohua/ilc-web-packages/node_modules/@aws-sdk/eventstream-marshaller/dist-es/splitMessage.js"],"sourcesContent":["import { Crc32 } from \"@aws-crypto/crc32\";\nvar PRELUDE_MEMBER_LENGTH = 4;\nvar PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;\nvar CHECKSUM_LENGTH = 4;\nvar MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;\nexport function splitMessage(_a) {\n    var byteLength = _a.byteLength, byteOffset = _a.byteOffset, buffer = _a.buffer;\n    if (byteLength < MINIMUM_MESSAGE_LENGTH) {\n        throw new Error(\"Provided message too short to accommodate event stream message overhead\");\n    }\n    var view = new DataView(buffer, byteOffset, byteLength);\n    var messageLength = view.getUint32(0, false);\n    if (byteLength !== messageLength) {\n        throw new Error(\"Reported message length does not match received message length\");\n    }\n    var headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);\n    var expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);\n    var expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);\n    var checksummer = new Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));\n    if (expectedPreludeChecksum !== checksummer.digest()) {\n        throw new Error(\"The prelude checksum specified in the message (\" + expectedPreludeChecksum + \") does not match the calculated CRC32 checksum (\" + checksummer.digest() + \")\");\n    }\n    checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));\n    if (expectedMessageChecksum !== checksummer.digest()) {\n        throw new Error(\"The message checksum (\" + checksummer.digest() + \") did not match the expected value of \" + expectedMessageChecksum);\n    }\n    return {\n        headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),\n        body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH)),\n    };\n}\n"],"mappings":"AAAA,SAASA,KAAT,QAAsB,mBAAtB;AACA,IAAIC,qBAAqB,GAAG,CAA5B;AACA,IAAIC,cAAc,GAAGD,qBAAqB,GAAG,CAA7C;AACA,IAAIE,eAAe,GAAG,CAAtB;AACA,IAAIC,sBAAsB,GAAGF,cAAc,GAAGC,eAAe,GAAG,CAAhE;AACA,OAAO,SAASE,YAAT,CAAsBC,EAAtB,EAA0B;EAC7B,IAAIC,UAAU,GAAGD,EAAE,CAACC,UAApB;EAAA,IAAgCC,UAAU,GAAGF,EAAE,CAACE,UAAhD;EAAA,IAA4DC,MAAM,GAAGH,EAAE,CAACG,MAAxE;;EACA,IAAIF,UAAU,GAAGH,sBAAjB,EAAyC;IACrC,MAAM,IAAIM,KAAJ,CAAU,yEAAV,CAAN;EACH;;EACD,IAAIC,IAAI,GAAG,IAAIC,QAAJ,CAAaH,MAAb,EAAqBD,UAArB,EAAiCD,UAAjC,CAAX;EACA,IAAIM,aAAa,GAAGF,IAAI,CAACG,SAAL,CAAe,CAAf,EAAkB,KAAlB,CAApB;;EACA,IAAIP,UAAU,KAAKM,aAAnB,EAAkC;IAC9B,MAAM,IAAIH,KAAJ,CAAU,gEAAV,CAAN;EACH;;EACD,IAAIK,YAAY,GAAGJ,IAAI,CAACG,SAAL,CAAeb,qBAAf,EAAsC,KAAtC,CAAnB;EACA,IAAIe,uBAAuB,GAAGL,IAAI,CAACG,SAAL,CAAeZ,cAAf,EAA+B,KAA/B,CAA9B;EACA,IAAIe,uBAAuB,GAAGN,IAAI,CAACG,SAAL,CAAeP,UAAU,GAAGJ,eAA5B,EAA6C,KAA7C,CAA9B;EACA,IAAIe,WAAW,GAAG,IAAIlB,KAAJ,GAAYmB,MAAZ,CAAmB,IAAIC,UAAJ,CAAeX,MAAf,EAAuBD,UAAvB,EAAmCN,cAAnC,CAAnB,CAAlB;;EACA,IAAIc,uBAAuB,KAAKE,WAAW,CAACG,MAAZ,EAAhC,EAAsD;IAClD,MAAM,IAAIX,KAAJ,CAAU,oDAAoDM,uBAApD,GAA8E,kDAA9E,GAAmIE,WAAW,CAACG,MAAZ,EAAnI,GAA0J,GAApK,CAAN;EACH;;EACDH,WAAW,CAACC,MAAZ,CAAmB,IAAIC,UAAJ,CAAeX,MAAf,EAAuBD,UAAU,GAAGN,cAApC,EAAoDK,UAAU,IAAIL,cAAc,GAAGC,eAArB,CAA9D,CAAnB;;EACA,IAAIc,uBAAuB,KAAKC,WAAW,CAACG,MAAZ,EAAhC,EAAsD;IAClD,MAAM,IAAIX,KAAJ,CAAU,2BAA2BQ,WAAW,CAACG,MAAZ,EAA3B,GAAkD,wCAAlD,GAA6FJ,uBAAvG,CAAN;EACH;;EACD,OAAO;IACHK,OAAO,EAAE,IAAIV,QAAJ,CAAaH,MAAb,EAAqBD,UAAU,GAAGN,cAAb,GAA8BC,eAAnD,EAAoEY,YAApE,CADN;IAEHQ,IAAI,EAAE,IAAIH,UAAJ,CAAeX,MAAf,EAAuBD,UAAU,GAAGN,cAAb,GAA8BC,eAA9B,GAAgDY,YAAvE,EAAqFF,aAAa,GAAGE,YAAhB,IAAgCb,cAAc,GAAGC,eAAjB,GAAmCA,eAAnE,CAArF;EAFH,CAAP;AAIH"},"metadata":{},"sourceType":"module"}