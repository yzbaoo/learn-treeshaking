{"ast":null,"code":"import { a as e, r as t } from \"./utils-02659682.js\";\nimport { create as r } from \"./cos.js\";\nimport { create as n } from \"./aws.js\";\nimport \"cos-js-sdk-v5\";\nimport \"@aws-sdk/client-s3\";\n\nvar o = {\n  802: \"项目名称未配置\",\n  803: \"用户token 登录状态检测不通过\",\n  \"-1\": \"系统错误\"\n},\n    s = function (r) {\n  var n = r.appName,\n      s = r.userToken;\n  return function () {\n    return new Promise(function (r, a) {\n      fetch(\"http://localhost:3000/resource/security/token?appName=\".concat(n, \"&userToken=\").concat(s)).then(function () {\n        var n = e(t.mark(function e(n) {\n          var s, a, c, i, u, p, m, f, k, d, h, l, T, w;\n          return t.wrap(function (e) {\n            for (;;) switch (e.prev = e.next) {\n              case 0:\n                return e.next = 2, n.json();\n\n              case 2:\n                if (s = e.sent, a = s.code, c = s.resultInfo, i = s.bucketInfo, !(Object.keys(o).indexOf(a) > -1)) {\n                  e.next = 8;\n                  break;\n                }\n\n                throw new Error(\"请检查appName和userToken的有效性\");\n\n              case 8:\n                u = i.region, p = i.bucketName, m = i.cdnUrl, f = i.fileBasePath, k = c.credentials, d = c.startTime, h = c.expiredTime, l = k.tmpSecretId, T = k.tmpSecretKey, w = k.sessionToken, r({\n                  id: l,\n                  key: T,\n                  token: w,\n                  startTime: d,\n                  expiredTime: h,\n                  region: u,\n                  bucketName: p,\n                  cdnUrl: m,\n                  bucketContentPath: f\n                });\n\n              case 13:\n              case \"end\":\n                return e.stop();\n            }\n          }, e);\n        }));\n        return function (e) {\n          return n.apply(this, arguments);\n        };\n      }());\n    });\n  };\n},\n    a = function (e) {\n  return r({\n    auth: s(e)\n  });\n},\n    c = function (e) {\n  return n({\n    auth: s(e)\n  });\n};\n\nexport { c as aws, a as cos };","map":{"version":3,"mappings":";;;;;;AAOA,IAAMA,IAAW;EACf,KAAO,SADQ;EAEf,KAAO,mBAFQ;EAGT;AAHS,CAAjB;AAAA,IAKcC,IAAO;EAAEC;EAAAA,IAASC,eAATD;EAAiC;IAAA,OAA4B,IAAIE,OAAJ,CAAY,UAACC,CAAD,EAAUC,CAAV,EAAUA;MACxGC,MAA+DL,yFAAqBC,CAArBD,CAA/DK,EAAiGC,IAAjGD;QAAA,iBACE,WAAOE,CAAP,EAAOA;UAAP;UAAA;YAAA;cAAA;gBACoDA,OADpDC,YACoDD,EAASE,IAATF;;cADpD;gBAEKG,IAFLC,YACSC,UADTD,EACeE,gBADfF,EAC2BG,gBAD3BH,EAC2BG,EACtBJ,OAAOK,IAAPL,CAAYZ,CAAZY,EAAsBM,OAAtBN,CAA8BE,CAA9BF,IAA8BE,CAAS,CADjBE,CACtBJ,EAFL;kBAAAF;kBAAA;gBAAA;;gBAAA,MAIU,IAAIS,KAAJ,CAAU,0BAAV,CAJV;;cAAA;gBAMSC,IAAyCJ,EAAzCI,QAAOC,IAAkCL,EAAlCK,UAAPD,EAAkBE,IAAuBN,EAAvBM,MAAlBF,EAAyBG,IAAgBP,EAAhBO,YAAzBH,EACAI,IAAuCT,EAAvCS,WADAJ,EACaK,IAA0BV,EAA1BU,SADbL,EACwBM,IAAeX,EAAfW,WADxBN,EAEAO,IAA0CH,EAA1CG,WAFAP,EAEYQ,IAA8BJ,EAA9BI,YAFZR,EAE0BS,IAAgBL,EAAhBK,YAF1BT,EAGPf,EAAQ;kBACNyB,IAAIH,CADE;kBAENI,KAAKH,CAFC;kBAGNI,OAAOH,CAHD;kBAINJ,YAJM;kBAKNC,cALM;kBAMNN,SANM;kBAONC,aAPM;kBAQNC,SARM;kBASNW,mBAAmBV;gBATb,CAARlB,CAHOe;;cANT;cAAA;gBAAA;YAAA;UAAAc;QAAAC,CADFC;QAAA;UAAA;QAAAC;MAAA;IAAA,CADkF,CAA5B;EACtD,CADsD;AACtD,CANF;AAAA,ICmCaC,IAAM,UAACC,CAAD,EAACA;EAClB,OAAOC,EAAU;IAACvC,MAAMA,EAAKsC,CAALtC;EAAP,CAAVuC,CAAP;AAA6BD,CDpC/B;AAAA,ICsCaE,IAAM,UAACF,CAAD,EAACA;EAClB,OAAOG,EAAU;IAACzC,MAAMA,EAAKsC,CAALtC;EAAP,CAAVyC,CAAP;AAA6BH,CDvC/B;;ACuC+BA","names":["errorMap","auth","appName","userToken","Promise","resolve","reject","fetch","then","response","_context","json","Object","_yield$response$json","code","resultInfo","bucketInfo","keys","indexOf","Error","region","bucketName","cdnUrl","fileBasePath","credentials","startTime","expiredTime","tmpSecretId","tmpSecretKey","sessionToken","id","key","token","bucketContentPath","stop","_callee","_regeneratorRuntime","arguments","cos","options","cosCreate","aws","awsCreate"],"sources":["/Users/yzbaoo/Desktop/huohua/ilc-web-packages/packages/oss/src/service.ts","/Users/yzbaoo/Desktop/huohua/ilc-web-packages/packages/oss/src/index.ts"],"sourcesContent":["import { Options, Credentials } from './index';\n\n/**\n * 云商鉴权接口 @张剑\n * @param Options \n * @returns  () => Promise<Credentials> 返回函数为了方便失败后重试\n */\nconst errorMap = {\n  '802': '项目名称未配置',\n  '803': '用户token 登录状态检测不通过',\n  '-1': '系统错误' \n}\n export const auth = ({appName, userToken}: Options) => (): Promise<Credentials> => new Promise((resolve, reject) => {\n  fetch(`http://localhost:3000/resource/security/token?appName=${appName}&userToken=${userToken}`).then(\n    async (response) => {\n      const {code, resultInfo, bucketInfo}: any = await response.json();\n      if(Object.keys(errorMap).indexOf(code) > -1) {\n        // reject();\n        throw new Error('请检查appName和userToken的有效性');\n      };\n      const {region,bucketName,cdnUrl,fileBasePath} = bucketInfo;\n      const {credentials, startTime, expiredTime} = resultInfo;\n      const {tmpSecretId,tmpSecretKey, sessionToken} = credentials;\n      resolve({\n        id: tmpSecretId,\n        key: tmpSecretKey,\n        token: sessionToken,\n        startTime,\n        expiredTime,\n        region,\n        bucketName,\n        cdnUrl,\n        bucketContentPath: fileBasePath,\n      });\n    }\n  );\n})","/**\r\n * entry\r\n */\r\nimport { auth } from './service';\r\nimport { create as cosCreate } from './cos';\r\nimport { create as awsCreate } from './aws';\r\nexport interface Options{\r\n  appName: string; // 从工单获取\r\n  userToken: string; // 火花用户token\r\n}\r\nexport interface Credentials {\r\n  id: string;\r\n  key: string;\r\n  token: string;\r\n  region: string;\r\n  bucketName: string;\r\n  bucketContentPath: string;\r\n  cdnUrl: string;\r\n  startTime: number;\r\n  expiredTime: number;\r\n}\r\nexport interface Config {\r\n  auth(): Promise<Credentials>;\r\n}\r\nexport interface UploadParams {\r\n  file: File; // 上传文件\r\n  pathPrefix?: string; // 上传路径前缀，默认为空\r\n  rename?: boolean; // 是否重命名，默认为 true,文件名自动通过 uuid 生成\r\n  datePrefix?: boolean; // 上传路径前缀是否包含当前时间格式化字符串，默认为 true, 如 /2021-11-26/xx.png\r\n}\r\n\r\n// 上传成功后返回结果\r\nexport type UploadResult = {\r\n  url: string;\r\n  md5?: string;\r\n} | null\r\n\r\nexport type Creator = {\r\n  upload: (params: UploadParams) => Promise<UploadResult>;\r\n};\r\n\r\n\r\nexport const cos = (options: Options): Creator => {\r\n  return cosCreate({auth: auth(options)});\r\n}\r\nexport const aws = (options: Options): Creator => {\r\n  return awsCreate({auth: auth(options)});\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}