{"ast":null,"code":"import { a as asyncToGenerator, r as regenerator } from './utils-02659682.js';\nimport { create } from './cos.js';\nimport { create as create$1 } from './aws.js';\nimport 'cos-js-sdk-v5';\nimport '@aws-sdk/client-s3';\n/**\n * 云商鉴权接口 @张剑\n * @param Options \n * @returns  () => Promise<Credentials> 返回函数为了方便失败后重试\n */\n\nvar errorMap = {\n  '802': '项目名称未配置',\n  '803': '用户token 登录状态检测不通过',\n  '-1': '系统错误'\n};\n\nvar auth = function auth(_ref) {\n  var appName = _ref.appName,\n      userToken = _ref.userToken;\n  return function () {\n    return new Promise(function (resolve, reject) {\n      fetch(\"http://localhost:3000/resource/security/token?appName=\".concat(appName, \"&userToken=\").concat(userToken)).then( /*#__PURE__*/function () {\n        var _ref2 = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(response) {\n          var _yield$response$json, code, resultInfo, bucketInfo, region, bucketName, cdnUrl, fileBasePath, credentials, startTime, expiredTime, tmpSecretId, tmpSecretKey, sessionToken;\n\n          return regenerator.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return response.json();\n\n                case 2:\n                  _yield$response$json = _context.sent;\n                  code = _yield$response$json.code;\n                  resultInfo = _yield$response$json.resultInfo;\n                  bucketInfo = _yield$response$json.bucketInfo;\n\n                  if (!(Object.keys(errorMap).indexOf(code) > -1)) {\n                    _context.next = 8;\n                    break;\n                  }\n\n                  throw new Error('请检查appName和userToken的有效性');\n\n                case 8:\n                  region = bucketInfo.region, bucketName = bucketInfo.bucketName, cdnUrl = bucketInfo.cdnUrl, fileBasePath = bucketInfo.fileBasePath;\n                  credentials = resultInfo.credentials, startTime = resultInfo.startTime, expiredTime = resultInfo.expiredTime;\n                  tmpSecretId = credentials.tmpSecretId, tmpSecretKey = credentials.tmpSecretKey, sessionToken = credentials.sessionToken;\n                  resolve({\n                    id: tmpSecretId,\n                    key: tmpSecretKey,\n                    token: sessionToken,\n                    startTime: startTime,\n                    expiredTime: expiredTime,\n                    region: region,\n                    bucketName: bucketName,\n                    cdnUrl: cdnUrl,\n                    bucketContentPath: fileBasePath\n                  });\n\n                case 13:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    });\n  };\n};\n/**\r\n * entry\r\n */\n\n\nvar cos = function cos(options) {\n  return create({\n    auth: auth(options)\n  });\n};\n\nvar aws = function aws(options) {\n  return create$1({\n    auth: auth(options)\n  });\n};\n\nexport { aws, cos };","map":{"version":3,"mappings":";;;;;AAEA;;;;;;AAKA,IAAMA,QAAQ,GAAG;EACf,OAAO,SADQ;EAEf,OAAO,mBAFQ;EAGT;AAHS,CAAjB;;AAKQ,IAAMC,IAAI,GAAG,SAAPA,IAAO;EAAEC,WAAF,QAAEA;EAAAA,IAASC,SAAX,QAAWA,SAATD;EAAiC;IAAA,OAA4B,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;MACnHC,KAAK,CAA0DL,yEAA1D,aAA0DA,EAA1DM,MAA0DN,CAAqBC,SAArBD,CAA1D,CAALK,CAAiGE,IAAjGF;QAAA,4DACE,iBAAOG,QAAP;UAAA;;UAAA;YAAA;cAAA;gBAAA;kBAAAC;kBACoDD,eAAQ,CAACE,IAATF;;gBADpD;kBAAAG;kBACSC,IADT,wBACSA;kBAAMC,UADf,wBACeA;kBAAYC,UAD3B,wBAC2BA;;kBACtBC,YAAM,CAACC,IAAPD,CAAYjB,QAAZiB,EAAsBE,OAAtBF,CAA8BH,IAA9BG,IAAsC,CAAC,CAAvCA,GAFL;oBAAAN;oBAAA;kBAAA;;kBAAA,MAIU,IAAIS,KAAJ,CAAU,0BAAV,CAJV;;gBAAA;kBAMSC,MANT,GAMkDL,UANlD,CAMSK,QAAOC,UANhB,GAMkDN,UANlD,CAMgBM,UAAPD,EAAkBE,MAN3B,GAMkDP,UANlD,CAM2BO,MAAlBF,EAAyBG,YANlC,GAMkDR,UANlD,CAMkCQ,YAAzBH;kBACAI,WAPT,GAOgDV,UAPhD,CAOSU,aAAaC,SAPtB,GAOgDX,UAPhD,CAOsBW,SAAbD,EAAwBE,WAPjC,GAOgDZ,UAPhD,CAOiCY,WAAxBF;kBACAG,WART,GAQmDH,WARnD,CAQSG,aAAYC,YARrB,GAQmDJ,WARnD,CAQqBI,YAAZD,EAA0BE,YARnC,GAQmDL,WARnD,CAQmCK,YAA1BF;kBACPvB,OAAO,CAAC;oBACN0B,EAAE,EAAEH,WADE;oBAENI,GAAG,EAAEH,YAFC;oBAGNI,KAAK,EAAEH,YAHD;oBAINJ,SAAS,EAATA,SAJM;oBAKNC,WAAW,EAAXA,WALM;oBAMNN,MAAM,EAANA,MANM;oBAONC,UAAU,EAAVA,UAPM;oBAQNC,MAAM,EAANA,MARM;oBASNW,iBAAiB,EAAEV;kBATb,CAAD,CAAPnB;;gBATF;gBAAA;kBAAA;cAAA;YAAA;UAAA;QADF;;QAAA;UAAA;QAAA;MAAA;IADkF,EAA5B;EAAnC,CAAmC;AAAhD;ACZR;;;;;IA0Ca8B,GAAG,GAAG,SAANA,GAAM,CAACC,OAAD,EAA+B;EAChD,OAAOC,MAAS,CAAC;IAACpC,IAAI,EAAEA,IAAI,CAACmC,OAAD;EAAX,CAAD,CAAhB;AACD;;IACYE,GAAG,GAAG,SAANA,GAAM,CAACF,OAAD,EAA+B;EAChD,OAAOG,QAAS,CAAC;IAACtC,IAAI,EAAEA,IAAI,CAACmC,OAAD;EAAX,CAAD,CAAhB;AACD","names":["errorMap","auth","appName","userToken","Promise","resolve","reject","fetch","concat","then","response","_context","json","_yield$response$json","code","resultInfo","bucketInfo","Object","keys","indexOf","Error","region","bucketName","cdnUrl","fileBasePath","credentials","startTime","expiredTime","tmpSecretId","tmpSecretKey","sessionToken","id","key","token","bucketContentPath","cos","options","cosCreate","aws","awsCreate"],"sources":["/Users/yzbaoo/Desktop/huohua/ilc-web-packages/packages/oss/src/service.ts","/Users/yzbaoo/Desktop/huohua/ilc-web-packages/packages/oss/src/index.ts"],"sourcesContent":["import { Options, Credentials } from './index';\n\n/**\n * 云商鉴权接口 @张剑\n * @param Options \n * @returns  () => Promise<Credentials> 返回函数为了方便失败后重试\n */\nconst errorMap = {\n  '802': '项目名称未配置',\n  '803': '用户token 登录状态检测不通过',\n  '-1': '系统错误' \n}\n export const auth = ({appName, userToken}: Options) => (): Promise<Credentials> => new Promise((resolve, reject) => {\n  fetch(`http://localhost:3000/resource/security/token?appName=${appName}&userToken=${userToken}`).then(\n    async (response) => {\n      const {code, resultInfo, bucketInfo}: any = await response.json();\n      if(Object.keys(errorMap).indexOf(code) > -1) {\n        // reject();\n        throw new Error('请检查appName和userToken的有效性');\n      };\n      const {region,bucketName,cdnUrl,fileBasePath} = bucketInfo;\n      const {credentials, startTime, expiredTime} = resultInfo;\n      const {tmpSecretId,tmpSecretKey, sessionToken} = credentials;\n      resolve({\n        id: tmpSecretId,\n        key: tmpSecretKey,\n        token: sessionToken,\n        startTime,\n        expiredTime,\n        region,\n        bucketName,\n        cdnUrl,\n        bucketContentPath: fileBasePath,\n      });\n    }\n  );\n})","/**\r\n * entry\r\n */\r\nimport { auth } from './service';\r\nimport { create as cosCreate } from './cos';\r\nimport { create as awsCreate } from './aws';\r\nexport interface Options{\r\n  appName: string; // 从工单获取\r\n  userToken: string; // 火花用户token\r\n}\r\nexport interface Credentials {\r\n  id: string;\r\n  key: string;\r\n  token: string;\r\n  region: string;\r\n  bucketName: string;\r\n  bucketContentPath: string;\r\n  cdnUrl: string;\r\n  startTime: number;\r\n  expiredTime: number;\r\n}\r\nexport interface Config {\r\n  auth(): Promise<Credentials>;\r\n}\r\nexport interface UploadParams {\r\n  file: File; // 上传文件\r\n  pathPrefix?: string; // 上传路径前缀，默认为空\r\n  rename?: boolean; // 是否重命名，默认为 true,文件名自动通过 uuid 生成\r\n  datePrefix?: boolean; // 上传路径前缀是否包含当前时间格式化字符串，默认为 true, 如 /2021-11-26/xx.png\r\n}\r\n\r\n// 上传成功后返回结果\r\nexport type UploadResult = {\r\n  url: string;\r\n  md5?: string;\r\n} | null\r\n\r\nexport type Creator = {\r\n  upload: (params: UploadParams) => Promise<UploadResult>;\r\n};\r\n\r\n\r\nexport const cos = (options: Options): Creator => {\r\n  return cosCreate({auth: auth(options)});\r\n}\r\nexport const aws = (options: Options): Creator => {\r\n  return awsCreate({auth: auth(options)});\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}