{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar utils = require('./utils-fd988a1b.js');\n\nvar COS = require('cos-js-sdk-v5');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar COS__default = /*#__PURE__*/_interopDefaultLegacy(COS);\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        utils.defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar SLICE_SIZE = 1024 * 1024 * 1024;\nvar MAX_TRY_TIMES = 2; // 失败后尝试请求次数\n\nfunction create(config) {\n  var credentials;\n  var auth = config.auth;\n  var shareCOS = null;\n  var shareCOSPromise = null;\n\n  function createCOS() {\n    if (!shareCOSPromise) {\n      shareCOSPromise = new Promise(function (resolve, reject) {\n        auth().then(function (data) {\n          credentials = data;\n          var TmpSecretId = data.id,\n              TmpSecretKey = data.key,\n              SecurityToken = data.token,\n              startTime = data.startTime,\n              expiredTime = data.expiredTime;\n          var cos = new COS__default[\"default\"]({\n            // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n            getAuthorization: function getAuthorization(_options, callback) {\n              callback({\n                TmpSecretId: TmpSecretId,\n                TmpSecretKey: TmpSecretKey,\n                SecurityToken: SecurityToken,\n                // 建议返回服务器时间作为签名的开始时间，避免用户浏览器本地时间偏差过大导致签名错误\n                StartTime: startTime,\n                ExpiredTime: expiredTime\n              });\n            }\n          });\n          resolve(cos);\n        })[\"catch\"](function (err) {\n          console.log('err', err);\n          reject(err);\n        });\n      });\n    }\n\n    return shareCOSPromise;\n  }\n  /**\r\n   * 重置 shareCOS 引用\r\n   */\n\n\n  function resetCOS() {\n    shareCOS = null;\n    shareCOSPromise = null;\n  }\n  /**\r\n   * 实现腾讯云上传\r\n   * @returns\r\n   */\n\n\n  function upload(_x, _x2) {\n    return _upload.apply(this, arguments);\n  }\n\n  function _upload() {\n    _upload = utils.asyncToGenerator( /*#__PURE__*/utils.regenerator.mark(function _callee(params, tryTimes) {\n      var paramsWithDefault, _credentials, region, bucketName, bucketContentPath, cdnUrl, fileKey, extName, now, result, url, md5;\n\n      return utils.regenerator.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              paramsWithDefault = _objectSpread({\n                pathPrefix: '',\n                datePrefix: true,\n                rename: true\n              }, params);\n\n              if (shareCOS) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.next = 4;\n              return createCOS();\n\n            case 4:\n              shareCOS = _context.sent;\n\n            case 5:\n              _credentials = credentials, region = _credentials.region, bucketName = _credentials.bucketName, bucketContentPath = _credentials.bucketContentPath, cdnUrl = _credentials.cdnUrl; // 处理上传文件名\n              // let fileKey = encodeURIComponent(paramsWithDefault.file.name);\n\n              fileKey = paramsWithDefault.file.name; // cos内部已经encode了，重复encode会导致上传中文文件名不可用\n\n              if (paramsWithDefault.rename) {\n                extName = fileKey.lastIndexOf('.') !== -1 ? fileKey.split('.').pop() : '';\n                fileKey = utils.uuid() + (extName ? \".\".concat(extName) : '');\n              }\n\n              if (paramsWithDefault.datePrefix) {\n                now = new Date();\n                fileKey = utils.getDateFormatString(now) + '/' + fileKey;\n              }\n\n              if (paramsWithDefault.pathPrefix) {\n                fileKey = utils.formatApiPath(paramsWithDefault.pathPrefix) + '/' + fileKey;\n              }\n\n              fileKey = utils.formatApiPath(bucketContentPath) + '/' + fileKey;\n              result = null;\n              _context.prev = 12;\n              _context.next = 15;\n              return new Promise(function (resolve, reject) {\n                shareCOS.uploadFile({\n                  Bucket: bucketName,\n                  // 填入您自己的存储桶，必须字段 \n                  Region: region,\n                  // 存储桶所在地域，必须字段\n                  Key: fileKey,\n                  // 存储在桶里的对象键（例如1.jpg，a/b/test.txt），必须字段\n                  SliceSize: SLICE_SIZE,\n                  // 触发分块上传的阈值，默认1GB; 超过1GB使用分块上传，非必须\n                  Body: params.file\n                }, function (err, data) {\n                  if (data) resolve(data);\n                  if (err) reject(err.error);\n                });\n              });\n\n            case 15:\n              result = _context.sent;\n              _context.next = 26;\n              break;\n\n            case 18:\n              _context.prev = 18;\n              _context.t0 = _context[\"catch\"](12);\n              console.error('There was an error uploading your file: ', _context.t0);\n\n              if (!(typeof tryTimes === 'undefined' || tryTimes < MAX_TRY_TIMES)) {\n                _context.next = 26;\n                break;\n              }\n\n              resetCOS();\n              _context.next = 25;\n              return upload(params, typeof tryTimes === 'number' ? tryTimes + 1 : 2);\n\n            case 25:\n              result = _context.sent;\n\n            case 26:\n              if (!result) {\n                _context.next = 31;\n                break;\n              }\n\n              url = '';\n\n              if (cdnUrl) {\n                url = utils.formatApiPath(cdnUrl) + '/' + fileKey;\n              } else {\n                url = 'https://' + result.Location;\n              } // 临时获取md5方案： 不触发分块上传取ETag，触发后置为null\n\n\n              md5 = params.file.size > SLICE_SIZE ? null : JSON.parse(result.ETag);\n              return _context.abrupt(\"return\", {\n                url: url,\n                md5: md5\n              });\n\n            case 31:\n              return _context.abrupt(\"return\", null);\n\n            case 32:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[12, 18]]);\n    }));\n    return _upload.apply(this, arguments);\n  }\n\n  return {\n    upload: upload\n  };\n}\n\nexports.create = create;","map":{"version":3,"mappings":"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","names":["SLICE_SIZE","MAX_TRY_TIMES","create","config","credentials","auth","shareCOS","shareCOSPromise","createCOS","Promise","resolve","reject","then","data","TmpSecretId","id","TmpSecretKey","key","SecurityToken","token","startTime","expiredTime","cos","COS","getAuthorization","_options","callback","StartTime","ExpiredTime","err","console","log","resetCOS","upload","_upload","params","tryTimes","paramsWithDefault","pathPrefix","datePrefix","rename","_context","_credentials","region","bucketName","bucketContentPath","cdnUrl","fileKey","file","name","extName","lastIndexOf","split","pop","uuid","now","Date","getDateFormatString","formatApiPath","result","uploadFile","Bucket","Region","Key","SliceSize","Body","error","url","Location","md5","size","JSON","parse","ETag","_regeneratorRuntime"],"sources":["/Users/yzbaoo/Desktop/huohua/ilc-web-packages/packages/oss/src/cos.ts"],"sourcesContent":["/**\r\n * 腾讯云 cos 上传\r\n * https://cloud.tencent.com/document/product/436/11459\r\n */\r\nimport COS from 'cos-js-sdk-v5';\r\nimport { uuid, getDateFormatString, formatApiPath } from './utils';\r\nimport type { Config, Creator, Credentials, UploadParams, UploadResult } from './index';\r\n\r\nconst SLICE_SIZE = 1024 * 1024 * 1024;\r\nconst MAX_TRY_TIMES = 2; // 失败后尝试请求次数\r\n\r\nexport function create(config: Required<Config>): Creator {\r\n  \r\n  let credentials: Credentials;\r\n  const auth = config.auth;\r\n\r\n  let shareCOS: COS | null = null;\r\n  let shareCOSPromise: Promise<COS> | null = null;\r\n\r\n  function createCOS (): Promise<COS> {\r\n    if(!shareCOSPromise) {\r\n      shareCOSPromise =  new Promise((resolve, reject) => {\r\n        auth().then((data) => {\r\n          credentials = data;\r\n          const { id: TmpSecretId, key: TmpSecretKey, token: SecurityToken, startTime, expiredTime } = data;\r\n          const cos = new COS({\r\n            // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n            getAuthorization: (_options, callback) => {\r\n              callback({\r\n                TmpSecretId,\r\n                TmpSecretKey,\r\n                SecurityToken,\r\n                // 建议返回服务器时间作为签名的开始时间，避免用户浏览器本地时间偏差过大导致签名错误\r\n                StartTime: startTime, \r\n                ExpiredTime: expiredTime, \r\n            });\r\n            }\r\n          });\r\n          resolve(cos);\r\n        })\r\n        .catch((err) => {\r\n          console.log('err', err);\r\n          reject(err);\r\n        });\r\n      }) \r\n    }\r\n    return shareCOSPromise;\r\n  }\r\n  /**\r\n   * 重置 shareCOS 引用\r\n   */\r\n  function resetCOS(): void {\r\n    shareCOS = null;\r\n    shareCOSPromise = null;\r\n  }\r\n  /**\r\n   * 实现腾讯云上传\r\n   * @returns\r\n   */\r\n  async function upload(params: UploadParams, tryTimes?: number): Promise<UploadResult> {\r\n    const paramsWithDefault = {\r\n      pathPrefix: '',\r\n      datePrefix: true,\r\n      rename: true,\r\n      ...params,\r\n    };\r\n    if(!shareCOS) {\r\n      shareCOS = await createCOS();\r\n    }\r\n    const {region, bucketName, bucketContentPath, cdnUrl} = credentials;\r\n\r\n    // 处理上传文件名\r\n    // let fileKey = encodeURIComponent(paramsWithDefault.file.name);\r\n    let fileKey = paramsWithDefault.file.name; // cos内部已经encode了，重复encode会导致上传中文文件名不可用\r\n    if (paramsWithDefault.rename) {\r\n      const extName = fileKey.lastIndexOf('.') !== -1 ? fileKey.split('.').pop() : '';\r\n      fileKey = uuid() + (extName ? `.${extName}` : '');\r\n    }\r\n    if (paramsWithDefault.datePrefix) {\r\n      const now = new Date();\r\n      fileKey = getDateFormatString(now) + '/' + fileKey;\r\n    }\r\n    if (paramsWithDefault.pathPrefix) {\r\n      fileKey = formatApiPath(paramsWithDefault.pathPrefix) + '/' + fileKey;\r\n    }\r\n    fileKey = formatApiPath(bucketContentPath) + '/' + fileKey;\r\n\r\n    let result: any = null;\r\n    try {\r\n      result = await new Promise((resolve, reject) => {\r\n        (shareCOS as COS).uploadFile({\r\n          Bucket: bucketName,              // 填入您自己的存储桶，必须字段 \r\n          Region: region,               // 存储桶所在地域，必须字段\r\n          Key: fileKey,                     // 存储在桶里的对象键（例如1.jpg，a/b/test.txt），必须字段\r\n          SliceSize: SLICE_SIZE,            // 触发分块上传的阈值，默认1GB; 超过1GB使用分块上传，非必须\r\n          Body: params.file, \r\n        }, (err: COS.CosError, data: COS.UploadFileResult) => {\r\n          if(data) resolve(data);\r\n          if(err) reject(err.error);\r\n        });\r\n      })\r\n    } catch (err) {\r\n      console.error('There was an error uploading your file: ', err);\r\n      if (typeof tryTimes === 'undefined' || tryTimes < MAX_TRY_TIMES) {\r\n        resetCOS();\r\n        result = await upload(params, typeof tryTimes === 'number' ? tryTimes + 1 : 2);\r\n      }\r\n    }\r\n    if (result) {\r\n      let url = '';\r\n      if(cdnUrl) {\r\n        url = formatApiPath(cdnUrl) + '/' + fileKey;\r\n      }else {\r\n        url = 'https://' + result.Location; \r\n      }\r\n      // 临时获取md5方案： 不触发分块上传取ETag，触发后置为null\r\n      const md5 =  params.file.size > SLICE_SIZE ? null : JSON.parse(result.ETag);\r\n\r\n      return {url, md5}; \r\n    }\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    upload\r\n  };\r\n}"]},"metadata":{},"sourceType":"script"}