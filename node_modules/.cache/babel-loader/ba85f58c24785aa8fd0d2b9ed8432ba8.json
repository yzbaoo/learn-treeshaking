{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sha256 = void 0;\n\nvar util_1 = require(\"@aws-crypto/util\");\n\nvar constants_1 = require(\"./constants\");\n\nvar util_locate_window_1 = require(\"@aws-sdk/util-locate-window\");\n\nvar Sha256 =\n/** @class */\nfunction () {\n  function Sha256(secret) {\n    this.toHash = new Uint8Array(0);\n\n    if (secret !== void 0) {\n      this.key = new Promise(function (resolve, reject) {\n        (0, util_locate_window_1.locateWindow)().crypto.subtle.importKey(\"raw\", (0, util_1.convertToBuffer)(secret), constants_1.SHA_256_HMAC_ALGO, false, [\"sign\"]).then(resolve, reject);\n      });\n      this.key.catch(function () {});\n    }\n  }\n\n  Sha256.prototype.update = function (data) {\n    if ((0, util_1.isEmptyData)(data)) {\n      return;\n    }\n\n    var update = (0, util_1.convertToBuffer)(data);\n    var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);\n    typedArray.set(this.toHash, 0);\n    typedArray.set(update, this.toHash.byteLength);\n    this.toHash = typedArray;\n  };\n\n  Sha256.prototype.digest = function () {\n    var _this = this;\n\n    if (this.key) {\n      return this.key.then(function (key) {\n        return (0, util_locate_window_1.locateWindow)().crypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, key, _this.toHash).then(function (data) {\n          return new Uint8Array(data);\n        });\n      });\n    }\n\n    if ((0, util_1.isEmptyData)(this.toHash)) {\n      return Promise.resolve(constants_1.EMPTY_DATA_SHA_256);\n    }\n\n    return Promise.resolve().then(function () {\n      return (0, util_locate_window_1.locateWindow)().crypto.subtle.digest(constants_1.SHA_256_HASH, _this.toHash);\n    }).then(function (data) {\n      return Promise.resolve(new Uint8Array(data));\n    });\n  };\n\n  return Sha256;\n}();\n\nexports.Sha256 = Sha256;","map":{"version":3,"mappings":";;;;;;;AACA;;AACA;;AAKA;;AAEA;AAAA;AAAA;EAIE,gBAAYA,MAAZ,EAA+B;IAFvB,cAAqB,IAAIC,UAAJ,CAAe,CAAf,CAArB;;IAGN,IAAID,MAAM,KAAK,KAAK,CAApB,EAAuB;MACrB,KAAKE,GAAL,GAAW,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAgB;QACrC,yCACGC,MADH,CACUC,MADV,CACiBC,SADjB,CAEI,KAFJ,EAGI,4BAAgBR,MAAhB,CAHJ,EAIIS,6BAJJ,EAKI,KALJ,EAMI,CAAC,MAAD,CANJ,EAQGC,IARH,CAQQN,OARR,EAQiBC,MARjB;MASD,CAVU,CAAX;MAWA,KAAKH,GAAL,CAASS,KAAT,CAAe,aAAQ,CAAvB;IACD;EACF;;EAEDC,oCAAOC,IAAP,EAAuB;IACrB,IAAI,wBAAYA,IAAZ,CAAJ,EAAuB;MACrB;IACD;;IAED,IAAMC,MAAM,GAAG,4BAAgBD,IAAhB,CAAf;IACA,IAAME,UAAU,GAAG,IAAId,UAAJ,CACjB,KAAKe,MAAL,CAAYC,UAAZ,GAAyBH,MAAM,CAACG,UADf,CAAnB;IAGAF,UAAU,CAACG,GAAX,CAAe,KAAKF,MAApB,EAA4B,CAA5B;IACAD,UAAU,CAACG,GAAX,CAAeJ,MAAf,EAAuB,KAAKE,MAAL,CAAYC,UAAnC;IACA,KAAKD,MAAL,GAAcD,UAAd;EACD,CAZD;;EAcAH;IAAA;;IACE,IAAI,KAAKV,GAAT,EAAc;MACZ,OAAO,KAAKA,GAAL,CAASQ,IAAT,CAAc,UAACR,GAAD,EAAI;QACvB,gDACGI,MADH,CACUC,MADV,CACiBY,IADjB,CACsBV,6BADtB,EACyCP,GADzC,EAC8CkB,KAAI,CAACJ,MADnD,EAEGN,IAFH,CAEQ,UAACG,IAAD,EAAK;UAAK,WAAIZ,UAAJ,CAAeY,IAAf;QAAoB,CAFtC;MAEuC,CAHlC,CAAP;IAKD;;IAED,IAAI,wBAAY,KAAKG,MAAjB,CAAJ,EAA8B;MAC5B,OAAOb,OAAO,CAACC,OAAR,CAAgBK,8BAAhB,CAAP;IACD;;IAED,OAAON,OAAO,CAACC,OAAR,GACJM,IADI,CACC;MACJ,gDAAeJ,MAAf,CAAsBC,MAAtB,CAA6Bc,MAA7B,CAAoCZ,wBAApC,EAAkDW,KAAI,CAACJ,MAAvD;IAA8D,CAF3D,EAIJN,IAJI,CAIC,UAACG,IAAD,EAAK;MAAK,cAAO,CAACT,OAAR,CAAgB,IAAIH,UAAJ,CAAeY,IAAf,CAAhB;IAAqC,CAJhD,CAAP;EAKD,CAlBD;;EAmBF;AAAC,CAtDD;;AAAaS","names":["secret","Uint8Array","key","Promise","resolve","reject","crypto","subtle","importKey","constants_1","then","catch","Sha256","data","update","typedArray","toHash","byteLength","set","sign","_this","digest","exports"],"sources":["/Users/yzbaoo/Desktop/huohua/ilc-web-packages/node_modules/@aws-crypto/sha256-browser/src/webCryptoSha256.ts"],"sourcesContent":["import { Hash, SourceData } from \"@aws-sdk/types\";\nimport { isEmptyData, convertToBuffer } from \"@aws-crypto/util\";\nimport {\n  EMPTY_DATA_SHA_256,\n  SHA_256_HASH,\n  SHA_256_HMAC_ALGO,\n} from \"./constants\";\nimport { locateWindow } from \"@aws-sdk/util-locate-window\";\n\nexport class Sha256 implements Hash {\n  private readonly key: Promise<CryptoKey> | undefined;\n  private toHash: Uint8Array = new Uint8Array(0);\n\n  constructor(secret?: SourceData) {\n    if (secret !== void 0) {\n      this.key = new Promise((resolve, reject) => {\n        locateWindow()\n          .crypto.subtle.importKey(\n            \"raw\",\n            convertToBuffer(secret),\n            SHA_256_HMAC_ALGO,\n            false,\n            [\"sign\"]\n          )\n          .then(resolve, reject);\n      });\n      this.key.catch(() => {});\n    }\n  }\n\n  update(data: SourceData): void {\n    if (isEmptyData(data)) {\n      return;\n    }\n\n    const update = convertToBuffer(data);\n    const typedArray = new Uint8Array(\n      this.toHash.byteLength + update.byteLength\n    );\n    typedArray.set(this.toHash, 0);\n    typedArray.set(update, this.toHash.byteLength);\n    this.toHash = typedArray;\n  }\n\n  digest(): Promise<Uint8Array> {\n    if (this.key) {\n      return this.key.then((key) =>\n        locateWindow()\n          .crypto.subtle.sign(SHA_256_HMAC_ALGO, key, this.toHash)\n          .then((data) => new Uint8Array(data))\n      );\n    }\n\n    if (isEmptyData(this.toHash)) {\n      return Promise.resolve(EMPTY_DATA_SHA_256);\n    }\n\n    return Promise.resolve()\n      .then(() =>\n        locateWindow().crypto.subtle.digest(SHA_256_HASH, this.toHash)\n      )\n      .then((data) => Promise.resolve(new Uint8Array(data)));\n  }\n}\n"]},"metadata":{},"sourceType":"script"}