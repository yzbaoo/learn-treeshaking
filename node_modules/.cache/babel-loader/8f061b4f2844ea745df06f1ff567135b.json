{"ast":null,"code":"import { a as e, r as t, f as r, d as n, u as a, g as c } from \"./utils-02659682.js\";\nimport { PutObjectCommand as o, S3Client as i } from \"@aws-sdk/client-s3\";\n\nfunction s(e, t) {\n  var r = Object.keys(e);\n\n  if (Object.getOwnPropertySymbols) {\n    var n = Object.getOwnPropertySymbols(e);\n    t && (n = n.filter(function (t) {\n      return Object.getOwnPropertyDescriptor(e, t).enumerable;\n    })), r.push.apply(r, n);\n  }\n\n  return r;\n}\n\nfunction u(e) {\n  for (var t = 1; t < arguments.length; t++) {\n    var r = null != arguments[t] ? arguments[t] : {};\n    t % 2 ? s(Object(r), !0).forEach(function (t) {\n      n(e, t, r[t]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : s(Object(r)).forEach(function (t) {\n      Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));\n    });\n  }\n\n  return e;\n}\n\nvar p = [\"image/gif\", \"image/jpeg\", \"image/png\"];\n\nfunction f(n) {\n  var s,\n      f = n.auth,\n      l = null,\n      b = null;\n\n  function y() {\n    return b || (b = new Promise(function (e, t) {\n      f().then(function (t) {\n        s = t;\n        var r = t.id,\n            n = t.key,\n            a = t.token,\n            c = t.region,\n            o = new i({\n          region: c,\n          credentials: {\n            accessKeyId: r,\n            secretAccessKey: n,\n            sessionToken: a\n          }\n        });\n        e(o);\n      }).catch(function (e) {\n        console.log(\"err\", e), t(e);\n      });\n    })), b;\n  }\n\n  function d() {\n    l = null, b = null;\n  }\n\n  function g(e, t) {\n    return O.apply(this, arguments);\n  }\n\n  function O() {\n    return (O = e(t.mark(function e(n, i) {\n      var f, b, O, m, h, x, P, j, w, k, v;\n      return t.wrap(function (e) {\n        for (;;) switch (e.prev = e.next) {\n          case 0:\n            if (f = u({\n              pathPrefix: \"\",\n              datePrefix: !0,\n              rename: !0\n            }, n), l) {\n              e.next = 5;\n              break;\n            }\n\n            return e.next = 4, y();\n\n          case 4:\n            l = e.sent;\n\n          case 5:\n            return O = (b = s).bucketName, m = b.bucketContentPath, h = b.cdnUrl, x = encodeURIComponent(f.file.name), f.rename && (P = -1 !== x.lastIndexOf(\".\") ? x.split(\".\").pop() : \"\", x = a() + (P ? \".\".concat(P) : \"\")), f.datePrefix && (j = new Date(), x = c(j) + \"/\" + x), f.pathPrefix && (x = r(f.pathPrefix) + \"/\" + x), x = r(m) + \"/\" + x, w = {\n              Bucket: O,\n              Key: x,\n              Body: n.file\n            }, k = f.file.type, p.includes(k) && Object.assign(w, {\n              ContentType: k\n            }), v = null, e.prev = 15, e.next = 18, l.send(new o(w));\n\n          case 18:\n            v = e.sent, e.next = 29;\n            break;\n\n          case 21:\n            if (e.prev = 21, e.t0 = e.catch(15), console.error(\"There was an error uploading your file: \", e.t0), !(void 0 === i || i < 2)) {\n              e.next = 29;\n              break;\n            }\n\n            return d(), e.next = 28, g(n, \"number\" == typeof i ? i + 1 : 2);\n\n          case 28:\n            v = e.sent;\n\n          case 29:\n            if (!v) {\n              e.next = 31;\n              break;\n            }\n\n            return e.abrupt(\"return\", {\n              url: r(h) + \"/\" + x\n            });\n\n          case 31:\n            return e.abrupt(\"return\", null);\n\n          case 32:\n          case \"end\":\n            return e.stop();\n        }\n      }, e, null, [[15, 21]]);\n    }))).apply(this, arguments);\n  }\n\n  return {\n    upload: g\n  };\n}\n\nexport { f as create };","map":{"version":3,"mappings":"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","names":["PRESET_CONTENT_TYPES","create","config","credentials","auth","shareS3Client","shareS3ClientPromise","createS3Client","Promise","resolve","reject","then","data","accessKeyId","id","secretAccessKey","key","sessionToken","token","region","s3Client","S3Client","err","console","log","resetS3Client","upload","_upload","params","tryTimes","paramsWithDefault","_objectSpread","pathPrefix","datePrefix","rename","_context","bucketName","_credentials","bucketContentPath","cdnUrl","fileKey","encodeURIComponent","file","name","extName","lastIndexOf","split","pop","uuid","now","Date","getDateFormatString","formatApiPath","uploadParams","Bucket","Key","Body","fileType","type","includes","Object","assign","ContentType","result","send","PutObjectCommand","error","t0","url","stop"],"sources":["/Users/yzbaoo/Desktop/huohua/ilc-web-packages/packages/oss/src/aws.ts"],"sourcesContent":["/**\r\n * 实现基于AWS的OSS存取\r\n * 参考 https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/s3-example-photo-album.html 实现\r\n */\r\nimport { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';\r\nimport { uuid, getDateFormatString, formatApiPath } from './utils';\r\nimport type { Config, Creator, Credentials, UploadParams, UploadResult } from './index';\r\n\r\nconst PRESET_CONTENT_TYPES = ['image/gif', 'image/jpeg', 'image/png']; // 图片文件类型\r\nconst MAX_TRY_TIMES = 2; // 失败后尝试请求次数\r\n\r\nexport function create(config: Required<Config>): Creator {\r\n  \r\n  let credentials: Credentials;\r\n  const auth = config.auth;\r\n\r\n  let shareS3Client: S3Client | null = null;\r\n  let shareS3ClientPromise: Promise<S3Client> | null = null;\r\n  /**\r\n   * 创建 s3Client，支持同时调用多次，只会产生同一个 shareS3Client\r\n   */\r\n  function createS3Client(): Promise<S3Client> {\r\n    if (!shareS3ClientPromise) {\r\n      shareS3ClientPromise = new Promise((resolve, reject) => {\r\n        auth().then((data) => {\r\n          credentials = data;\r\n          const { id: accessKeyId, key: secretAccessKey, token: sessionToken, region } = data;\r\n          const s3Client = new S3Client({\r\n            region,\r\n            credentials: {\r\n              accessKeyId,\r\n              secretAccessKey,\r\n              sessionToken,\r\n            },\r\n          });\r\n          resolve(s3Client);\r\n        })\r\n        .catch((err) => {\r\n          console.log('err', err);\r\n          reject(err);\r\n        });\r\n      });\r\n    }\r\n    return shareS3ClientPromise;\r\n  }\r\n  /**\r\n   * 重置 shareS3Client 引用\r\n   */\r\n  function resetS3Client(): void {\r\n    shareS3Client = null;\r\n    shareS3ClientPromise = null;\r\n  }\r\n\r\n  /**\r\n   * AWS上传\r\n   * @param params - 上传参数\r\n   * @param tryTimes - 上传尝试次数\r\n   * @returns 成功返回上传对象，失败返回 null\r\n   */\r\n  async function upload(params: UploadParams, tryTimes?: number): Promise<UploadResult> {\r\n    const paramsWithDefault = {\r\n      pathPrefix: '',\r\n      datePrefix: true,\r\n      rename: true,\r\n      ...params,\r\n    };\r\n    if (!shareS3Client) {\r\n      shareS3Client = await createS3Client();\r\n    }\r\n    const {bucketName, bucketContentPath, cdnUrl} = credentials;\r\n    // 处理上传文件名\r\n    let fileKey = encodeURIComponent(paramsWithDefault.file.name);\r\n    if (paramsWithDefault.rename) {\r\n      const extName = fileKey.lastIndexOf('.') !== -1 ? fileKey.split('.').pop() : '';\r\n      fileKey = uuid() + (extName ? `.${extName}` : '');\r\n    }\r\n    if (paramsWithDefault.datePrefix) {\r\n      const now = new Date();\r\n      fileKey = getDateFormatString(now) + '/' + fileKey;\r\n    }\r\n    if (paramsWithDefault.pathPrefix) {\r\n      fileKey = formatApiPath(paramsWithDefault.pathPrefix) + '/' + fileKey;\r\n    }\r\n    fileKey = formatApiPath(bucketContentPath) + '/' + fileKey;\r\n\r\n    // 组织上传参数\r\n    const uploadParams = {\r\n      Bucket: bucketName,\r\n      Key: fileKey,\r\n      Body: params.file,\r\n    };\r\n\r\n    // 图片文件，设置上传 contentType，防止直接打开上传后的文件触发自动下载\r\n    const fileType = paramsWithDefault.file.type;\r\n    if (PRESET_CONTENT_TYPES.includes(fileType)) {\r\n      Object.assign(uploadParams, {\r\n        ContentType: fileType,\r\n      });\r\n    }\r\n\r\n    let result = null;\r\n    try {\r\n      result = await shareS3Client.send(new PutObjectCommand(uploadParams));\r\n    } catch (err) {\r\n      console.error('There was an error uploading your file: ', err);\r\n      if (typeof tryTimes === 'undefined' || tryTimes < MAX_TRY_TIMES) {\r\n        resetS3Client();\r\n        result = await upload(params, typeof tryTimes === 'number' ? tryTimes + 1 : 2);\r\n      }\r\n    }\r\n    if (result) {\r\n      return {\r\n        url: formatApiPath(cdnUrl) + '/' + fileKey\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n  return {\r\n    upload\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}