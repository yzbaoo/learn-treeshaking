{"ast":null,"code":"import { __read } from \"tslib\";\nvar DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/;\nvar IP_ADDRESS_PATTERN = /(\\d+\\.){3}\\d+/;\nvar DOTS_PATTERN = /\\.\\./;\nexport var DOT_PATTERN = /\\./;\nexport var S3_HOSTNAME_PATTERN = /^(.+\\.)?s3(-fips)?(\\.dualstack)?[.-]([a-z0-9-]+)\\./;\nvar S3_US_EAST_1_ALTNAME_PATTERN = /^s3(-external-1)?\\.amazonaws\\.com$/;\nvar AWS_PARTITION_SUFFIX = \"amazonaws.com\";\nexport var isBucketNameOptions = function (options) {\n  return typeof options.bucketName === \"string\";\n};\nexport var isDnsCompatibleBucketName = function (bucketName) {\n  return DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);\n};\n\nvar getRegionalSuffix = function (hostname) {\n  var parts = hostname.match(S3_HOSTNAME_PATTERN);\n  return [parts[4], hostname.replace(new RegExp(\"^\" + parts[0]), \"\")];\n};\n\nexport var getSuffix = function (hostname) {\n  return S3_US_EAST_1_ALTNAME_PATTERN.test(hostname) ? [\"us-east-1\", AWS_PARTITION_SUFFIX] : getRegionalSuffix(hostname);\n};\nexport var getSuffixForArnEndpoint = function (hostname) {\n  return S3_US_EAST_1_ALTNAME_PATTERN.test(hostname) ? [hostname.replace(\".\" + AWS_PARTITION_SUFFIX, \"\"), AWS_PARTITION_SUFFIX] : getRegionalSuffix(hostname);\n};\nexport var validateArnEndpointOptions = function (options) {\n  if (options.pathStyleEndpoint) {\n    throw new Error(\"Path-style S3 endpoint is not supported when bucket is an ARN\");\n  }\n\n  if (options.accelerateEndpoint) {\n    throw new Error(\"Accelerate endpoint is not supported when bucket is an ARN\");\n  }\n\n  if (!options.tlsCompatible) {\n    throw new Error(\"HTTPS is required when bucket is an ARN\");\n  }\n};\nexport var validateService = function (service) {\n  if (service !== \"s3\" && service !== \"s3-outposts\" && service !== \"s3-object-lambda\") {\n    throw new Error(\"Expect 's3' or 's3-outposts' or 's3-object-lambda' in ARN service component\");\n  }\n};\nexport var validateS3Service = function (service) {\n  if (service !== \"s3\") {\n    throw new Error(\"Expect 's3' in Accesspoint ARN service component\");\n  }\n};\nexport var validateOutpostService = function (service) {\n  if (service !== \"s3-outposts\") {\n    throw new Error(\"Expect 's3-posts' in Outpost ARN service component\");\n  }\n};\nexport var validatePartition = function (partition, options) {\n  if (partition !== options.clientPartition) {\n    throw new Error(\"Partition in ARN is incompatible, got \\\"\" + partition + \"\\\" but expected \\\"\" + options.clientPartition + \"\\\"\");\n  }\n};\nexport var validateRegion = function (region, options) {\n  if (region === \"\") {\n    throw new Error(\"ARN region is empty\");\n  }\n\n  if (options.useFipsEndpoint) {\n    if (!options.allowFipsRegion) {\n      throw new Error(\"FIPS region is not supported\");\n    } else if (!isEqualRegions(region, options.clientRegion)) {\n      throw new Error(\"Client FIPS region \" + options.clientRegion + \" doesn't match region \" + region + \" in ARN\");\n    }\n  }\n\n  if (!options.useArnRegion && !isEqualRegions(region, options.clientRegion || \"\") && !isEqualRegions(region, options.clientSigningRegion || \"\")) {\n    throw new Error(\"Region in ARN is incompatible, got \" + region + \" but expected \" + options.clientRegion);\n  }\n};\nexport var validateRegionalClient = function (region) {\n  if ([\"s3-external-1\", \"aws-global\"].includes(region)) {\n    throw new Error(\"Client region \" + region + \" is not regional\");\n  }\n};\n\nvar isEqualRegions = function (regionA, regionB) {\n  return regionA === regionB;\n};\n\nexport var validateAccountId = function (accountId) {\n  if (!/[0-9]{12}/.exec(accountId)) {\n    throw new Error(\"Access point ARN accountID does not match regex '[0-9]{12}'\");\n  }\n};\nexport var validateDNSHostLabel = function (label, options) {\n  if (options === void 0) {\n    options = {\n      tlsCompatible: true\n    };\n  }\n\n  if (label.length >= 64 || !/^[a-z0-9][a-z0-9.-]*[a-z0-9]$/.test(label) || /(\\d+\\.){3}\\d+/.test(label) || /[.-]{2}/.test(label) || (options === null || options === void 0 ? void 0 : options.tlsCompatible) && DOT_PATTERN.test(label)) {\n    throw new Error(\"Invalid DNS label \" + label);\n  }\n};\nexport var validateCustomEndpoint = function (options) {\n  if (options.isCustomEndpoint) {\n    if (options.dualstackEndpoint) throw new Error(\"Dualstack endpoint is not supported with custom endpoint\");\n    if (options.accelerateEndpoint) throw new Error(\"Accelerate endpoint is not supported with custom endpoint\");\n  }\n};\nexport var getArnResources = function (resource) {\n  var delimiter = resource.includes(\":\") ? \":\" : \"/\";\n\n  var _a = __read(resource.split(delimiter)),\n      resourceType = _a[0],\n      rest = _a.slice(1);\n\n  if (resourceType === \"accesspoint\") {\n    if (rest.length !== 1 || rest[0] === \"\") {\n      throw new Error(\"Access Point ARN should have one resource accesspoint\" + delimiter + \"{accesspointname}\");\n    }\n\n    return {\n      accesspointName: rest[0]\n    };\n  } else if (resourceType === \"outpost\") {\n    if (!rest[0] || rest[1] !== \"accesspoint\" || !rest[2] || rest.length !== 3) {\n      throw new Error(\"Outpost ARN should have resource outpost\" + delimiter + \"{outpostId}\" + delimiter + \"accesspoint\" + delimiter + \"{accesspointName}\");\n    }\n\n    var _b = __read(rest, 3),\n        outpostId = _b[0],\n        _1 = _b[1],\n        accesspointName = _b[2];\n\n    return {\n      outpostId: outpostId,\n      accesspointName: accesspointName\n    };\n  } else {\n    throw new Error(\"ARN resource should begin with 'accesspoint\" + delimiter + \"' or 'outpost\" + delimiter + \"'\");\n  }\n};\nexport var validateNoDualstack = function (dualstackEndpoint) {\n  if (dualstackEndpoint) throw new Error(\"Dualstack endpoint is not supported with Outpost or Multi-region Access Point ARN.\");\n};\nexport var validateNoFIPS = function (useFipsEndpoint) {\n  if (useFipsEndpoint) throw new Error(\"FIPS region is not supported with Outpost.\");\n};\nexport var validateMrapAlias = function (name) {\n  try {\n    name.split(\".\").forEach(function (label) {\n      validateDNSHostLabel(label);\n    });\n  } catch (e) {\n    throw new Error(\"\\\"\" + name + \"\\\" is not a DNS compatible name.\");\n  }\n};","map":{"version":3,"names":["__read","DOMAIN_PATTERN","IP_ADDRESS_PATTERN","DOTS_PATTERN","DOT_PATTERN","S3_HOSTNAME_PATTERN","S3_US_EAST_1_ALTNAME_PATTERN","AWS_PARTITION_SUFFIX","isBucketNameOptions","options","bucketName","isDnsCompatibleBucketName","test","getRegionalSuffix","hostname","parts","match","replace","RegExp","getSuffix","getSuffixForArnEndpoint","validateArnEndpointOptions","pathStyleEndpoint","Error","accelerateEndpoint","tlsCompatible","validateService","service","validateS3Service","validateOutpostService","validatePartition","partition","clientPartition","validateRegion","region","useFipsEndpoint","allowFipsRegion","isEqualRegions","clientRegion","useArnRegion","clientSigningRegion","validateRegionalClient","includes","regionA","regionB","validateAccountId","accountId","exec","validateDNSHostLabel","label","length","validateCustomEndpoint","isCustomEndpoint","dualstackEndpoint","getArnResources","resource","delimiter","_a","split","resourceType","rest","slice","accesspointName","_b","outpostId","_1","validateNoDualstack","validateNoFIPS","validateMrapAlias","name","forEach","e"],"sources":["/Users/yzbaoo/Desktop/huohua/ilc-web-packages/node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketHostnameUtils.js"],"sourcesContent":["import { __read } from \"tslib\";\nvar DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/;\nvar IP_ADDRESS_PATTERN = /(\\d+\\.){3}\\d+/;\nvar DOTS_PATTERN = /\\.\\./;\nexport var DOT_PATTERN = /\\./;\nexport var S3_HOSTNAME_PATTERN = /^(.+\\.)?s3(-fips)?(\\.dualstack)?[.-]([a-z0-9-]+)\\./;\nvar S3_US_EAST_1_ALTNAME_PATTERN = /^s3(-external-1)?\\.amazonaws\\.com$/;\nvar AWS_PARTITION_SUFFIX = \"amazonaws.com\";\nexport var isBucketNameOptions = function (options) { return typeof options.bucketName === \"string\"; };\nexport var isDnsCompatibleBucketName = function (bucketName) {\n    return DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);\n};\nvar getRegionalSuffix = function (hostname) {\n    var parts = hostname.match(S3_HOSTNAME_PATTERN);\n    return [parts[4], hostname.replace(new RegExp(\"^\" + parts[0]), \"\")];\n};\nexport var getSuffix = function (hostname) {\n    return S3_US_EAST_1_ALTNAME_PATTERN.test(hostname) ? [\"us-east-1\", AWS_PARTITION_SUFFIX] : getRegionalSuffix(hostname);\n};\nexport var getSuffixForArnEndpoint = function (hostname) {\n    return S3_US_EAST_1_ALTNAME_PATTERN.test(hostname)\n        ? [hostname.replace(\".\" + AWS_PARTITION_SUFFIX, \"\"), AWS_PARTITION_SUFFIX]\n        : getRegionalSuffix(hostname);\n};\nexport var validateArnEndpointOptions = function (options) {\n    if (options.pathStyleEndpoint) {\n        throw new Error(\"Path-style S3 endpoint is not supported when bucket is an ARN\");\n    }\n    if (options.accelerateEndpoint) {\n        throw new Error(\"Accelerate endpoint is not supported when bucket is an ARN\");\n    }\n    if (!options.tlsCompatible) {\n        throw new Error(\"HTTPS is required when bucket is an ARN\");\n    }\n};\nexport var validateService = function (service) {\n    if (service !== \"s3\" && service !== \"s3-outposts\" && service !== \"s3-object-lambda\") {\n        throw new Error(\"Expect 's3' or 's3-outposts' or 's3-object-lambda' in ARN service component\");\n    }\n};\nexport var validateS3Service = function (service) {\n    if (service !== \"s3\") {\n        throw new Error(\"Expect 's3' in Accesspoint ARN service component\");\n    }\n};\nexport var validateOutpostService = function (service) {\n    if (service !== \"s3-outposts\") {\n        throw new Error(\"Expect 's3-posts' in Outpost ARN service component\");\n    }\n};\nexport var validatePartition = function (partition, options) {\n    if (partition !== options.clientPartition) {\n        throw new Error(\"Partition in ARN is incompatible, got \\\"\" + partition + \"\\\" but expected \\\"\" + options.clientPartition + \"\\\"\");\n    }\n};\nexport var validateRegion = function (region, options) {\n    if (region === \"\") {\n        throw new Error(\"ARN region is empty\");\n    }\n    if (options.useFipsEndpoint) {\n        if (!options.allowFipsRegion) {\n            throw new Error(\"FIPS region is not supported\");\n        }\n        else if (!isEqualRegions(region, options.clientRegion)) {\n            throw new Error(\"Client FIPS region \" + options.clientRegion + \" doesn't match region \" + region + \" in ARN\");\n        }\n    }\n    if (!options.useArnRegion &&\n        !isEqualRegions(region, options.clientRegion || \"\") &&\n        !isEqualRegions(region, options.clientSigningRegion || \"\")) {\n        throw new Error(\"Region in ARN is incompatible, got \" + region + \" but expected \" + options.clientRegion);\n    }\n};\nexport var validateRegionalClient = function (region) {\n    if ([\"s3-external-1\", \"aws-global\"].includes(region)) {\n        throw new Error(\"Client region \" + region + \" is not regional\");\n    }\n};\nvar isEqualRegions = function (regionA, regionB) { return regionA === regionB; };\nexport var validateAccountId = function (accountId) {\n    if (!/[0-9]{12}/.exec(accountId)) {\n        throw new Error(\"Access point ARN accountID does not match regex '[0-9]{12}'\");\n    }\n};\nexport var validateDNSHostLabel = function (label, options) {\n    if (options === void 0) { options = { tlsCompatible: true }; }\n    if (label.length >= 64 ||\n        !/^[a-z0-9][a-z0-9.-]*[a-z0-9]$/.test(label) ||\n        /(\\d+\\.){3}\\d+/.test(label) ||\n        /[.-]{2}/.test(label) ||\n        ((options === null || options === void 0 ? void 0 : options.tlsCompatible) && DOT_PATTERN.test(label))) {\n        throw new Error(\"Invalid DNS label \" + label);\n    }\n};\nexport var validateCustomEndpoint = function (options) {\n    if (options.isCustomEndpoint) {\n        if (options.dualstackEndpoint)\n            throw new Error(\"Dualstack endpoint is not supported with custom endpoint\");\n        if (options.accelerateEndpoint)\n            throw new Error(\"Accelerate endpoint is not supported with custom endpoint\");\n    }\n};\nexport var getArnResources = function (resource) {\n    var delimiter = resource.includes(\":\") ? \":\" : \"/\";\n    var _a = __read(resource.split(delimiter)), resourceType = _a[0], rest = _a.slice(1);\n    if (resourceType === \"accesspoint\") {\n        if (rest.length !== 1 || rest[0] === \"\") {\n            throw new Error(\"Access Point ARN should have one resource accesspoint\" + delimiter + \"{accesspointname}\");\n        }\n        return { accesspointName: rest[0] };\n    }\n    else if (resourceType === \"outpost\") {\n        if (!rest[0] || rest[1] !== \"accesspoint\" || !rest[2] || rest.length !== 3) {\n            throw new Error(\"Outpost ARN should have resource outpost\" + delimiter + \"{outpostId}\" + delimiter + \"accesspoint\" + delimiter + \"{accesspointName}\");\n        }\n        var _b = __read(rest, 3), outpostId = _b[0], _1 = _b[1], accesspointName = _b[2];\n        return { outpostId: outpostId, accesspointName: accesspointName };\n    }\n    else {\n        throw new Error(\"ARN resource should begin with 'accesspoint\" + delimiter + \"' or 'outpost\" + delimiter + \"'\");\n    }\n};\nexport var validateNoDualstack = function (dualstackEndpoint) {\n    if (dualstackEndpoint)\n        throw new Error(\"Dualstack endpoint is not supported with Outpost or Multi-region Access Point ARN.\");\n};\nexport var validateNoFIPS = function (useFipsEndpoint) {\n    if (useFipsEndpoint)\n        throw new Error(\"FIPS region is not supported with Outpost.\");\n};\nexport var validateMrapAlias = function (name) {\n    try {\n        name.split(\".\").forEach(function (label) {\n            validateDNSHostLabel(label);\n        });\n    }\n    catch (e) {\n        throw new Error(\"\\\"\" + name + \"\\\" is not a DNS compatible name.\");\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}