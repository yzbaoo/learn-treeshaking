{"ast":null,"code":"'use strict';\n\nfunction createCommonjsModule(fn, basedir, module) {\n  return module = {\n    path: basedir,\n    exports: {},\n    require: function (path, base) {\n      return commonjsRequire(path, base === undefined || base === null ? module.path : base);\n    }\n  }, fn(module, module.exports), module.exports;\n}\n\nfunction commonjsRequire() {\n  throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');\n}\n\nvar runtime_1 = createCommonjsModule(function (module) {\n  /**\n   * Copyright (c) 2014-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n  var runtime = function (exports) {\n    var Op = Object.prototype;\n    var hasOwn = Op.hasOwnProperty;\n    var undefined$1; // More compressible than void 0.\n\n    var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n    var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n    var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n    var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n    function wrap(innerFn, outerFn, self, tryLocsList) {\n      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n      var generator = Object.create(protoGenerator.prototype);\n      var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n      // .throw, and .return methods.\n\n      generator._invoke = makeInvokeMethod(innerFn, self, context);\n      return generator;\n    }\n\n    exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n    // record like context.tryEntries[i].completion. This interface could\n    // have been (and was previously) designed to take a closure to be\n    // invoked without arguments, but in all the cases we care about we\n    // already have an existing method we want to call, so there's no need\n    // to create a new function object. We can even get away with assuming\n    // the method takes exactly one argument, since that happens to be true\n    // in every case, so we don't have to touch the arguments object. The\n    // only additional allocation required is the completion record, which\n    // has a stable shape and so hopefully should be cheap to allocate.\n\n    function tryCatch(fn, obj, arg) {\n      try {\n        return {\n          type: \"normal\",\n          arg: fn.call(obj, arg)\n        };\n      } catch (err) {\n        return {\n          type: \"throw\",\n          arg: err\n        };\n      }\n    }\n\n    var GenStateSuspendedStart = \"suspendedStart\";\n    var GenStateSuspendedYield = \"suspendedYield\";\n    var GenStateExecuting = \"executing\";\n    var GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\n    // breaking out of the dispatch switch statement.\n\n    var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n    // .constructor.prototype properties for functions that return Generator\n    // objects. For full spec compliance, you may wish to configure your\n    // minifier not to mangle the names of these two functions.\n\n    function Generator() {}\n\n    function GeneratorFunction() {}\n\n    function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n    // don't natively support it.\n\n\n    var IteratorPrototype = {};\n\n    IteratorPrototype[iteratorSymbol] = function () {\n      return this;\n    };\n\n    var getProto = Object.getPrototypeOf;\n    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n      // This environment has a native %IteratorPrototype%; use it instead\n      // of the polyfill.\n      IteratorPrototype = NativeIteratorPrototype;\n    }\n\n    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n    GeneratorFunctionPrototype.constructor = GeneratorFunction;\n    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = \"GeneratorFunction\"; // Helper for defining the .next, .throw, and .return methods of the\n    // Iterator interface in terms of a single ._invoke method.\n\n    function defineIteratorMethods(prototype) {\n      [\"next\", \"throw\", \"return\"].forEach(function (method) {\n        prototype[method] = function (arg) {\n          return this._invoke(method, arg);\n        };\n      });\n    }\n\n    exports.isGeneratorFunction = function (genFun) {\n      var ctor = typeof genFun === \"function\" && genFun.constructor;\n      return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n      // do is to check its .name property.\n      (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n    };\n\n    exports.mark = function (genFun) {\n      if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n      } else {\n        genFun.__proto__ = GeneratorFunctionPrototype;\n\n        if (!(toStringTagSymbol in genFun)) {\n          genFun[toStringTagSymbol] = \"GeneratorFunction\";\n        }\n      }\n\n      genFun.prototype = Object.create(Gp);\n      return genFun;\n    }; // Within the body of any async function, `await x` is transformed to\n    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n    // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n    // meant to be awaited.\n\n\n    exports.awrap = function (arg) {\n      return {\n        __await: arg\n      };\n    };\n\n    function AsyncIterator(generator, PromiseImpl) {\n      function invoke(method, arg, resolve, reject) {\n        var record = tryCatch(generator[method], generator, arg);\n\n        if (record.type === \"throw\") {\n          reject(record.arg);\n        } else {\n          var result = record.arg;\n          var value = result.value;\n\n          if (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n            return PromiseImpl.resolve(value.__await).then(function (value) {\n              invoke(\"next\", value, resolve, reject);\n            }, function (err) {\n              invoke(\"throw\", err, resolve, reject);\n            });\n          }\n\n          return PromiseImpl.resolve(value).then(function (unwrapped) {\n            // When a yielded Promise is resolved, its final value becomes\n            // the .value of the Promise<{value,done}> result for the\n            // current iteration.\n            result.value = unwrapped;\n            resolve(result);\n          }, function (error) {\n            // If a rejected Promise was yielded, throw the rejection back\n            // into the async generator function so it can be handled there.\n            return invoke(\"throw\", error, resolve, reject);\n          });\n        }\n      }\n\n      var previousPromise;\n\n      function enqueue(method, arg) {\n        function callInvokeWithMethodAndArg() {\n          return new PromiseImpl(function (resolve, reject) {\n            invoke(method, arg, resolve, reject);\n          });\n        }\n\n        return previousPromise = // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n        // invocations of the iterator.\n        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      } // Define the unified helper method that is used to implement .next,\n      // .throw, and .return (see defineIteratorMethods).\n\n\n      this._invoke = enqueue;\n    }\n\n    defineIteratorMethods(AsyncIterator.prototype);\n\n    AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n      return this;\n    };\n\n    exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n    // AsyncIterator objects; they just return a Promise for the value of\n    // the final result produced by the iterator.\n\n    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n      if (PromiseImpl === void 0) PromiseImpl = Promise;\n      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function (result) {\n        return result.done ? result.value : iter.next();\n      });\n    };\n\n    function makeInvokeMethod(innerFn, self, context) {\n      var state = GenStateSuspendedStart;\n      return function invoke(method, arg) {\n        if (state === GenStateExecuting) {\n          throw new Error(\"Generator is already running\");\n        }\n\n        if (state === GenStateCompleted) {\n          if (method === \"throw\") {\n            throw arg;\n          } // Be forgiving, per 25.3.3.3.3 of the spec:\n          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n          return doneResult();\n        }\n\n        context.method = method;\n        context.arg = arg;\n\n        while (true) {\n          var delegate = context.delegate;\n\n          if (delegate) {\n            var delegateResult = maybeInvokeDelegate(delegate, context);\n\n            if (delegateResult) {\n              if (delegateResult === ContinueSentinel) continue;\n              return delegateResult;\n            }\n          }\n\n          if (context.method === \"next\") {\n            // Setting context._sent for legacy support of Babel's\n            // function.sent implementation.\n            context.sent = context._sent = context.arg;\n          } else if (context.method === \"throw\") {\n            if (state === GenStateSuspendedStart) {\n              state = GenStateCompleted;\n              throw context.arg;\n            }\n\n            context.dispatchException(context.arg);\n          } else if (context.method === \"return\") {\n            context.abrupt(\"return\", context.arg);\n          }\n\n          state = GenStateExecuting;\n          var record = tryCatch(innerFn, self, context);\n\n          if (record.type === \"normal\") {\n            // If an exception is thrown from innerFn, we leave state ===\n            // GenStateExecuting and loop back for another invocation.\n            state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n            if (record.arg === ContinueSentinel) {\n              continue;\n            }\n\n            return {\n              value: record.arg,\n              done: context.done\n            };\n          } else if (record.type === \"throw\") {\n            state = GenStateCompleted; // Dispatch the exception by looping back around to the\n            // context.dispatchException(context.arg) call above.\n\n            context.method = \"throw\";\n            context.arg = record.arg;\n          }\n        }\n      };\n    } // Call delegate.iterator[context.method](context.arg) and handle the\n    // result, either by returning a { value, done } result from the\n    // delegate iterator, or by modifying context.method and context.arg,\n    // setting context.delegate to null, and returning the ContinueSentinel.\n\n\n    function maybeInvokeDelegate(delegate, context) {\n      var method = delegate.iterator[context.method];\n\n      if (method === undefined$1) {\n        // A .throw or .return when the delegate iterator has no .throw\n        // method always terminates the yield* loop.\n        context.delegate = null;\n\n        if (context.method === \"throw\") {\n          // Note: [\"return\"] must be used for ES3 parsing compatibility.\n          if (delegate.iterator[\"return\"]) {\n            // If the delegate iterator has a return method, give it a\n            // chance to clean up.\n            context.method = \"return\";\n            context.arg = undefined$1;\n            maybeInvokeDelegate(delegate, context);\n\n            if (context.method === \"throw\") {\n              // If maybeInvokeDelegate(context) changed context.method from\n              // \"return\" to \"throw\", let that override the TypeError below.\n              return ContinueSentinel;\n            }\n          }\n\n          context.method = \"throw\";\n          context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n        }\n\n        return ContinueSentinel;\n      }\n\n      var record = tryCatch(method, delegate.iterator, context.arg);\n\n      if (record.type === \"throw\") {\n        context.method = \"throw\";\n        context.arg = record.arg;\n        context.delegate = null;\n        return ContinueSentinel;\n      }\n\n      var info = record.arg;\n\n      if (!info) {\n        context.method = \"throw\";\n        context.arg = new TypeError(\"iterator result is not an object\");\n        context.delegate = null;\n        return ContinueSentinel;\n      }\n\n      if (info.done) {\n        // Assign the result of the finished delegate to the temporary\n        // variable specified by delegate.resultName (see delegateYield).\n        context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n        context.next = delegate.nextLoc; // If context.method was \"throw\" but the delegate handled the\n        // exception, let the outer generator proceed normally. If\n        // context.method was \"next\", forget context.arg since it has been\n        // \"consumed\" by the delegate iterator. If context.method was\n        // \"return\", allow the original .return call to continue in the\n        // outer generator.\n\n        if (context.method !== \"return\") {\n          context.method = \"next\";\n          context.arg = undefined$1;\n        }\n      } else {\n        // Re-yield the result returned by the delegate method.\n        return info;\n      } // The delegate iterator is finished, so forget it and continue with\n      // the outer generator.\n\n\n      context.delegate = null;\n      return ContinueSentinel;\n    } // Define Generator.prototype.{next,throw,return} in terms of the\n    // unified ._invoke helper method.\n\n\n    defineIteratorMethods(Gp);\n    Gp[toStringTagSymbol] = \"Generator\"; // A Generator should always return itself as the iterator object when the\n    // @@iterator function is called on it. Some browsers' implementations of the\n    // iterator prototype chain incorrectly implement this, causing the Generator\n    // object to not be returned from this call. This ensures that doesn't happen.\n    // See https://github.com/facebook/regenerator/issues/274 for more details.\n\n    Gp[iteratorSymbol] = function () {\n      return this;\n    };\n\n    Gp.toString = function () {\n      return \"[object Generator]\";\n    };\n\n    function pushTryEntry(locs) {\n      var entry = {\n        tryLoc: locs[0]\n      };\n\n      if (1 in locs) {\n        entry.catchLoc = locs[1];\n      }\n\n      if (2 in locs) {\n        entry.finallyLoc = locs[2];\n        entry.afterLoc = locs[3];\n      }\n\n      this.tryEntries.push(entry);\n    }\n\n    function resetTryEntry(entry) {\n      var record = entry.completion || {};\n      record.type = \"normal\";\n      delete record.arg;\n      entry.completion = record;\n    }\n\n    function Context(tryLocsList) {\n      // The root entry object (effectively a try statement without a catch\n      // or a finally block) gives us a place to store values thrown from\n      // locations where there is no enclosing try statement.\n      this.tryEntries = [{\n        tryLoc: \"root\"\n      }];\n      tryLocsList.forEach(pushTryEntry, this);\n      this.reset(true);\n    }\n\n    exports.keys = function (object) {\n      var keys = [];\n\n      for (var key in object) {\n        keys.push(key);\n      }\n\n      keys.reverse(); // Rather than returning an object with a next method, we keep\n      // things simple and return the next function itself.\n\n      return function next() {\n        while (keys.length) {\n          var key = keys.pop();\n\n          if (key in object) {\n            next.value = key;\n            next.done = false;\n            return next;\n          }\n        } // To avoid creating an additional object, we just hang the .value\n        // and .done properties off the next function object itself. This\n        // also ensures that the minifier will not anonymize the function.\n\n\n        next.done = true;\n        return next;\n      };\n    };\n\n    function values(iterable) {\n      if (iterable) {\n        var iteratorMethod = iterable[iteratorSymbol];\n\n        if (iteratorMethod) {\n          return iteratorMethod.call(iterable);\n        }\n\n        if (typeof iterable.next === \"function\") {\n          return iterable;\n        }\n\n        if (!isNaN(iterable.length)) {\n          var i = -1,\n              next = function next() {\n            while (++i < iterable.length) {\n              if (hasOwn.call(iterable, i)) {\n                next.value = iterable[i];\n                next.done = false;\n                return next;\n              }\n            }\n\n            next.value = undefined$1;\n            next.done = true;\n            return next;\n          };\n\n          return next.next = next;\n        }\n      } // Return an iterator with no values.\n\n\n      return {\n        next: doneResult\n      };\n    }\n\n    exports.values = values;\n\n    function doneResult() {\n      return {\n        value: undefined$1,\n        done: true\n      };\n    }\n\n    Context.prototype = {\n      constructor: Context,\n      reset: function (skipTempReset) {\n        this.prev = 0;\n        this.next = 0; // Resetting context._sent for legacy support of Babel's\n        // function.sent implementation.\n\n        this.sent = this._sent = undefined$1;\n        this.done = false;\n        this.delegate = null;\n        this.method = \"next\";\n        this.arg = undefined$1;\n        this.tryEntries.forEach(resetTryEntry);\n\n        if (!skipTempReset) {\n          for (var name in this) {\n            // Not sure about the optimal order of these conditions:\n            if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n              this[name] = undefined$1;\n            }\n          }\n        }\n      },\n      stop: function () {\n        this.done = true;\n        var rootEntry = this.tryEntries[0];\n        var rootRecord = rootEntry.completion;\n\n        if (rootRecord.type === \"throw\") {\n          throw rootRecord.arg;\n        }\n\n        return this.rval;\n      },\n      dispatchException: function (exception) {\n        if (this.done) {\n          throw exception;\n        }\n\n        var context = this;\n\n        function handle(loc, caught) {\n          record.type = \"throw\";\n          record.arg = exception;\n          context.next = loc;\n\n          if (caught) {\n            // If the dispatched exception was caught by a catch block,\n            // then let that catch block handle the exception normally.\n            context.method = \"next\";\n            context.arg = undefined$1;\n          }\n\n          return !!caught;\n        }\n\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n          var record = entry.completion;\n\n          if (entry.tryLoc === \"root\") {\n            // Exception thrown outside of any try block that could handle\n            // it, so set the completion value of the entire function to\n            // throw the exception.\n            return handle(\"end\");\n          }\n\n          if (entry.tryLoc <= this.prev) {\n            var hasCatch = hasOwn.call(entry, \"catchLoc\");\n            var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n            if (hasCatch && hasFinally) {\n              if (this.prev < entry.catchLoc) {\n                return handle(entry.catchLoc, true);\n              } else if (this.prev < entry.finallyLoc) {\n                return handle(entry.finallyLoc);\n              }\n            } else if (hasCatch) {\n              if (this.prev < entry.catchLoc) {\n                return handle(entry.catchLoc, true);\n              }\n            } else if (hasFinally) {\n              if (this.prev < entry.finallyLoc) {\n                return handle(entry.finallyLoc);\n              }\n            } else {\n              throw new Error(\"try statement without catch or finally\");\n            }\n          }\n        }\n      },\n      abrupt: function (type, arg) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n\n          if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n            var finallyEntry = entry;\n            break;\n          }\n        }\n\n        if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n          // Ignore the finally entry if control is not jumping to a\n          // location outside the try/catch block.\n          finallyEntry = null;\n        }\n\n        var record = finallyEntry ? finallyEntry.completion : {};\n        record.type = type;\n        record.arg = arg;\n\n        if (finallyEntry) {\n          this.method = \"next\";\n          this.next = finallyEntry.finallyLoc;\n          return ContinueSentinel;\n        }\n\n        return this.complete(record);\n      },\n      complete: function (record, afterLoc) {\n        if (record.type === \"throw\") {\n          throw record.arg;\n        }\n\n        if (record.type === \"break\" || record.type === \"continue\") {\n          this.next = record.arg;\n        } else if (record.type === \"return\") {\n          this.rval = this.arg = record.arg;\n          this.method = \"return\";\n          this.next = \"end\";\n        } else if (record.type === \"normal\" && afterLoc) {\n          this.next = afterLoc;\n        }\n\n        return ContinueSentinel;\n      },\n      finish: function (finallyLoc) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n\n          if (entry.finallyLoc === finallyLoc) {\n            this.complete(entry.completion, entry.afterLoc);\n            resetTryEntry(entry);\n            return ContinueSentinel;\n          }\n        }\n      },\n      \"catch\": function (tryLoc) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n\n          if (entry.tryLoc === tryLoc) {\n            var record = entry.completion;\n\n            if (record.type === \"throw\") {\n              var thrown = record.arg;\n              resetTryEntry(entry);\n            }\n\n            return thrown;\n          }\n        } // The context.catch method must only be called with a location\n        // argument that corresponds to a known catch block.\n\n\n        throw new Error(\"illegal catch attempt\");\n      },\n      delegateYield: function (iterable, resultName, nextLoc) {\n        this.delegate = {\n          iterator: values(iterable),\n          resultName: resultName,\n          nextLoc: nextLoc\n        };\n\n        if (this.method === \"next\") {\n          // Deliberately forget the last sent value so that we don't\n          // accidentally pass it on to the delegate.\n          this.arg = undefined$1;\n        }\n\n        return ContinueSentinel;\n      }\n    }; // Regardless of whether this script is executing as a CommonJS module\n    // or not, return the runtime object so that we can declare the variable\n    // regeneratorRuntime in the outer scope, which allows this module to be\n    // injected easily by `bin/regenerator --include-runtime script.js`.\n\n    return exports;\n  }( // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  module.exports);\n\n  try {\n    regeneratorRuntime = runtime;\n  } catch (accidentalStrictMode) {\n    // This module should not be running in strict mode, so the above\n    // assignment should always work unless something is misconfigured. Just\n    // in case runtime.js accidentally runs in strict mode, we can escape\n    // strict mode using a global Function call. This could conceivably fail\n    // if a Content Security Policy forbids using Function, but in that case\n    // the proper solution is to fix the accidental strict mode problem. If\n    // you've misconfigured your bundler to force strict mode and applied a\n    // CSP to forbid Function, and you're not willing to fix either of those\n    // problems, please detail your unique predicament in a GitHub issue.\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n});\nvar regenerator = runtime_1;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nvar asyncToGenerator = _asyncToGenerator;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar defineProperty = _defineProperty;\n/**\r\n * 生成 uuid\r\n * @returns uuid\r\n */\n\nfunction uuid() {\n  /* jshint ignore:start */\n  var d = new Date().getTime();\n  var uuidValue = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : r & 0x7 | 0x8).toString(16);\n  });\n  return uuidValue;\n  /* jshint ignore:end */\n}\n/**\r\n * 日期格式化\r\n * @param d - date\r\n * @returns\r\n */\n\n\nfunction getDateFormatString(d) {\n  return d.getFullYear() + '-' + ('0' + (d.getMonth() + 1)).slice(-2) + '-' + ('0' + d.getDate()).slice(-2);\n}\n/**\r\n * 统一路径格式\r\n * @param path \r\n * @returns \r\n */\n\n\nfunction formatApiPath(path) {\n  if (path.slice(-1) === '/') path = path.slice(0, -1);\n  if (path.slice(0, 1) === '/') path = path.slice(1);\n  return path;\n}\n\nexports.asyncToGenerator = asyncToGenerator;\nexports.defineProperty = defineProperty;\nexports.formatApiPath = formatApiPath;\nexports.getDateFormatString = getDateFormatString;\nexports.regenerator = regenerator;\nexports.uuid = uuid;","map":{"version":3,"mappings":"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","names":["runtime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","undefined","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","makeInvokeMethod","tryCatch","fn","obj","arg","type","call","err","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","constructor","displayName","defineIteratorMethods","forEach","method","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","__await","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","value","then","unwrapped","error","previousPromise","enqueue","callInvokeWithMethodAndArg","async","Promise","iter","next","done","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","info","resultName","nextLoc","toString","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","keys","object","key","reverse","length","pop","iterable","iteratorMethod","isNaN","i","skipTempReset","prev","charAt","slice","stop","rootEntry","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","Function","require$$0","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","arguments","apply","_defineProperty","defineProperty","enumerable","configurable","writable","uuid","d","Date","getTime","uuidValue","replace","c","r","Math","random","floor","getDateFormatString","getFullYear","getMonth","getDate","formatApiPath","path"],"sources":["/Users/yzbaoo/Desktop/huohua/ilc-web-packages/node_modules/regenerator-runtime/runtime.js","/Users/yzbaoo/Desktop/huohua/ilc-web-packages/node_modules/@babel/runtime/regenerator/index.js","/Users/yzbaoo/Desktop/huohua/ilc-web-packages/node_modules/@babel/runtime/helpers/asyncToGenerator.js","/Users/yzbaoo/Desktop/huohua/ilc-web-packages/node_modules/@babel/runtime/helpers/defineProperty.js","/Users/yzbaoo/Desktop/huohua/ilc-web-packages/packages/oss/src/utils.ts"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","/**\r\n * 生成 uuid\r\n * @returns uuid\r\n */\r\nexport function uuid(): string {\r\n  /* jshint ignore:start */\r\n  let d = new Date().getTime();\r\n  const uuidValue = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n    const r = (d + Math.random() * 16) % 16 | 0;\r\n    d = Math.floor(d / 16);\r\n    return (c === 'x' ? r : (r & 0x7) | 0x8).toString(16);\r\n  });\r\n  return uuidValue;\r\n  /* jshint ignore:end */\r\n};\r\n\r\n/**\r\n * 日期格式化\r\n * @param d - date\r\n * @returns\r\n */\r\nexport function getDateFormatString(d: Date): string {\r\n  return d.getFullYear() + '-' + ('0' + (d.getMonth() + 1)).slice(-2) + '-' + ('0' + d.getDate()).slice(-2);\r\n}\r\n/**\r\n * 统一路径格式\r\n * @param path \r\n * @returns \r\n */\r\nexport function formatApiPath(path: string): string {\r\n  if(path.slice(-1) === '/') path = path.slice(0, -1);\r\n  if(path.slice(0, 1) === '/') path = path.slice(1);\r\n  return path;\r\n}"]},"metadata":{},"sourceType":"script"}