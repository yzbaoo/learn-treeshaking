{"ast":null,"code":"import { a as asyncToGenerator, r as regenerator, f as formatApiPath, d as defineProperty, u as uuid, g as getDateFormatString } from './utils-02659682.js';\nimport { PutObjectCommand, S3Client } from '@aws-sdk/client-s3';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar PRESET_CONTENT_TYPES = ['image/gif', 'image/jpeg', 'image/png']; // 图片文件类型\n\nvar MAX_TRY_TIMES = 2; // 失败后尝试请求次数\n\nfunction create(config) {\n  var credentials;\n  var auth = config.auth;\n  var shareS3Client = null;\n  var shareS3ClientPromise = null;\n  /**\r\n   * 创建 s3Client，支持同时调用多次，只会产生同一个 shareS3Client\r\n   */\n\n  function createS3Client() {\n    if (!shareS3ClientPromise) {\n      shareS3ClientPromise = new Promise(function (resolve, reject) {\n        auth().then(function (data) {\n          credentials = data;\n          var accessKeyId = data.id,\n              secretAccessKey = data.key,\n              sessionToken = data.token,\n              region = data.region;\n          var s3Client = new S3Client({\n            region: region,\n            credentials: {\n              accessKeyId: accessKeyId,\n              secretAccessKey: secretAccessKey,\n              sessionToken: sessionToken\n            }\n          });\n          resolve(s3Client);\n        })[\"catch\"](function (err) {\n          console.log('err', err);\n          reject(err);\n        });\n      });\n    }\n\n    return shareS3ClientPromise;\n  }\n  /**\r\n   * 重置 shareS3Client 引用\r\n   */\n\n\n  function resetS3Client() {\n    shareS3Client = null;\n    shareS3ClientPromise = null;\n  }\n  /**\r\n   * AWS上传\r\n   * @param params - 上传参数\r\n   * @param tryTimes - 上传尝试次数\r\n   * @returns 成功返回上传对象，失败返回 null\r\n   */\n\n\n  function upload(_x, _x2) {\n    return _upload.apply(this, arguments);\n  }\n\n  function _upload() {\n    _upload = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(params, tryTimes) {\n      var paramsWithDefault, _credentials, bucketName, bucketContentPath, cdnUrl, fileKey, extName, now, uploadParams, fileType, result;\n\n      return regenerator.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              paramsWithDefault = _objectSpread({\n                pathPrefix: '',\n                datePrefix: true,\n                rename: true\n              }, params);\n\n              if (shareS3Client) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.next = 4;\n              return createS3Client();\n\n            case 4:\n              shareS3Client = _context.sent;\n\n            case 5:\n              _credentials = credentials, bucketName = _credentials.bucketName, bucketContentPath = _credentials.bucketContentPath, cdnUrl = _credentials.cdnUrl; // 处理上传文件名\n\n              fileKey = encodeURIComponent(paramsWithDefault.file.name);\n\n              if (paramsWithDefault.rename) {\n                extName = fileKey.lastIndexOf('.') !== -1 ? fileKey.split('.').pop() : '';\n                fileKey = uuid() + (extName ? \".\".concat(extName) : '');\n              }\n\n              if (paramsWithDefault.datePrefix) {\n                now = new Date();\n                fileKey = getDateFormatString(now) + '/' + fileKey;\n              }\n\n              if (paramsWithDefault.pathPrefix) {\n                fileKey = formatApiPath(paramsWithDefault.pathPrefix) + '/' + fileKey;\n              }\n\n              fileKey = formatApiPath(bucketContentPath) + '/' + fileKey; // 组织上传参数\n\n              uploadParams = {\n                Bucket: bucketName,\n                Key: fileKey,\n                Body: params.file\n              }; // 图片文件，设置上传 contentType，防止直接打开上传后的文件触发自动下载\n\n              fileType = paramsWithDefault.file.type;\n\n              if (PRESET_CONTENT_TYPES.includes(fileType)) {\n                Object.assign(uploadParams, {\n                  ContentType: fileType\n                });\n              }\n\n              result = null;\n              _context.prev = 15;\n              _context.next = 18;\n              return shareS3Client.send(new PutObjectCommand(uploadParams));\n\n            case 18:\n              result = _context.sent;\n              _context.next = 29;\n              break;\n\n            case 21:\n              _context.prev = 21;\n              _context.t0 = _context[\"catch\"](15);\n              console.error('There was an error uploading your file: ', _context.t0);\n\n              if (!(typeof tryTimes === 'undefined' || tryTimes < MAX_TRY_TIMES)) {\n                _context.next = 29;\n                break;\n              }\n\n              resetS3Client();\n              _context.next = 28;\n              return upload(params, typeof tryTimes === 'number' ? tryTimes + 1 : 2);\n\n            case 28:\n              result = _context.sent;\n\n            case 29:\n              if (!result) {\n                _context.next = 31;\n                break;\n              }\n\n              return _context.abrupt(\"return\", {\n                url: formatApiPath(cdnUrl) + '/' + fileKey\n              });\n\n            case 31:\n              return _context.abrupt(\"return\", null);\n\n            case 32:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[15, 21]]);\n    }));\n    return _upload.apply(this, arguments);\n  }\n\n  return {\n    upload: upload\n  };\n}\n\nexport { create };","map":{"version":3,"mappings":"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","names":["PRESET_CONTENT_TYPES","MAX_TRY_TIMES","create","config","credentials","auth","shareS3Client","shareS3ClientPromise","createS3Client","Promise","resolve","reject","then","data","accessKeyId","id","secretAccessKey","key","sessionToken","token","region","s3Client","S3Client","err","console","log","resetS3Client","upload","_upload","params","tryTimes","paramsWithDefault","pathPrefix","datePrefix","rename","_context","_credentials","bucketName","bucketContentPath","cdnUrl","fileKey","encodeURIComponent","file","name","extName","lastIndexOf","split","pop","uuid","now","Date","getDateFormatString","formatApiPath","uploadParams","Bucket","Key","Body","fileType","type","includes","Object","assign","ContentType","result","send","PutObjectCommand","error","url","_regeneratorRuntime"],"sources":["/Users/yzbaoo/Desktop/huohua/ilc-web-packages/packages/oss/src/aws.ts"],"sourcesContent":["/**\r\n * 实现基于AWS的OSS存取\r\n * 参考 https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/s3-example-photo-album.html 实现\r\n */\r\nimport { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';\r\nimport { uuid, getDateFormatString, formatApiPath } from './utils';\r\nimport type { Config, Creator, Credentials, UploadParams, UploadResult } from './index';\r\n\r\nconst PRESET_CONTENT_TYPES = ['image/gif', 'image/jpeg', 'image/png']; // 图片文件类型\r\nconst MAX_TRY_TIMES = 2; // 失败后尝试请求次数\r\n\r\nexport function create(config: Required<Config>): Creator {\r\n  \r\n  let credentials: Credentials;\r\n  const auth = config.auth;\r\n\r\n  let shareS3Client: S3Client | null = null;\r\n  let shareS3ClientPromise: Promise<S3Client> | null = null;\r\n  /**\r\n   * 创建 s3Client，支持同时调用多次，只会产生同一个 shareS3Client\r\n   */\r\n  function createS3Client(): Promise<S3Client> {\r\n    if (!shareS3ClientPromise) {\r\n      shareS3ClientPromise = new Promise((resolve, reject) => {\r\n        auth().then((data) => {\r\n          credentials = data;\r\n          const { id: accessKeyId, key: secretAccessKey, token: sessionToken, region } = data;\r\n          const s3Client = new S3Client({\r\n            region,\r\n            credentials: {\r\n              accessKeyId,\r\n              secretAccessKey,\r\n              sessionToken,\r\n            },\r\n          });\r\n          resolve(s3Client);\r\n        })\r\n        .catch((err) => {\r\n          console.log('err', err);\r\n          reject(err);\r\n        });\r\n      });\r\n    }\r\n    return shareS3ClientPromise;\r\n  }\r\n  /**\r\n   * 重置 shareS3Client 引用\r\n   */\r\n  function resetS3Client(): void {\r\n    shareS3Client = null;\r\n    shareS3ClientPromise = null;\r\n  }\r\n\r\n  /**\r\n   * AWS上传\r\n   * @param params - 上传参数\r\n   * @param tryTimes - 上传尝试次数\r\n   * @returns 成功返回上传对象，失败返回 null\r\n   */\r\n  async function upload(params: UploadParams, tryTimes?: number): Promise<UploadResult> {\r\n    const paramsWithDefault = {\r\n      pathPrefix: '',\r\n      datePrefix: true,\r\n      rename: true,\r\n      ...params,\r\n    };\r\n    if (!shareS3Client) {\r\n      shareS3Client = await createS3Client();\r\n    }\r\n    const {bucketName, bucketContentPath, cdnUrl} = credentials;\r\n    // 处理上传文件名\r\n    let fileKey = encodeURIComponent(paramsWithDefault.file.name);\r\n    if (paramsWithDefault.rename) {\r\n      const extName = fileKey.lastIndexOf('.') !== -1 ? fileKey.split('.').pop() : '';\r\n      fileKey = uuid() + (extName ? `.${extName}` : '');\r\n    }\r\n    if (paramsWithDefault.datePrefix) {\r\n      const now = new Date();\r\n      fileKey = getDateFormatString(now) + '/' + fileKey;\r\n    }\r\n    if (paramsWithDefault.pathPrefix) {\r\n      fileKey = formatApiPath(paramsWithDefault.pathPrefix) + '/' + fileKey;\r\n    }\r\n    fileKey = formatApiPath(bucketContentPath) + '/' + fileKey;\r\n\r\n    // 组织上传参数\r\n    const uploadParams = {\r\n      Bucket: bucketName,\r\n      Key: fileKey,\r\n      Body: params.file,\r\n    };\r\n\r\n    // 图片文件，设置上传 contentType，防止直接打开上传后的文件触发自动下载\r\n    const fileType = paramsWithDefault.file.type;\r\n    if (PRESET_CONTENT_TYPES.includes(fileType)) {\r\n      Object.assign(uploadParams, {\r\n        ContentType: fileType,\r\n      });\r\n    }\r\n\r\n    let result = null;\r\n    try {\r\n      result = await shareS3Client.send(new PutObjectCommand(uploadParams));\r\n    } catch (err) {\r\n      console.error('There was an error uploading your file: ', err);\r\n      if (typeof tryTimes === 'undefined' || tryTimes < MAX_TRY_TIMES) {\r\n        resetS3Client();\r\n        result = await upload(params, typeof tryTimes === 'number' ? tryTimes + 1 : 2);\r\n      }\r\n    }\r\n    if (result) {\r\n      return {\r\n        url: formatApiPath(cdnUrl) + '/' + fileKey\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n  return {\r\n    upload\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}