{"ast":null,"code":"import { __assign, __read } from \"tslib\";\nimport { DOT_PATTERN, getArnResources, getSuffix, getSuffixForArnEndpoint, isBucketNameOptions, isDnsCompatibleBucketName, validateAccountId, validateArnEndpointOptions, validateCustomEndpoint, validateDNSHostLabel, validateMrapAlias, validateNoDualstack, validateNoFIPS, validateOutpostService, validatePartition, validateRegion, validateRegionalClient, validateS3Service, validateService } from \"./bucketHostnameUtils\";\nexport var bucketHostname = function (options) {\n  validateCustomEndpoint(options);\n  return isBucketNameOptions(options) ? getEndpointFromBucketName(options) : getEndpointFromArn(options);\n};\n\nvar getEndpointFromBucketName = function (_a) {\n  var _b = _a.accelerateEndpoint,\n      accelerateEndpoint = _b === void 0 ? false : _b,\n      region = _a.clientRegion,\n      baseHostname = _a.baseHostname,\n      bucketName = _a.bucketName,\n      _c = _a.dualstackEndpoint,\n      dualstackEndpoint = _c === void 0 ? false : _c,\n      _d = _a.fipsEndpoint,\n      fipsEndpoint = _d === void 0 ? false : _d,\n      _e = _a.pathStyleEndpoint,\n      pathStyleEndpoint = _e === void 0 ? false : _e,\n      _f = _a.tlsCompatible,\n      tlsCompatible = _f === void 0 ? true : _f,\n      _g = _a.isCustomEndpoint,\n      isCustomEndpoint = _g === void 0 ? false : _g;\n\n  var _h = __read(isCustomEndpoint ? [region, baseHostname] : getSuffix(baseHostname), 2),\n      clientRegion = _h[0],\n      hostnameSuffix = _h[1];\n\n  if (pathStyleEndpoint || !isDnsCompatibleBucketName(bucketName) || tlsCompatible && DOT_PATTERN.test(bucketName)) {\n    return {\n      bucketEndpoint: false,\n      hostname: dualstackEndpoint ? \"s3.dualstack.\" + clientRegion + \".\" + hostnameSuffix : baseHostname\n    };\n  }\n\n  if (accelerateEndpoint) {\n    baseHostname = \"s3-accelerate\" + (dualstackEndpoint ? \".dualstack\" : \"\") + \".\" + hostnameSuffix;\n  } else if (dualstackEndpoint) {\n    baseHostname = \"s3.dualstack.\" + clientRegion + \".\" + hostnameSuffix;\n  }\n\n  return {\n    bucketEndpoint: true,\n    hostname: bucketName + \".\" + baseHostname\n  };\n};\n\nvar getEndpointFromArn = function (options) {\n  var isCustomEndpoint = options.isCustomEndpoint,\n      baseHostname = options.baseHostname,\n      clientRegion = options.clientRegion;\n  var hostnameSuffix = isCustomEndpoint ? baseHostname : getSuffixForArnEndpoint(baseHostname)[1];\n  var pathStyleEndpoint = options.pathStyleEndpoint,\n      _a = options.accelerateEndpoint,\n      accelerateEndpoint = _a === void 0 ? false : _a,\n      _b = options.fipsEndpoint,\n      fipsEndpoint = _b === void 0 ? false : _b,\n      _c = options.tlsCompatible,\n      tlsCompatible = _c === void 0 ? true : _c,\n      bucketName = options.bucketName,\n      _d = options.clientPartition,\n      clientPartition = _d === void 0 ? \"aws\" : _d;\n  validateArnEndpointOptions({\n    pathStyleEndpoint: pathStyleEndpoint,\n    accelerateEndpoint: accelerateEndpoint,\n    tlsCompatible: tlsCompatible\n  });\n  var service = bucketName.service,\n      partition = bucketName.partition,\n      accountId = bucketName.accountId,\n      region = bucketName.region,\n      resource = bucketName.resource;\n  validateService(service);\n  validatePartition(partition, {\n    clientPartition: clientPartition\n  });\n  validateAccountId(accountId);\n\n  var _e = getArnResources(resource),\n      accesspointName = _e.accesspointName,\n      outpostId = _e.outpostId;\n\n  if (service === \"s3-object-lambda\") {\n    return getEndpointFromObjectLambdaArn(__assign(__assign({}, options), {\n      tlsCompatible: tlsCompatible,\n      bucketName: bucketName,\n      accesspointName: accesspointName,\n      hostnameSuffix: hostnameSuffix\n    }));\n  }\n\n  if (region === \"\") {\n    return getEndpointFromMRAPArn(__assign(__assign({}, options), {\n      clientRegion: clientRegion,\n      mrapAlias: accesspointName,\n      hostnameSuffix: hostnameSuffix\n    }));\n  }\n\n  if (outpostId) {\n    return getEndpointFromOutpostArn(__assign(__assign({}, options), {\n      clientRegion: clientRegion,\n      outpostId: outpostId,\n      accesspointName: accesspointName,\n      hostnameSuffix: hostnameSuffix\n    }));\n  }\n\n  return getEndpointFromAccessPointArn(__assign(__assign({}, options), {\n    clientRegion: clientRegion,\n    accesspointName: accesspointName,\n    hostnameSuffix: hostnameSuffix\n  }));\n};\n\nvar getEndpointFromObjectLambdaArn = function (_a) {\n  var _b = _a.dualstackEndpoint,\n      dualstackEndpoint = _b === void 0 ? false : _b,\n      _c = _a.fipsEndpoint,\n      fipsEndpoint = _c === void 0 ? false : _c,\n      _d = _a.tlsCompatible,\n      tlsCompatible = _d === void 0 ? true : _d,\n      useArnRegion = _a.useArnRegion,\n      clientRegion = _a.clientRegion,\n      _e = _a.clientSigningRegion,\n      clientSigningRegion = _e === void 0 ? clientRegion : _e,\n      accesspointName = _a.accesspointName,\n      bucketName = _a.bucketName,\n      hostnameSuffix = _a.hostnameSuffix;\n  var accountId = bucketName.accountId,\n      region = bucketName.region,\n      service = bucketName.service;\n  validateRegionalClient(clientRegion);\n  validateRegion(region, {\n    useArnRegion: useArnRegion,\n    clientRegion: clientRegion,\n    clientSigningRegion: clientSigningRegion,\n    allowFipsRegion: true,\n    useFipsEndpoint: fipsEndpoint\n  });\n  validateNoDualstack(dualstackEndpoint);\n  var DNSHostLabel = accesspointName + \"-\" + accountId;\n  validateDNSHostLabel(DNSHostLabel, {\n    tlsCompatible: tlsCompatible\n  });\n  var endpointRegion = useArnRegion ? region : clientRegion;\n  var signingRegion = useArnRegion ? region : clientSigningRegion;\n  return {\n    bucketEndpoint: true,\n    hostname: DNSHostLabel + \".\" + service + (fipsEndpoint ? \"-fips\" : \"\") + \".\" + endpointRegion + \".\" + hostnameSuffix,\n    signingRegion: signingRegion,\n    signingService: service\n  };\n};\n\nvar getEndpointFromMRAPArn = function (_a) {\n  var disableMultiregionAccessPoints = _a.disableMultiregionAccessPoints,\n      _b = _a.dualstackEndpoint,\n      dualstackEndpoint = _b === void 0 ? false : _b,\n      isCustomEndpoint = _a.isCustomEndpoint,\n      mrapAlias = _a.mrapAlias,\n      hostnameSuffix = _a.hostnameSuffix;\n\n  if (disableMultiregionAccessPoints === true) {\n    throw new Error(\"SDK is attempting to use a MRAP ARN. Please enable to feature.\");\n  }\n\n  validateMrapAlias(mrapAlias);\n  validateNoDualstack(dualstackEndpoint);\n  return {\n    bucketEndpoint: true,\n    hostname: \"\" + mrapAlias + (isCustomEndpoint ? \"\" : \".accesspoint.s3-global\") + \".\" + hostnameSuffix,\n    signingRegion: \"*\"\n  };\n};\n\nvar getEndpointFromOutpostArn = function (_a) {\n  var useArnRegion = _a.useArnRegion,\n      clientRegion = _a.clientRegion,\n      _b = _a.clientSigningRegion,\n      clientSigningRegion = _b === void 0 ? clientRegion : _b,\n      bucketName = _a.bucketName,\n      outpostId = _a.outpostId,\n      _c = _a.dualstackEndpoint,\n      dualstackEndpoint = _c === void 0 ? false : _c,\n      _d = _a.fipsEndpoint,\n      fipsEndpoint = _d === void 0 ? false : _d,\n      _e = _a.tlsCompatible,\n      tlsCompatible = _e === void 0 ? true : _e,\n      accesspointName = _a.accesspointName,\n      isCustomEndpoint = _a.isCustomEndpoint,\n      hostnameSuffix = _a.hostnameSuffix;\n  validateRegionalClient(clientRegion);\n  validateRegion(bucketName.region, {\n    useArnRegion: useArnRegion,\n    clientRegion: clientRegion,\n    clientSigningRegion: clientSigningRegion,\n    useFipsEndpoint: fipsEndpoint\n  });\n  var DNSHostLabel = accesspointName + \"-\" + bucketName.accountId;\n  validateDNSHostLabel(DNSHostLabel, {\n    tlsCompatible: tlsCompatible\n  });\n  var endpointRegion = useArnRegion ? bucketName.region : clientRegion;\n  var signingRegion = useArnRegion ? bucketName.region : clientSigningRegion;\n  validateOutpostService(bucketName.service);\n  validateDNSHostLabel(outpostId, {\n    tlsCompatible: tlsCompatible\n  });\n  validateNoDualstack(dualstackEndpoint);\n  validateNoFIPS(fipsEndpoint);\n  var hostnamePrefix = DNSHostLabel + \".\" + outpostId;\n  return {\n    bucketEndpoint: true,\n    hostname: \"\" + hostnamePrefix + (isCustomEndpoint ? \"\" : \".s3-outposts.\" + endpointRegion) + \".\" + hostnameSuffix,\n    signingRegion: signingRegion,\n    signingService: \"s3-outposts\"\n  };\n};\n\nvar getEndpointFromAccessPointArn = function (_a) {\n  var useArnRegion = _a.useArnRegion,\n      clientRegion = _a.clientRegion,\n      _b = _a.clientSigningRegion,\n      clientSigningRegion = _b === void 0 ? clientRegion : _b,\n      bucketName = _a.bucketName,\n      _c = _a.dualstackEndpoint,\n      dualstackEndpoint = _c === void 0 ? false : _c,\n      _d = _a.fipsEndpoint,\n      fipsEndpoint = _d === void 0 ? false : _d,\n      _e = _a.tlsCompatible,\n      tlsCompatible = _e === void 0 ? true : _e,\n      accesspointName = _a.accesspointName,\n      isCustomEndpoint = _a.isCustomEndpoint,\n      hostnameSuffix = _a.hostnameSuffix;\n  validateRegionalClient(clientRegion);\n  validateRegion(bucketName.region, {\n    useArnRegion: useArnRegion,\n    clientRegion: clientRegion,\n    clientSigningRegion: clientSigningRegion,\n    allowFipsRegion: true,\n    useFipsEndpoint: fipsEndpoint\n  });\n  var hostnamePrefix = accesspointName + \"-\" + bucketName.accountId;\n  validateDNSHostLabel(hostnamePrefix, {\n    tlsCompatible: tlsCompatible\n  });\n  var endpointRegion = useArnRegion ? bucketName.region : clientRegion;\n  var signingRegion = useArnRegion ? bucketName.region : clientSigningRegion;\n  validateS3Service(bucketName.service);\n  return {\n    bucketEndpoint: true,\n    hostname: \"\" + hostnamePrefix + (isCustomEndpoint ? \"\" : \".s3-accesspoint\" + (fipsEndpoint ? \"-fips\" : \"\") + (dualstackEndpoint ? \".dualstack\" : \"\") + \".\" + endpointRegion) + \".\" + hostnameSuffix,\n    signingRegion: signingRegion\n  };\n};","map":{"version":3,"names":["__assign","__read","DOT_PATTERN","getArnResources","getSuffix","getSuffixForArnEndpoint","isBucketNameOptions","isDnsCompatibleBucketName","validateAccountId","validateArnEndpointOptions","validateCustomEndpoint","validateDNSHostLabel","validateMrapAlias","validateNoDualstack","validateNoFIPS","validateOutpostService","validatePartition","validateRegion","validateRegionalClient","validateS3Service","validateService","bucketHostname","options","getEndpointFromBucketName","getEndpointFromArn","_a","_b","accelerateEndpoint","region","clientRegion","baseHostname","bucketName","_c","dualstackEndpoint","_d","fipsEndpoint","_e","pathStyleEndpoint","_f","tlsCompatible","_g","isCustomEndpoint","_h","hostnameSuffix","test","bucketEndpoint","hostname","clientPartition","service","partition","accountId","resource","accesspointName","outpostId","getEndpointFromObjectLambdaArn","getEndpointFromMRAPArn","mrapAlias","getEndpointFromOutpostArn","getEndpointFromAccessPointArn","useArnRegion","clientSigningRegion","allowFipsRegion","useFipsEndpoint","DNSHostLabel","endpointRegion","signingRegion","signingService","disableMultiregionAccessPoints","Error","hostnamePrefix"],"sources":["/Users/yzbaoo/Desktop/huohua/ilc-web-packages/node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketHostname.js"],"sourcesContent":["import { __assign, __read } from \"tslib\";\nimport { DOT_PATTERN, getArnResources, getSuffix, getSuffixForArnEndpoint, isBucketNameOptions, isDnsCompatibleBucketName, validateAccountId, validateArnEndpointOptions, validateCustomEndpoint, validateDNSHostLabel, validateMrapAlias, validateNoDualstack, validateNoFIPS, validateOutpostService, validatePartition, validateRegion, validateRegionalClient, validateS3Service, validateService, } from \"./bucketHostnameUtils\";\nexport var bucketHostname = function (options) {\n    validateCustomEndpoint(options);\n    return isBucketNameOptions(options)\n        ?\n            getEndpointFromBucketName(options)\n        :\n            getEndpointFromArn(options);\n};\nvar getEndpointFromBucketName = function (_a) {\n    var _b = _a.accelerateEndpoint, accelerateEndpoint = _b === void 0 ? false : _b, region = _a.clientRegion, baseHostname = _a.baseHostname, bucketName = _a.bucketName, _c = _a.dualstackEndpoint, dualstackEndpoint = _c === void 0 ? false : _c, _d = _a.fipsEndpoint, fipsEndpoint = _d === void 0 ? false : _d, _e = _a.pathStyleEndpoint, pathStyleEndpoint = _e === void 0 ? false : _e, _f = _a.tlsCompatible, tlsCompatible = _f === void 0 ? true : _f, _g = _a.isCustomEndpoint, isCustomEndpoint = _g === void 0 ? false : _g;\n    var _h = __read(isCustomEndpoint ? [region, baseHostname] : getSuffix(baseHostname), 2), clientRegion = _h[0], hostnameSuffix = _h[1];\n    if (pathStyleEndpoint || !isDnsCompatibleBucketName(bucketName) || (tlsCompatible && DOT_PATTERN.test(bucketName))) {\n        return {\n            bucketEndpoint: false,\n            hostname: dualstackEndpoint ? \"s3.dualstack.\" + clientRegion + \".\" + hostnameSuffix : baseHostname,\n        };\n    }\n    if (accelerateEndpoint) {\n        baseHostname = \"s3-accelerate\" + (dualstackEndpoint ? \".dualstack\" : \"\") + \".\" + hostnameSuffix;\n    }\n    else if (dualstackEndpoint) {\n        baseHostname = \"s3.dualstack.\" + clientRegion + \".\" + hostnameSuffix;\n    }\n    return {\n        bucketEndpoint: true,\n        hostname: bucketName + \".\" + baseHostname,\n    };\n};\nvar getEndpointFromArn = function (options) {\n    var isCustomEndpoint = options.isCustomEndpoint, baseHostname = options.baseHostname, clientRegion = options.clientRegion;\n    var hostnameSuffix = isCustomEndpoint ? baseHostname : getSuffixForArnEndpoint(baseHostname)[1];\n    var pathStyleEndpoint = options.pathStyleEndpoint, _a = options.accelerateEndpoint, accelerateEndpoint = _a === void 0 ? false : _a, _b = options.fipsEndpoint, fipsEndpoint = _b === void 0 ? false : _b, _c = options.tlsCompatible, tlsCompatible = _c === void 0 ? true : _c, bucketName = options.bucketName, _d = options.clientPartition, clientPartition = _d === void 0 ? \"aws\" : _d;\n    validateArnEndpointOptions({ pathStyleEndpoint: pathStyleEndpoint, accelerateEndpoint: accelerateEndpoint, tlsCompatible: tlsCompatible });\n    var service = bucketName.service, partition = bucketName.partition, accountId = bucketName.accountId, region = bucketName.region, resource = bucketName.resource;\n    validateService(service);\n    validatePartition(partition, { clientPartition: clientPartition });\n    validateAccountId(accountId);\n    var _e = getArnResources(resource), accesspointName = _e.accesspointName, outpostId = _e.outpostId;\n    if (service === \"s3-object-lambda\") {\n        return getEndpointFromObjectLambdaArn(__assign(__assign({}, options), { tlsCompatible: tlsCompatible, bucketName: bucketName, accesspointName: accesspointName, hostnameSuffix: hostnameSuffix }));\n    }\n    if (region === \"\") {\n        return getEndpointFromMRAPArn(__assign(__assign({}, options), { clientRegion: clientRegion, mrapAlias: accesspointName, hostnameSuffix: hostnameSuffix }));\n    }\n    if (outpostId) {\n        return getEndpointFromOutpostArn(__assign(__assign({}, options), { clientRegion: clientRegion, outpostId: outpostId, accesspointName: accesspointName, hostnameSuffix: hostnameSuffix }));\n    }\n    return getEndpointFromAccessPointArn(__assign(__assign({}, options), { clientRegion: clientRegion, accesspointName: accesspointName, hostnameSuffix: hostnameSuffix }));\n};\nvar getEndpointFromObjectLambdaArn = function (_a) {\n    var _b = _a.dualstackEndpoint, dualstackEndpoint = _b === void 0 ? false : _b, _c = _a.fipsEndpoint, fipsEndpoint = _c === void 0 ? false : _c, _d = _a.tlsCompatible, tlsCompatible = _d === void 0 ? true : _d, useArnRegion = _a.useArnRegion, clientRegion = _a.clientRegion, _e = _a.clientSigningRegion, clientSigningRegion = _e === void 0 ? clientRegion : _e, accesspointName = _a.accesspointName, bucketName = _a.bucketName, hostnameSuffix = _a.hostnameSuffix;\n    var accountId = bucketName.accountId, region = bucketName.region, service = bucketName.service;\n    validateRegionalClient(clientRegion);\n    validateRegion(region, {\n        useArnRegion: useArnRegion,\n        clientRegion: clientRegion,\n        clientSigningRegion: clientSigningRegion,\n        allowFipsRegion: true,\n        useFipsEndpoint: fipsEndpoint,\n    });\n    validateNoDualstack(dualstackEndpoint);\n    var DNSHostLabel = accesspointName + \"-\" + accountId;\n    validateDNSHostLabel(DNSHostLabel, { tlsCompatible: tlsCompatible });\n    var endpointRegion = useArnRegion ? region : clientRegion;\n    var signingRegion = useArnRegion ? region : clientSigningRegion;\n    return {\n        bucketEndpoint: true,\n        hostname: DNSHostLabel + \".\" + service + (fipsEndpoint ? \"-fips\" : \"\") + \".\" + endpointRegion + \".\" + hostnameSuffix,\n        signingRegion: signingRegion,\n        signingService: service,\n    };\n};\nvar getEndpointFromMRAPArn = function (_a) {\n    var disableMultiregionAccessPoints = _a.disableMultiregionAccessPoints, _b = _a.dualstackEndpoint, dualstackEndpoint = _b === void 0 ? false : _b, isCustomEndpoint = _a.isCustomEndpoint, mrapAlias = _a.mrapAlias, hostnameSuffix = _a.hostnameSuffix;\n    if (disableMultiregionAccessPoints === true) {\n        throw new Error(\"SDK is attempting to use a MRAP ARN. Please enable to feature.\");\n    }\n    validateMrapAlias(mrapAlias);\n    validateNoDualstack(dualstackEndpoint);\n    return {\n        bucketEndpoint: true,\n        hostname: \"\" + mrapAlias + (isCustomEndpoint ? \"\" : \".accesspoint.s3-global\") + \".\" + hostnameSuffix,\n        signingRegion: \"*\",\n    };\n};\nvar getEndpointFromOutpostArn = function (_a) {\n    var useArnRegion = _a.useArnRegion, clientRegion = _a.clientRegion, _b = _a.clientSigningRegion, clientSigningRegion = _b === void 0 ? clientRegion : _b, bucketName = _a.bucketName, outpostId = _a.outpostId, _c = _a.dualstackEndpoint, dualstackEndpoint = _c === void 0 ? false : _c, _d = _a.fipsEndpoint, fipsEndpoint = _d === void 0 ? false : _d, _e = _a.tlsCompatible, tlsCompatible = _e === void 0 ? true : _e, accesspointName = _a.accesspointName, isCustomEndpoint = _a.isCustomEndpoint, hostnameSuffix = _a.hostnameSuffix;\n    validateRegionalClient(clientRegion);\n    validateRegion(bucketName.region, { useArnRegion: useArnRegion, clientRegion: clientRegion, clientSigningRegion: clientSigningRegion, useFipsEndpoint: fipsEndpoint });\n    var DNSHostLabel = accesspointName + \"-\" + bucketName.accountId;\n    validateDNSHostLabel(DNSHostLabel, { tlsCompatible: tlsCompatible });\n    var endpointRegion = useArnRegion ? bucketName.region : clientRegion;\n    var signingRegion = useArnRegion ? bucketName.region : clientSigningRegion;\n    validateOutpostService(bucketName.service);\n    validateDNSHostLabel(outpostId, { tlsCompatible: tlsCompatible });\n    validateNoDualstack(dualstackEndpoint);\n    validateNoFIPS(fipsEndpoint);\n    var hostnamePrefix = DNSHostLabel + \".\" + outpostId;\n    return {\n        bucketEndpoint: true,\n        hostname: \"\" + hostnamePrefix + (isCustomEndpoint ? \"\" : \".s3-outposts.\" + endpointRegion) + \".\" + hostnameSuffix,\n        signingRegion: signingRegion,\n        signingService: \"s3-outposts\",\n    };\n};\nvar getEndpointFromAccessPointArn = function (_a) {\n    var useArnRegion = _a.useArnRegion, clientRegion = _a.clientRegion, _b = _a.clientSigningRegion, clientSigningRegion = _b === void 0 ? clientRegion : _b, bucketName = _a.bucketName, _c = _a.dualstackEndpoint, dualstackEndpoint = _c === void 0 ? false : _c, _d = _a.fipsEndpoint, fipsEndpoint = _d === void 0 ? false : _d, _e = _a.tlsCompatible, tlsCompatible = _e === void 0 ? true : _e, accesspointName = _a.accesspointName, isCustomEndpoint = _a.isCustomEndpoint, hostnameSuffix = _a.hostnameSuffix;\n    validateRegionalClient(clientRegion);\n    validateRegion(bucketName.region, {\n        useArnRegion: useArnRegion,\n        clientRegion: clientRegion,\n        clientSigningRegion: clientSigningRegion,\n        allowFipsRegion: true,\n        useFipsEndpoint: fipsEndpoint,\n    });\n    var hostnamePrefix = accesspointName + \"-\" + bucketName.accountId;\n    validateDNSHostLabel(hostnamePrefix, { tlsCompatible: tlsCompatible });\n    var endpointRegion = useArnRegion ? bucketName.region : clientRegion;\n    var signingRegion = useArnRegion ? bucketName.region : clientSigningRegion;\n    validateS3Service(bucketName.service);\n    return {\n        bucketEndpoint: true,\n        hostname: \"\" + hostnamePrefix + (isCustomEndpoint\n            ? \"\"\n            : \".s3-accesspoint\" + (fipsEndpoint ? \"-fips\" : \"\") + (dualstackEndpoint ? \".dualstack\" : \"\") + \".\" + endpointRegion) + \".\" + hostnameSuffix,\n        signingRegion: signingRegion,\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}