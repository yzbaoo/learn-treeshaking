{"ast":null,"code":"var session = require('./session');\n\nvar Async = require('./async');\n\nvar EventProxy = require('./event').EventProxy;\n\nvar util = require('./util'); // 文件分块上传全过程，暴露的分块上传接口\n\n\nfunction sliceUploadFile(params, callback) {\n  var self = this;\n  var ep = new EventProxy();\n  var TaskId = params.TaskId;\n  var Bucket = params.Bucket;\n  var Region = params.Region;\n  var Key = params.Key;\n  var Body = params.Body;\n  var ChunkSize = params.ChunkSize || params.SliceSize || self.options.ChunkSize;\n  var AsyncLimit = params.AsyncLimit;\n  var StorageClass = params.StorageClass;\n  var ServerSideEncryption = params.ServerSideEncryption;\n  var FileSize;\n  var onProgress;\n  var onHashProgress = params.onHashProgress; // 上传过程中出现错误，返回错误\n\n  ep.on('error', function (err) {\n    if (!self._isRunningTask(TaskId)) return;\n    err.UploadId = params.UploadData.UploadId || '';\n    return callback(err);\n  }); // 上传分块完成，开始 uploadSliceComplete 操作\n\n  ep.on('upload_complete', function (UploadCompleteData) {\n    var _UploadCompleteData = util.extend({\n      UploadId: params.UploadData.UploadId || ''\n    }, UploadCompleteData);\n\n    callback(null, _UploadCompleteData);\n  }); // 上传分块完成，开始 uploadSliceComplete 操作\n\n  ep.on('upload_slice_complete', function (UploadData) {\n    var metaHeaders = {};\n    util.each(params.Headers, function (val, k) {\n      var shortKey = k.toLowerCase();\n      if (shortKey.indexOf('x-cos-meta-') === 0 || shortKey === 'pic-operations') metaHeaders[k] = val;\n    });\n    uploadSliceComplete.call(self, {\n      Bucket: Bucket,\n      Region: Region,\n      Key: Key,\n      UploadId: UploadData.UploadId,\n      SliceList: UploadData.SliceList,\n      Headers: metaHeaders\n    }, function (err, data) {\n      if (!self._isRunningTask(TaskId)) return;\n      session.removeUsing(UploadData.UploadId);\n\n      if (err) {\n        onProgress(null, true);\n        return ep.emit('error', err);\n      }\n\n      session.removeUploadId.call(self, UploadData.UploadId);\n      onProgress({\n        loaded: FileSize,\n        total: FileSize\n      }, true);\n      ep.emit('upload_complete', data);\n    });\n  }); // 获取 UploadId 完成，开始上传每个分片\n\n  ep.on('get_upload_data_finish', function (UploadData) {\n    // 处理 UploadId 缓存\n    var uuid = session.getFileId(Body, params.ChunkSize, Bucket, Key);\n    uuid && session.saveUploadId.call(self, uuid, UploadData.UploadId, self.options.UploadIdCacheLimit); // 缓存 UploadId\n\n    session.setUsing(UploadData.UploadId); // 标记 UploadId 为正在使用\n    // 获取 UploadId\n\n    onProgress(null, true); // 任务状态开始 uploading\n\n    uploadSliceList.call(self, {\n      TaskId: TaskId,\n      Bucket: Bucket,\n      Region: Region,\n      Key: Key,\n      Body: Body,\n      FileSize: FileSize,\n      SliceSize: ChunkSize,\n      AsyncLimit: AsyncLimit,\n      ServerSideEncryption: ServerSideEncryption,\n      UploadData: UploadData,\n      Headers: params.Headers,\n      onProgress: onProgress\n    }, function (err, data) {\n      if (!self._isRunningTask(TaskId)) return;\n\n      if (err) {\n        onProgress(null, true);\n        return ep.emit('error', err);\n      }\n\n      ep.emit('upload_slice_complete', data);\n    });\n  }); // 开始获取文件 UploadId，里面会视情况计算 ETag，并比对，保证文件一致性，也优化上传\n\n  ep.on('get_file_size_finish', function () {\n    onProgress = util.throttleOnProgress.call(self, FileSize, params.onProgress);\n\n    if (params.UploadData.UploadId) {\n      ep.emit('get_upload_data_finish', params.UploadData);\n    } else {\n      var _params = util.extend({\n        TaskId: TaskId,\n        Bucket: Bucket,\n        Region: Region,\n        Key: Key,\n        Headers: params.Headers,\n        StorageClass: StorageClass,\n        Body: Body,\n        FileSize: FileSize,\n        SliceSize: ChunkSize,\n        onHashProgress: onHashProgress\n      }, params);\n\n      getUploadIdAndPartList.call(self, _params, function (err, UploadData) {\n        if (!self._isRunningTask(TaskId)) return;\n        if (err) return ep.emit('error', err);\n        params.UploadData.UploadId = UploadData.UploadId;\n        params.UploadData.PartList = UploadData.PartList;\n        ep.emit('get_upload_data_finish', params.UploadData);\n      });\n    }\n  }); // 获取上传文件大小\n\n  FileSize = params.ContentLength;\n  delete params.ContentLength;\n  !params.Headers && (params.Headers = {});\n  util.each(params.Headers, function (item, key) {\n    if (key.toLowerCase() === 'content-length') {\n      delete params.Headers[key];\n    }\n  }); // 控制分片大小\n\n  (function () {\n    var SIZE = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 1024 * 2, 1024 * 4, 1024 * 5];\n    var AutoChunkSize = 1024 * 1024;\n\n    for (var i = 0; i < SIZE.length; i++) {\n      AutoChunkSize = SIZE[i] * 1024 * 1024;\n      if (FileSize / AutoChunkSize <= self.options.MaxPartNumber) break;\n    }\n\n    params.ChunkSize = params.SliceSize = ChunkSize = Math.max(ChunkSize, AutoChunkSize);\n  })(); // 开始上传\n\n\n  if (FileSize === 0) {\n    params.Body = '';\n    params.ContentLength = 0;\n    params.SkipTask = true;\n    self.putObject(params, callback);\n  } else {\n    ep.emit('get_file_size_finish');\n  }\n} // 获取上传任务的 UploadId\n\n\nfunction getUploadIdAndPartList(params, callback) {\n  var TaskId = params.TaskId;\n  var Bucket = params.Bucket;\n  var Region = params.Region;\n  var Key = params.Key;\n  var StorageClass = params.StorageClass;\n  var self = this; // 计算 ETag\n\n  var ETagMap = {};\n  var FileSize = params.FileSize;\n  var SliceSize = params.SliceSize;\n  var SliceCount = Math.ceil(FileSize / SliceSize);\n  var FinishSliceCount = 0;\n  var FinishSize = 0;\n  var onHashProgress = util.throttleOnProgress.call(self, FileSize, params.onHashProgress);\n\n  var getChunkETag = function (PartNumber, callback) {\n    var start = SliceSize * (PartNumber - 1);\n    var end = Math.min(start + SliceSize, FileSize);\n    var ChunkSize = end - start;\n\n    if (ETagMap[PartNumber]) {\n      callback(null, {\n        PartNumber: PartNumber,\n        ETag: ETagMap[PartNumber],\n        Size: ChunkSize\n      });\n    } else {\n      util.fileSlice(params.Body, start, end, false, function (chunkItem) {\n        util.getFileMd5(chunkItem, function (err, md5) {\n          if (err) return callback(util.error(err));\n          var ETag = '\"' + md5 + '\"';\n          ETagMap[PartNumber] = ETag;\n          FinishSliceCount += 1;\n          FinishSize += ChunkSize;\n          onHashProgress({\n            loaded: FinishSize,\n            total: FileSize\n          });\n          callback(null, {\n            PartNumber: PartNumber,\n            ETag: ETag,\n            Size: ChunkSize\n          });\n        });\n      });\n    }\n  }; // 通过和文件的 md5 对比，判断 UploadId 是否可用\n\n\n  var isAvailableUploadList = function (PartList, callback) {\n    var PartCount = PartList.length; // 如果没有分片，通过\n\n    if (PartCount === 0) {\n      return callback(null, true);\n    } // 检查分片数量\n\n\n    if (PartCount > SliceCount) {\n      return callback(null, false);\n    } // 检查分片大小\n\n\n    if (PartCount > 1) {\n      var PartSliceSize = Math.max(PartList[0].Size, PartList[1].Size);\n\n      if (PartSliceSize !== SliceSize) {\n        return callback(null, false);\n      }\n    } // 逐个分片计算并检查 ETag 是否一致\n\n\n    var next = function (index) {\n      if (index < PartCount) {\n        var Part = PartList[index];\n        getChunkETag(Part.PartNumber, function (err, chunk) {\n          if (chunk && chunk.ETag === Part.ETag && chunk.Size === Part.Size) {\n            next(index + 1);\n          } else {\n            callback(null, false);\n          }\n        });\n      } else {\n        callback(null, true);\n      }\n    };\n\n    next(0);\n  };\n\n  var ep = new EventProxy();\n  ep.on('error', function (errData) {\n    if (!self._isRunningTask(TaskId)) return;\n    return callback(errData);\n  }); // 存在 UploadId\n\n  ep.on('upload_id_available', function (UploadData) {\n    // 转换成 map\n    var map = {};\n    var list = [];\n    util.each(UploadData.PartList, function (item) {\n      map[item.PartNumber] = item;\n    });\n\n    for (var PartNumber = 1; PartNumber <= SliceCount; PartNumber++) {\n      var item = map[PartNumber];\n\n      if (item) {\n        item.PartNumber = PartNumber;\n        item.Uploaded = true;\n      } else {\n        item = {\n          PartNumber: PartNumber,\n          ETag: null,\n          Uploaded: false\n        };\n      }\n\n      list.push(item);\n    }\n\n    UploadData.PartList = list;\n    callback(null, UploadData);\n  }); // 不存在 UploadId, 初始化生成 UploadId\n\n  ep.on('no_available_upload_id', function () {\n    if (!self._isRunningTask(TaskId)) return;\n\n    var _params = util.extend({\n      Bucket: Bucket,\n      Region: Region,\n      Key: Key,\n      Query: util.clone(params.Query),\n      StorageClass: StorageClass,\n      Body: params.Body\n    }, params);\n\n    var headers = util.clone(params.Headers);\n    delete headers['x-cos-mime-limit'];\n    _params.Headers = headers;\n    self.multipartInit(_params, function (err, data) {\n      if (!self._isRunningTask(TaskId)) return;\n      if (err) return ep.emit('error', err);\n      var UploadId = data.UploadId;\n\n      if (!UploadId) {\n        return callback(util.error(new Error('no such upload id')));\n      }\n\n      ep.emit('upload_id_available', {\n        UploadId: UploadId,\n        PartList: []\n      });\n    });\n  }); // 如果已存在 UploadId，找一个可以用的 UploadId\n\n  ep.on('has_and_check_upload_id', function (UploadIdList) {\n    // 串行地，找一个内容一致的 UploadId\n    UploadIdList = UploadIdList.reverse();\n    Async.eachLimit(UploadIdList, 1, function (UploadId, asyncCallback) {\n      if (!self._isRunningTask(TaskId)) return; // 如果正在上传，跳过\n\n      if (session.using[UploadId]) {\n        asyncCallback(); // 检查下一个 UploadId\n\n        return;\n      } // 判断 UploadId 是否可用\n\n\n      wholeMultipartListPart.call(self, {\n        Bucket: Bucket,\n        Region: Region,\n        Key: Key,\n        UploadId: UploadId\n      }, function (err, PartListData) {\n        if (!self._isRunningTask(TaskId)) return;\n\n        if (err) {\n          session.removeUsing(UploadId);\n          return ep.emit('error', err);\n        }\n\n        var PartList = PartListData.PartList;\n        PartList.forEach(function (item) {\n          item.PartNumber *= 1;\n          item.Size *= 1;\n          item.ETag = item.ETag || '';\n        });\n        isAvailableUploadList(PartList, function (err, isAvailable) {\n          if (!self._isRunningTask(TaskId)) return;\n          if (err) return ep.emit('error', err);\n\n          if (isAvailable) {\n            asyncCallback({\n              UploadId: UploadId,\n              PartList: PartList\n            }); // 马上结束\n          } else {\n            asyncCallback(); // 检查下一个 UploadId\n          }\n        });\n      });\n    }, function (AvailableUploadData) {\n      if (!self._isRunningTask(TaskId)) return;\n      onHashProgress(null, true);\n\n      if (AvailableUploadData && AvailableUploadData.UploadId) {\n        ep.emit('upload_id_available', AvailableUploadData);\n      } else {\n        ep.emit('no_available_upload_id');\n      }\n    });\n  }); // 在本地缓存找可用的 UploadId\n\n  ep.on('seek_local_avail_upload_id', function (RemoteUploadIdList) {\n    // 在本地找可用的 UploadId\n    var uuid = session.getFileId(params.Body, params.ChunkSize, Bucket, Key);\n    var LocalUploadIdList = session.getUploadIdList.call(self, uuid);\n\n    if (!uuid || !LocalUploadIdList) {\n      ep.emit('has_and_check_upload_id', RemoteUploadIdList);\n      return;\n    }\n\n    var next = function (index) {\n      // 如果本地找不到可用 UploadId，再一个个遍历校验远端\n      if (index >= LocalUploadIdList.length) {\n        ep.emit('has_and_check_upload_id', RemoteUploadIdList);\n        return;\n      }\n\n      var UploadId = LocalUploadIdList[index]; // 如果不在远端 UploadId 列表里，跳过并删除\n\n      if (!util.isInArray(RemoteUploadIdList, UploadId)) {\n        session.removeUploadId.call(self, UploadId);\n        next(index + 1);\n        return;\n      } // 如果正在上传，跳过\n\n\n      if (session.using[UploadId]) {\n        next(index + 1);\n        return;\n      } // 判断 UploadId 是否存在线上\n\n\n      wholeMultipartListPart.call(self, {\n        Bucket: Bucket,\n        Region: Region,\n        Key: Key,\n        UploadId: UploadId\n      }, function (err, PartListData) {\n        if (!self._isRunningTask(TaskId)) return;\n\n        if (err) {\n          // 如果 UploadId 获取会出错，跳过并删除\n          session.removeUploadId.call(self, UploadId);\n          next(index + 1);\n        } else {\n          // 找到可用 UploadId\n          ep.emit('upload_id_available', {\n            UploadId: UploadId,\n            PartList: PartListData.PartList\n          });\n        }\n      });\n    };\n\n    next(0);\n  }); // 获取线上 UploadId 列表\n\n  ep.on('get_remote_upload_id_list', function () {\n    // 获取符合条件的 UploadId 列表，因为同一个文件可以有多个上传任务。\n    wholeMultipartList.call(self, {\n      Bucket: Bucket,\n      Region: Region,\n      Key: Key\n    }, function (err, data) {\n      if (!self._isRunningTask(TaskId)) return;\n      if (err) return ep.emit('error', err); // 整理远端 UploadId 列表\n\n      var RemoteUploadIdList = util.filter(data.UploadList, function (item) {\n        return item.Key === Key && (!StorageClass || item.StorageClass.toUpperCase() === StorageClass.toUpperCase());\n      }).reverse().map(function (item) {\n        return item.UploadId || item.UploadID;\n      });\n\n      if (RemoteUploadIdList.length) {\n        ep.emit('seek_local_avail_upload_id', RemoteUploadIdList);\n      } else {\n        // 远端没有 UploadId，清理缓存的 UploadId\n        var uuid = session.getFileId(params.Body, params.ChunkSize, Bucket, Key),\n            LocalUploadIdList;\n\n        if (uuid && (LocalUploadIdList = session.getUploadIdList.call(self, uuid))) {\n          util.each(LocalUploadIdList, function (UploadId) {\n            session.removeUploadId.call(self, UploadId);\n          });\n        }\n\n        ep.emit('no_available_upload_id');\n      }\n    });\n  }); // 开始找可用 UploadId\n\n  ep.emit('get_remote_upload_id_list');\n} // 获取符合条件的全部上传任务 (条件包括 Bucket, Region, Prefix)\n\n\nfunction wholeMultipartList(params, callback) {\n  var self = this;\n  var UploadList = [];\n  var sendParams = {\n    Bucket: params.Bucket,\n    Region: params.Region,\n    Prefix: params.Key\n  };\n\n  var next = function () {\n    self.multipartList(sendParams, function (err, data) {\n      if (err) return callback(err);\n      UploadList.push.apply(UploadList, data.Upload || []);\n\n      if (data.IsTruncated === 'true') {\n        // 列表不完整\n        sendParams.KeyMarker = data.NextKeyMarker;\n        sendParams.UploadIdMarker = data.NextUploadIdMarker;\n        next();\n      } else {\n        callback(null, {\n          UploadList: UploadList\n        });\n      }\n    });\n  };\n\n  next();\n} // 获取指定上传任务的分块列表\n\n\nfunction wholeMultipartListPart(params, callback) {\n  var self = this;\n  var PartList = [];\n  var sendParams = {\n    Bucket: params.Bucket,\n    Region: params.Region,\n    Key: params.Key,\n    UploadId: params.UploadId\n  };\n\n  var next = function () {\n    self.multipartListPart(sendParams, function (err, data) {\n      if (err) return callback(err);\n      PartList.push.apply(PartList, data.Part || []);\n\n      if (data.IsTruncated === 'true') {\n        // 列表不完整\n        sendParams.PartNumberMarker = data.NextPartNumberMarker;\n        next();\n      } else {\n        callback(null, {\n          PartList: PartList\n        });\n      }\n    });\n  };\n\n  next();\n} // 上传文件分块，包括\n\n/*\n UploadId (上传任务编号)\n AsyncLimit (并发量)，\n SliceList (上传的分块数组)，\n FilePath (本地文件的位置)，\n SliceSize (文件分块大小)\n FileSize (文件大小)\n onProgress (上传成功之后的回调函数)\n */\n\n\nfunction uploadSliceList(params, cb) {\n  var self = this;\n  var TaskId = params.TaskId;\n  var Bucket = params.Bucket;\n  var Region = params.Region;\n  var Key = params.Key;\n  var UploadData = params.UploadData;\n  var FileSize = params.FileSize;\n  var SliceSize = params.SliceSize;\n  var ChunkParallel = Math.min(params.AsyncLimit || self.options.ChunkParallelLimit || 1, 256);\n  var Body = params.Body;\n  var SliceCount = Math.ceil(FileSize / SliceSize);\n  var FinishSize = 0;\n  var ServerSideEncryption = params.ServerSideEncryption;\n  var Headers = params.Headers;\n  var needUploadSlices = util.filter(UploadData.PartList, function (SliceItem) {\n    if (SliceItem['Uploaded']) {\n      FinishSize += SliceItem['PartNumber'] >= SliceCount ? FileSize % SliceSize || SliceSize : SliceSize;\n    }\n\n    return !SliceItem['Uploaded'];\n  });\n  var onProgress = params.onProgress;\n  Async.eachLimit(needUploadSlices, ChunkParallel, function (SliceItem, asyncCallback) {\n    if (!self._isRunningTask(TaskId)) return;\n    var PartNumber = SliceItem['PartNumber'];\n    var currentSize = Math.min(FileSize, SliceItem['PartNumber'] * SliceSize) - (SliceItem['PartNumber'] - 1) * SliceSize;\n    var preAddSize = 0;\n    uploadSliceItem.call(self, {\n      TaskId: TaskId,\n      Bucket: Bucket,\n      Region: Region,\n      Key: Key,\n      SliceSize: SliceSize,\n      FileSize: FileSize,\n      PartNumber: PartNumber,\n      ServerSideEncryption: ServerSideEncryption,\n      Body: Body,\n      UploadData: UploadData,\n      Headers: Headers,\n      onProgress: function (data) {\n        FinishSize += data.loaded - preAddSize;\n        preAddSize = data.loaded;\n        onProgress({\n          loaded: FinishSize,\n          total: FileSize\n        });\n      }\n    }, function (err, data) {\n      if (!self._isRunningTask(TaskId)) return;\n      if (!err && !data.ETag) err = 'get ETag error, please add \"ETag\" to CORS ExposeHeader setting.( 获取ETag失败，请在CORS ExposeHeader设置中添加ETag，请参考文档：https://cloud.tencent.com/document/product/436/13318 )';\n\n      if (err) {\n        FinishSize -= preAddSize;\n      } else {\n        FinishSize += currentSize - preAddSize;\n        SliceItem.ETag = data.ETag;\n      }\n\n      onProgress({\n        loaded: FinishSize,\n        total: FileSize\n      });\n      asyncCallback(err || null, data);\n    });\n  }, function (err) {\n    if (!self._isRunningTask(TaskId)) return;\n    if (err) return cb(err);\n    cb(null, {\n      UploadId: UploadData.UploadId,\n      SliceList: UploadData.PartList\n    });\n  });\n} // 上传指定分片\n\n\nfunction uploadSliceItem(params, callback) {\n  var self = this;\n  var TaskId = params.TaskId;\n  var Bucket = params.Bucket;\n  var Region = params.Region;\n  var Key = params.Key;\n  var FileSize = params.FileSize;\n  var FileBody = params.Body;\n  var PartNumber = params.PartNumber * 1;\n  var SliceSize = params.SliceSize;\n  var ServerSideEncryption = params.ServerSideEncryption;\n  var UploadData = params.UploadData;\n  var Headers = params.Headers || {};\n  var ChunkRetryTimes = self.options.ChunkRetryTimes + 1;\n  var start = SliceSize * (PartNumber - 1);\n  var ContentLength = SliceSize;\n  var end = start + SliceSize;\n\n  if (end > FileSize) {\n    end = FileSize;\n    ContentLength = end - start;\n  }\n\n  var headersWhiteList = ['x-cos-traffic-limit', 'x-cos-mime-limit'];\n  var headers = {};\n  util.each(Headers, function (v, k) {\n    if (headersWhiteList.indexOf(k) > -1) {\n      headers[k] = v;\n    }\n  });\n  var PartItem = UploadData.PartList[PartNumber - 1];\n  Async.retry(ChunkRetryTimes, function (tryCallback) {\n    if (!self._isRunningTask(TaskId)) return;\n    util.fileSlice(FileBody, start, end, true, function (Body) {\n      self.multipartUpload({\n        TaskId: TaskId,\n        Bucket: Bucket,\n        Region: Region,\n        Key: Key,\n        ContentLength: ContentLength,\n        PartNumber: PartNumber,\n        UploadId: UploadData.UploadId,\n        ServerSideEncryption: ServerSideEncryption,\n        Body: Body,\n        Headers: headers,\n        onProgress: params.onProgress\n      }, function (err, data) {\n        if (!self._isRunningTask(TaskId)) return;\n        if (err) return tryCallback(err);\n        PartItem.Uploaded = true;\n        return tryCallback(null, data);\n      });\n    });\n  }, function (err, data) {\n    if (!self._isRunningTask(TaskId)) return;\n    return callback(err, data);\n  });\n} // 完成分块上传\n\n\nfunction uploadSliceComplete(params, callback) {\n  var Bucket = params.Bucket;\n  var Region = params.Region;\n  var Key = params.Key;\n  var UploadId = params.UploadId;\n  var SliceList = params.SliceList;\n  var self = this;\n  var ChunkRetryTimes = this.options.ChunkRetryTimes + 1;\n  var Headers = params.Headers;\n  var Parts = SliceList.map(function (item) {\n    return {\n      PartNumber: item.PartNumber,\n      ETag: item.ETag\n    };\n  }); // 完成上传的请求也做重试\n\n  Async.retry(ChunkRetryTimes, function (tryCallback) {\n    self.multipartComplete({\n      Bucket: Bucket,\n      Region: Region,\n      Key: Key,\n      UploadId: UploadId,\n      Parts: Parts,\n      Headers: Headers\n    }, tryCallback);\n  }, function (err, data) {\n    callback(err, data);\n  });\n} // 抛弃分块上传任务\n\n/*\n AsyncLimit (抛弃上传任务的并发量)，\n UploadId (上传任务的编号，当 Level 为 task 时候需要)\n Level (抛弃分块上传任务的级别，task : 抛弃指定的上传任务，file ： 抛弃指定的文件对应的上传任务，其他值 ：抛弃指定Bucket 的全部上传任务)\n */\n\n\nfunction abortUploadTask(params, callback) {\n  var Bucket = params.Bucket;\n  var Region = params.Region;\n  var Key = params.Key;\n  var UploadId = params.UploadId;\n  var Level = params.Level || 'task';\n  var AsyncLimit = params.AsyncLimit;\n  var self = this;\n  var ep = new EventProxy();\n  ep.on('error', function (errData) {\n    return callback(errData);\n  }); // 已经获取到需要抛弃的任务列表\n\n  ep.on('get_abort_array', function (AbortArray) {\n    abortUploadTaskArray.call(self, {\n      Bucket: Bucket,\n      Region: Region,\n      Key: Key,\n      Headers: params.Headers,\n      AsyncLimit: AsyncLimit,\n      AbortArray: AbortArray\n    }, callback);\n  });\n\n  if (Level === 'bucket') {\n    // Bucket 级别的任务抛弃，抛弃该 Bucket 下的全部上传任务\n    wholeMultipartList.call(self, {\n      Bucket: Bucket,\n      Region: Region\n    }, function (err, data) {\n      if (err) return callback(err);\n      ep.emit('get_abort_array', data.UploadList || []);\n    });\n  } else if (Level === 'file') {\n    // 文件级别的任务抛弃，抛弃该文件的全部上传任务\n    if (!Key) return callback(util.error(new Error('abort_upload_task_no_key')));\n    wholeMultipartList.call(self, {\n      Bucket: Bucket,\n      Region: Region,\n      Key: Key\n    }, function (err, data) {\n      if (err) return callback(err);\n      ep.emit('get_abort_array', data.UploadList || []);\n    });\n  } else if (Level === 'task') {\n    // 单个任务级别的任务抛弃，抛弃指定 UploadId 的上传任务\n    if (!UploadId) return callback(util.error(new Error('abort_upload_task_no_id')));\n    if (!Key) return callback(util.error(new Error('abort_upload_task_no_key')));\n    ep.emit('get_abort_array', [{\n      Key: Key,\n      UploadId: UploadId\n    }]);\n  } else {\n    return callback(util.error(new Error('abort_unknown_level')));\n  }\n} // 批量抛弃分块上传任务\n\n\nfunction abortUploadTaskArray(params, callback) {\n  var Bucket = params.Bucket;\n  var Region = params.Region;\n  var Key = params.Key;\n  var AbortArray = params.AbortArray;\n  var AsyncLimit = params.AsyncLimit || 1;\n  var self = this;\n  var index = 0;\n  var resultList = new Array(AbortArray.length);\n  Async.eachLimit(AbortArray, AsyncLimit, function (AbortItem, nextItem) {\n    var eachIndex = index;\n\n    if (Key && Key !== AbortItem.Key) {\n      resultList[eachIndex] = {\n        error: {\n          KeyNotMatch: true\n        }\n      };\n      nextItem(null);\n      return;\n    }\n\n    var UploadId = AbortItem.UploadId || AbortItem.UploadID;\n    self.multipartAbort({\n      Bucket: Bucket,\n      Region: Region,\n      Key: AbortItem.Key,\n      Headers: params.Headers,\n      UploadId: UploadId\n    }, function (err) {\n      var task = {\n        Bucket: Bucket,\n        Region: Region,\n        Key: AbortItem.Key,\n        UploadId: UploadId\n      };\n      resultList[eachIndex] = {\n        error: err,\n        task: task\n      };\n      nextItem(null);\n    });\n    index++;\n  }, function (err) {\n    if (err) return callback(err);\n    var successList = [];\n    var errorList = [];\n\n    for (var i = 0, len = resultList.length; i < len; i++) {\n      var item = resultList[i];\n\n      if (item['task']) {\n        if (item['error']) {\n          errorList.push(item['task']);\n        } else {\n          successList.push(item['task']);\n        }\n      }\n    }\n\n    return callback(null, {\n      successList: successList,\n      errorList: errorList\n    });\n  });\n} // 高级上传\n\n\nfunction uploadFile(params, callback) {\n  var self = this; // 判断多大的文件使用分片上传\n\n  var SliceSize = params.SliceSize === undefined ? self.options.SliceSize : params.SliceSize;\n  var taskList = [];\n  var Body = params.Body;\n  var FileSize = Body.size || Body.length || 0;\n  var fileInfo = {\n    TaskId: ''\n  }; // 整理 option，用于返回给回调\n\n  util.each(params, function (v, k) {\n    if (typeof v !== 'object' && typeof v !== 'function') {\n      fileInfo[k] = v;\n    }\n  }); // 处理文件 TaskReady\n\n  var _onTaskReady = params.onTaskReady;\n\n  var onTaskReady = function (tid) {\n    fileInfo.TaskId = tid;\n    _onTaskReady && _onTaskReady(tid);\n  };\n\n  params.onTaskReady = onTaskReady; // 处理文件完成\n\n  var _onFileFinish = params.onFileFinish;\n\n  var onFileFinish = function (err, data) {\n    _onFileFinish && _onFileFinish(err, data, fileInfo);\n    callback && callback(err, data);\n  }; // 添加上传任务,超过阈值使用分块上传，小于等于则简单上传\n\n\n  var api = FileSize > SliceSize ? 'sliceUploadFile' : 'putObject';\n  taskList.push({\n    api: api,\n    params: params,\n    callback: onFileFinish\n  });\n\n  self._addTasks(taskList);\n} // 批量上传文件\n\n\nfunction uploadFiles(params, callback) {\n  var self = this; // 判断多大的文件使用分片上传\n\n  var SliceSize = params.SliceSize === undefined ? self.options.SliceSize : params.SliceSize; // 汇总返回进度\n\n  var TotalSize = 0;\n  var TotalFinish = 0;\n  var onTotalProgress = util.throttleOnProgress.call(self, TotalFinish, params.onProgress); // 汇总返回回调\n\n  var unFinishCount = params.files.length;\n  var _onTotalFileFinish = params.onFileFinish;\n  var resultList = Array(unFinishCount);\n\n  var onTotalFileFinish = function (err, data, options) {\n    onTotalProgress(null, true);\n    _onTotalFileFinish && _onTotalFileFinish(err, data, options);\n    resultList[options.Index] = {\n      options: options,\n      error: err,\n      data: data\n    };\n\n    if (--unFinishCount <= 0 && callback) {\n      callback(null, {\n        files: resultList\n      });\n    }\n  }; // 开始处理每个文件\n\n\n  var taskList = [];\n  util.each(params.files, function (fileParams, index) {\n    (function () {\n      // 对齐 nodejs 缩进\n      var Body = fileParams.Body;\n      var FileSize = Body.size || Body.length || 0;\n      var fileInfo = {\n        Index: index,\n        TaskId: ''\n      }; // 更新文件总大小\n\n      TotalSize += FileSize; // 整理 option，用于返回给回调\n\n      util.each(fileParams, function (v, k) {\n        if (typeof v !== 'object' && typeof v !== 'function') {\n          fileInfo[k] = v;\n        }\n      }); // 处理单个文件 TaskReady\n\n      var _onTaskReady = fileParams.onTaskReady;\n\n      var onTaskReady = function (tid) {\n        fileInfo.TaskId = tid;\n        _onTaskReady && _onTaskReady(tid);\n      };\n\n      fileParams.onTaskReady = onTaskReady; // 处理单个文件进度\n\n      var PreAddSize = 0;\n      var _onProgress = fileParams.onProgress;\n\n      var onProgress = function (info) {\n        TotalFinish = TotalFinish - PreAddSize + info.loaded;\n        PreAddSize = info.loaded;\n        _onProgress && _onProgress(info);\n        onTotalProgress({\n          loaded: TotalFinish,\n          total: TotalSize\n        });\n      };\n\n      fileParams.onProgress = onProgress; // 处理单个文件完成\n\n      var _onFileFinish = fileParams.onFileFinish;\n\n      var onFileFinish = function (err, data) {\n        _onFileFinish && _onFileFinish(err, data);\n        onTotalFileFinish && onTotalFileFinish(err, data, fileInfo);\n      }; // 添加上传任务\n\n\n      var api = FileSize > SliceSize ? 'sliceUploadFile' : 'putObject';\n      taskList.push({\n        api: api,\n        params: fileParams,\n        callback: onFileFinish\n      });\n    })();\n  });\n\n  self._addTasks(taskList);\n} // 分片复制文件\n\n\nfunction sliceCopyFile(params, callback) {\n  var ep = new EventProxy();\n  var self = this;\n  var Bucket = params.Bucket;\n  var Region = params.Region;\n  var Key = params.Key;\n  var CopySource = params.CopySource;\n  var m = util.getSourceParams.call(this, CopySource);\n\n  if (!m) {\n    callback(util.error(new Error('CopySource format error')));\n    return;\n  }\n\n  var SourceBucket = m.Bucket;\n  var SourceRegion = m.Region;\n  var SourceKey = decodeURIComponent(m.Key);\n  var CopySliceSize = params.CopySliceSize === undefined ? self.options.CopySliceSize : params.CopySliceSize;\n  CopySliceSize = Math.max(0, CopySliceSize);\n  var ChunkSize = params.CopyChunkSize || this.options.CopyChunkSize;\n  var ChunkParallel = this.options.CopyChunkParallelLimit;\n  var FinishSize = 0;\n  var FileSize;\n  var onProgress; // 分片复制完成，开始 multipartComplete 操作\n\n  ep.on('copy_slice_complete', function (UploadData) {\n    var metaHeaders = {};\n    util.each(params.Headers, function (val, k) {\n      if (k.toLowerCase().indexOf('x-cos-meta-') === 0) metaHeaders[k] = val;\n    });\n    var Parts = util.map(UploadData.PartList, function (item) {\n      return {\n        PartNumber: item.PartNumber,\n        ETag: item.ETag\n      };\n    });\n    self.multipartComplete({\n      Bucket: Bucket,\n      Region: Region,\n      Key: Key,\n      UploadId: UploadData.UploadId,\n      Parts: Parts\n    }, function (err, data) {\n      if (err) {\n        onProgress(null, true);\n        return callback(err);\n      }\n\n      onProgress({\n        loaded: FileSize,\n        total: FileSize\n      }, true);\n      callback(null, data);\n    });\n  });\n  ep.on('get_copy_data_finish', function (UploadData) {\n    Async.eachLimit(UploadData.PartList, ChunkParallel, function (SliceItem, asyncCallback) {\n      var PartNumber = SliceItem.PartNumber;\n      var CopySourceRange = SliceItem.CopySourceRange;\n      var currentSize = SliceItem.end - SliceItem.start;\n      copySliceItem.call(self, {\n        Bucket: Bucket,\n        Region: Region,\n        Key: Key,\n        CopySource: CopySource,\n        UploadId: UploadData.UploadId,\n        PartNumber: PartNumber,\n        CopySourceRange: CopySourceRange\n      }, function (err, data) {\n        if (err) return asyncCallback(err);\n        FinishSize += currentSize;\n        onProgress({\n          loaded: FinishSize,\n          total: FileSize\n        });\n        SliceItem.ETag = data.ETag;\n        asyncCallback(err || null, data);\n      });\n    }, function (err) {\n      if (err) {\n        onProgress(null, true);\n        return callback(err);\n      }\n\n      ep.emit('copy_slice_complete', UploadData);\n    });\n  });\n  ep.on('get_file_size_finish', function (SourceHeaders) {\n    // 控制分片大小\n    (function () {\n      var SIZE = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 1024 * 2, 1024 * 4, 1024 * 5];\n      var AutoChunkSize = 1024 * 1024;\n\n      for (var i = 0; i < SIZE.length; i++) {\n        AutoChunkSize = SIZE[i] * 1024 * 1024;\n        if (FileSize / AutoChunkSize <= self.options.MaxPartNumber) break;\n      }\n\n      params.ChunkSize = ChunkSize = Math.max(ChunkSize, AutoChunkSize);\n      var ChunkCount = Math.ceil(FileSize / ChunkSize);\n      var list = [];\n\n      for (var partNumber = 1; partNumber <= ChunkCount; partNumber++) {\n        var start = (partNumber - 1) * ChunkSize;\n        var end = partNumber * ChunkSize < FileSize ? partNumber * ChunkSize - 1 : FileSize - 1;\n        var item = {\n          PartNumber: partNumber,\n          start: start,\n          end: end,\n          CopySourceRange: \"bytes=\" + start + \"-\" + end\n        };\n        list.push(item);\n      }\n\n      params.PartList = list;\n    })();\n\n    var TargetHeader;\n\n    if (params.Headers['x-cos-metadata-directive'] === 'Replaced') {\n      TargetHeader = params.Headers;\n    } else {\n      TargetHeader = SourceHeaders;\n    }\n\n    TargetHeader['x-cos-storage-class'] = params.Headers['x-cos-storage-class'] || SourceHeaders['x-cos-storage-class'];\n    TargetHeader = util.clearKey(TargetHeader);\n    /**\n     * 对于归档存储的对象，如果未恢复副本，则不允许 Copy\n     */\n\n    if (SourceHeaders['x-cos-storage-class'] === 'ARCHIVE' || SourceHeaders['x-cos-storage-class'] === 'DEEP_ARCHIVE') {\n      var restoreHeader = SourceHeaders['x-cos-restore'];\n\n      if (!restoreHeader || restoreHeader === 'ongoing-request=\"true\"') {\n        callback(util.error(new Error('Unrestored archive object is not allowed to be copied')));\n        return;\n      }\n    }\n    /**\n     * 去除一些无用的头部，规避 multipartInit 出错\n     * 这些头部通常是在 putObjectCopy 时才使用\n     */\n\n\n    delete TargetHeader['x-cos-copy-source'];\n    delete TargetHeader['x-cos-metadata-directive'];\n    delete TargetHeader['x-cos-copy-source-If-Modified-Since'];\n    delete TargetHeader['x-cos-copy-source-If-Unmodified-Since'];\n    delete TargetHeader['x-cos-copy-source-If-Match'];\n    delete TargetHeader['x-cos-copy-source-If-None-Match'];\n    self.multipartInit({\n      Bucket: Bucket,\n      Region: Region,\n      Key: Key,\n      Headers: TargetHeader\n    }, function (err, data) {\n      if (err) return callback(err);\n      params.UploadId = data.UploadId;\n      ep.emit('get_copy_data_finish', params);\n    });\n  }); // 获取远端复制源文件的大小\n\n  self.headObject({\n    Bucket: SourceBucket,\n    Region: SourceRegion,\n    Key: SourceKey\n  }, function (err, data) {\n    if (err) {\n      if (err.statusCode && err.statusCode === 404) {\n        callback(util.error(err, {\n          ErrorStatus: SourceKey + ' Not Exist'\n        }));\n      } else {\n        callback(err);\n      }\n\n      return;\n    }\n\n    FileSize = params.FileSize = data.headers['content-length'];\n\n    if (FileSize === undefined || !FileSize) {\n      callback(util.error(new Error('get Content-Length error, please add \"Content-Length\" to CORS ExposeHeader setting.（ 获取Content-Length失败，请在CORS ExposeHeader设置中添加Content-Length，请参考文档：https://cloud.tencent.com/document/product/436/13318 ）')));\n      return;\n    }\n\n    onProgress = util.throttleOnProgress.call(self, FileSize, params.onProgress); // 开始上传\n\n    if (FileSize <= CopySliceSize) {\n      if (!params.Headers['x-cos-metadata-directive']) {\n        params.Headers['x-cos-metadata-directive'] = 'Copy';\n      }\n\n      self.putObjectCopy(params, function (err, data) {\n        if (err) {\n          onProgress(null, true);\n          return callback(err);\n        }\n\n        onProgress({\n          loaded: FileSize,\n          total: FileSize\n        }, true);\n        callback(err, data);\n      });\n    } else {\n      var resHeaders = data.headers;\n      var SourceHeaders = {\n        'Cache-Control': resHeaders['cache-control'],\n        'Content-Disposition': resHeaders['content-disposition'],\n        'Content-Encoding': resHeaders['content-encoding'],\n        'Content-Type': resHeaders['content-type'],\n        'Expires': resHeaders['expires'],\n        'x-cos-storage-class': resHeaders['x-cos-storage-class']\n      };\n      util.each(resHeaders, function (v, k) {\n        var metaPrefix = 'x-cos-meta-';\n\n        if (k.indexOf(metaPrefix) === 0 && k.length > metaPrefix.length) {\n          SourceHeaders[k] = v;\n        }\n      });\n      ep.emit('get_file_size_finish', SourceHeaders);\n    }\n  });\n} // 复制指定分片\n\n\nfunction copySliceItem(params, callback) {\n  var TaskId = params.TaskId;\n  var Bucket = params.Bucket;\n  var Region = params.Region;\n  var Key = params.Key;\n  var CopySource = params.CopySource;\n  var UploadId = params.UploadId;\n  var PartNumber = params.PartNumber * 1;\n  var CopySourceRange = params.CopySourceRange;\n  var ChunkRetryTimes = this.options.ChunkRetryTimes + 1;\n  var self = this;\n  Async.retry(ChunkRetryTimes, function (tryCallback) {\n    self.uploadPartCopy({\n      TaskId: TaskId,\n      Bucket: Bucket,\n      Region: Region,\n      Key: Key,\n      CopySource: CopySource,\n      UploadId: UploadId,\n      PartNumber: PartNumber,\n      CopySourceRange: CopySourceRange\n    }, function (err, data) {\n      tryCallback(err || null, data);\n    });\n  }, function (err, data) {\n    return callback(err, data);\n  });\n}\n\nvar API_MAP = {\n  sliceUploadFile: sliceUploadFile,\n  abortUploadTask: abortUploadTask,\n  uploadFile: uploadFile,\n  uploadFiles: uploadFiles,\n  sliceCopyFile: sliceCopyFile\n};\n\nmodule.exports.init = function (COS, task) {\n  task.transferToTaskMethod(API_MAP, 'sliceUploadFile');\n  util.each(API_MAP, function (fn, apiName) {\n    COS.prototype[apiName] = util.apiWrapper(apiName, fn);\n  });\n};","map":{"version":3,"names":["session","require","Async","EventProxy","util","sliceUploadFile","params","callback","self","ep","TaskId","Bucket","Region","Key","Body","ChunkSize","SliceSize","options","AsyncLimit","StorageClass","ServerSideEncryption","FileSize","onProgress","onHashProgress","on","err","_isRunningTask","UploadId","UploadData","UploadCompleteData","_UploadCompleteData","extend","metaHeaders","each","Headers","val","k","shortKey","toLowerCase","indexOf","uploadSliceComplete","call","SliceList","data","removeUsing","emit","removeUploadId","loaded","total","uuid","getFileId","saveUploadId","UploadIdCacheLimit","setUsing","uploadSliceList","throttleOnProgress","_params","getUploadIdAndPartList","PartList","ContentLength","item","key","SIZE","AutoChunkSize","i","length","MaxPartNumber","Math","max","SkipTask","putObject","ETagMap","SliceCount","ceil","FinishSliceCount","FinishSize","getChunkETag","PartNumber","start","end","min","ETag","Size","fileSlice","chunkItem","getFileMd5","md5","error","isAvailableUploadList","PartCount","PartSliceSize","next","index","Part","chunk","errData","map","list","Uploaded","push","Query","clone","headers","multipartInit","Error","UploadIdList","reverse","eachLimit","asyncCallback","using","wholeMultipartListPart","PartListData","forEach","isAvailable","AvailableUploadData","RemoteUploadIdList","LocalUploadIdList","getUploadIdList","isInArray","wholeMultipartList","filter","UploadList","toUpperCase","UploadID","sendParams","Prefix","multipartList","apply","Upload","IsTruncated","KeyMarker","NextKeyMarker","UploadIdMarker","NextUploadIdMarker","multipartListPart","PartNumberMarker","NextPartNumberMarker","cb","ChunkParallel","ChunkParallelLimit","needUploadSlices","SliceItem","currentSize","preAddSize","uploadSliceItem","FileBody","ChunkRetryTimes","headersWhiteList","v","PartItem","retry","tryCallback","multipartUpload","Parts","multipartComplete","abortUploadTask","Level","AbortArray","abortUploadTaskArray","resultList","Array","AbortItem","nextItem","eachIndex","KeyNotMatch","multipartAbort","task","successList","errorList","len","uploadFile","undefined","taskList","size","fileInfo","_onTaskReady","onTaskReady","tid","_onFileFinish","onFileFinish","api","_addTasks","uploadFiles","TotalSize","TotalFinish","onTotalProgress","unFinishCount","files","_onTotalFileFinish","onTotalFileFinish","Index","fileParams","PreAddSize","_onProgress","info","sliceCopyFile","CopySource","m","getSourceParams","SourceBucket","SourceRegion","SourceKey","decodeURIComponent","CopySliceSize","CopyChunkSize","CopyChunkParallelLimit","CopySourceRange","copySliceItem","SourceHeaders","ChunkCount","partNumber","TargetHeader","clearKey","restoreHeader","headObject","statusCode","ErrorStatus","putObjectCopy","resHeaders","metaPrefix","uploadPartCopy","API_MAP","module","exports","init","COS","transferToTaskMethod","fn","apiName","prototype","apiWrapper"],"sources":["/Users/yzbaoo/Desktop/huohua/ilc-web-packages/node_modules/cos-js-sdk-v5/src/advance.js"],"sourcesContent":["var session = require('./session');\nvar Async = require('./async');\nvar EventProxy = require('./event').EventProxy;\nvar util = require('./util');\n\n// 文件分块上传全过程，暴露的分块上传接口\nfunction sliceUploadFile(params, callback) {\n    var self = this;\n    var ep = new EventProxy();\n    var TaskId = params.TaskId;\n    var Bucket = params.Bucket;\n    var Region = params.Region;\n    var Key = params.Key;\n    var Body = params.Body;\n    var ChunkSize = params.ChunkSize || params.SliceSize || self.options.ChunkSize;\n    var AsyncLimit = params.AsyncLimit;\n    var StorageClass = params.StorageClass;\n    var ServerSideEncryption = params.ServerSideEncryption;\n    var FileSize;\n\n    var onProgress;\n    var onHashProgress = params.onHashProgress;\n\n    // 上传过程中出现错误，返回错误\n    ep.on('error', function (err) {\n        if (!self._isRunningTask(TaskId)) return;\n        err.UploadId = params.UploadData.UploadId || '';\n        return callback(err);\n    });\n\n    // 上传分块完成，开始 uploadSliceComplete 操作\n    ep.on('upload_complete', function (UploadCompleteData) {\n        var _UploadCompleteData = util.extend({\n          UploadId: params.UploadData.UploadId || ''\n        }, UploadCompleteData);\n        callback(null, _UploadCompleteData);\n    });\n\n    // 上传分块完成，开始 uploadSliceComplete 操作\n    ep.on('upload_slice_complete', function (UploadData) {\n        var metaHeaders = {};\n        util.each(params.Headers, function (val, k) {\n            var shortKey = k.toLowerCase();\n            if (shortKey.indexOf('x-cos-meta-') === 0 || shortKey === 'pic-operations') metaHeaders[k] = val;\n        });\n        uploadSliceComplete.call(self, {\n            Bucket: Bucket,\n            Region: Region,\n            Key: Key,\n            UploadId: UploadData.UploadId,\n            SliceList: UploadData.SliceList,\n            Headers: metaHeaders,\n        }, function (err, data) {\n            if (!self._isRunningTask(TaskId)) return;\n            session.removeUsing(UploadData.UploadId);\n            if (err) {\n                onProgress(null, true);\n                return ep.emit('error', err);\n            }\n            session.removeUploadId.call(self, UploadData.UploadId);\n            onProgress({loaded: FileSize, total: FileSize}, true);\n            ep.emit('upload_complete', data);\n        });\n    });\n\n    // 获取 UploadId 完成，开始上传每个分片\n    ep.on('get_upload_data_finish', function (UploadData) {\n\n        // 处理 UploadId 缓存\n        var uuid = session.getFileId(Body, params.ChunkSize, Bucket, Key);\n        uuid && session.saveUploadId.call(self, uuid, UploadData.UploadId, self.options.UploadIdCacheLimit); // 缓存 UploadId\n        session.setUsing(UploadData.UploadId); // 标记 UploadId 为正在使用\n\n        // 获取 UploadId\n        onProgress(null, true); // 任务状态开始 uploading\n        uploadSliceList.call(self, {\n            TaskId: TaskId,\n            Bucket: Bucket,\n            Region: Region,\n            Key: Key,\n            Body: Body,\n            FileSize: FileSize,\n            SliceSize: ChunkSize,\n            AsyncLimit: AsyncLimit,\n            ServerSideEncryption: ServerSideEncryption,\n            UploadData: UploadData,\n            Headers: params.Headers,\n            onProgress: onProgress\n        }, function (err, data) {\n            if (!self._isRunningTask(TaskId)) return;\n            if (err) {\n                onProgress(null, true);\n                return ep.emit('error', err);\n            }\n            ep.emit('upload_slice_complete', data);\n        });\n    });\n\n    // 开始获取文件 UploadId，里面会视情况计算 ETag，并比对，保证文件一致性，也优化上传\n    ep.on('get_file_size_finish', function () {\n\n        onProgress = util.throttleOnProgress.call(self, FileSize, params.onProgress);\n\n        if (params.UploadData.UploadId) {\n            ep.emit('get_upload_data_finish', params.UploadData);\n        } else {\n            var _params = util.extend({\n                TaskId: TaskId,\n                Bucket: Bucket,\n                Region: Region,\n                Key: Key,\n                Headers: params.Headers,\n                StorageClass: StorageClass,\n                Body: Body,\n                FileSize: FileSize,\n                SliceSize: ChunkSize,\n                onHashProgress: onHashProgress,\n            }, params);\n            getUploadIdAndPartList.call(self, _params, function (err, UploadData) {\n                if (!self._isRunningTask(TaskId)) return;\n                if (err) return ep.emit('error', err);\n                params.UploadData.UploadId = UploadData.UploadId;\n                params.UploadData.PartList = UploadData.PartList;\n                ep.emit('get_upload_data_finish', params.UploadData);\n            });\n        }\n    });\n\n    // 获取上传文件大小\n    FileSize = params.ContentLength;\n    delete params.ContentLength;\n    !params.Headers && (params.Headers = {});\n    util.each(params.Headers, function (item, key) {\n        if (key.toLowerCase() === 'content-length') {\n            delete params.Headers[key];\n        }\n    });\n\n    // 控制分片大小\n    (function () {\n        var SIZE = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 1024 * 2, 1024 * 4, 1024 * 5];\n        var AutoChunkSize = 1024 * 1024;\n        for (var i = 0; i < SIZE.length; i++) {\n            AutoChunkSize = SIZE[i] * 1024 * 1024;\n            if (FileSize / AutoChunkSize <= self.options.MaxPartNumber) break;\n        }\n        params.ChunkSize = params.SliceSize = ChunkSize = Math.max(ChunkSize, AutoChunkSize);\n    })();\n\n    // 开始上传\n    if (FileSize === 0) {\n        params.Body = '';\n        params.ContentLength = 0;\n        params.SkipTask = true;\n        self.putObject(params, callback);\n    } else {\n        ep.emit('get_file_size_finish');\n    }\n\n}\n\n// 获取上传任务的 UploadId\nfunction getUploadIdAndPartList(params, callback) {\n    var TaskId = params.TaskId;\n    var Bucket = params.Bucket;\n    var Region = params.Region;\n    var Key = params.Key;\n    var StorageClass = params.StorageClass;\n    var self = this;\n\n    // 计算 ETag\n    var ETagMap = {};\n    var FileSize = params.FileSize;\n    var SliceSize = params.SliceSize;\n    var SliceCount = Math.ceil(FileSize / SliceSize);\n    var FinishSliceCount = 0;\n    var FinishSize = 0;\n    var onHashProgress = util.throttleOnProgress.call(self, FileSize, params.onHashProgress);\n    var getChunkETag = function (PartNumber, callback) {\n        var start = SliceSize * (PartNumber - 1);\n        var end = Math.min(start + SliceSize, FileSize);\n        var ChunkSize = end - start;\n\n        if (ETagMap[PartNumber]) {\n            callback(null, {\n                PartNumber: PartNumber,\n                ETag: ETagMap[PartNumber],\n                Size: ChunkSize\n            });\n        } else {\n            util.fileSlice(params.Body, start, end, false, function (chunkItem) {\n                util.getFileMd5(chunkItem, function (err, md5) {\n                    if (err) return callback(util.error(err));\n                    var ETag = '\"' + md5 + '\"';\n                    ETagMap[PartNumber] = ETag;\n                    FinishSliceCount += 1;\n                    FinishSize += ChunkSize;\n                    onHashProgress({loaded: FinishSize, total: FileSize});\n                    callback(null, {\n                        PartNumber: PartNumber,\n                        ETag: ETag,\n                        Size: ChunkSize\n                    });\n                });\n            });\n        }\n    };\n\n    // 通过和文件的 md5 对比，判断 UploadId 是否可用\n    var isAvailableUploadList = function (PartList, callback) {\n        var PartCount = PartList.length;\n        // 如果没有分片，通过\n        if (PartCount === 0) {\n            return callback(null, true);\n        }\n        // 检查分片数量\n        if (PartCount > SliceCount) {\n            return callback(null, false);\n        }\n        // 检查分片大小\n        if (PartCount > 1) {\n            var PartSliceSize = Math.max(PartList[0].Size, PartList[1].Size);\n            if (PartSliceSize !== SliceSize) {\n                return callback(null, false);\n            }\n        }\n        // 逐个分片计算并检查 ETag 是否一致\n        var next = function (index) {\n            if (index < PartCount) {\n                var Part = PartList[index];\n                getChunkETag(Part.PartNumber, function (err, chunk) {\n                    if (chunk && chunk.ETag === Part.ETag && chunk.Size === Part.Size) {\n                        next(index + 1);\n                    } else {\n                        callback(null, false);\n                    }\n                });\n            } else {\n                callback(null, true);\n            }\n        };\n        next(0);\n    };\n\n    var ep = new EventProxy();\n    ep.on('error', function (errData) {\n        if (!self._isRunningTask(TaskId)) return;\n        return callback(errData);\n    });\n\n    // 存在 UploadId\n    ep.on('upload_id_available', function (UploadData) {\n        // 转换成 map\n        var map = {};\n        var list = [];\n        util.each(UploadData.PartList, function (item) {\n            map[item.PartNumber] = item;\n        });\n        for (var PartNumber = 1; PartNumber <= SliceCount; PartNumber++) {\n            var item = map[PartNumber];\n            if (item) {\n                item.PartNumber = PartNumber;\n                item.Uploaded = true;\n            } else {\n                item = {\n                    PartNumber: PartNumber,\n                    ETag: null,\n                    Uploaded: false\n                };\n            }\n            list.push(item);\n        }\n        UploadData.PartList = list;\n        callback(null, UploadData);\n    });\n\n    // 不存在 UploadId, 初始化生成 UploadId\n    ep.on('no_available_upload_id', function () {\n        if (!self._isRunningTask(TaskId)) return;\n        var _params = util.extend({\n            Bucket: Bucket,\n            Region: Region,\n            Key: Key,\n            Query: util.clone(params.Query),\n            StorageClass: StorageClass,\n            Body: params.Body,\n        }, params);\n        var headers = util.clone(params.Headers)\n        delete headers['x-cos-mime-limit'];\n        _params.Headers = headers;\n        self.multipartInit(_params, function (err, data) {\n            if (!self._isRunningTask(TaskId)) return;\n            if (err) return ep.emit('error', err);\n            var UploadId = data.UploadId;\n            if (!UploadId) {\n                return callback(util.error(new Error('no such upload id')));\n            }\n            ep.emit('upload_id_available', {UploadId: UploadId, PartList: []});\n        });\n    });\n\n    // 如果已存在 UploadId，找一个可以用的 UploadId\n    ep.on('has_and_check_upload_id', function (UploadIdList) {\n        // 串行地，找一个内容一致的 UploadId\n        UploadIdList = UploadIdList.reverse();\n        Async.eachLimit(UploadIdList, 1, function (UploadId, asyncCallback) {\n            if (!self._isRunningTask(TaskId)) return;\n            // 如果正在上传，跳过\n            if (session.using[UploadId]) {\n                asyncCallback(); // 检查下一个 UploadId\n                return;\n            }\n            // 判断 UploadId 是否可用\n            wholeMultipartListPart.call(self, {\n                Bucket: Bucket,\n                Region: Region,\n                Key: Key,\n                UploadId: UploadId,\n            }, function (err, PartListData) {\n                if (!self._isRunningTask(TaskId)) return;\n                if (err) {\n                    session.removeUsing(UploadId);\n                    return ep.emit('error', err);\n                }\n                var PartList = PartListData.PartList;\n                PartList.forEach(function (item) {\n                    item.PartNumber *= 1;\n                    item.Size *= 1;\n                    item.ETag = item.ETag || '';\n                });\n                isAvailableUploadList(PartList, function (err, isAvailable) {\n                    if (!self._isRunningTask(TaskId)) return;\n                    if (err) return ep.emit('error', err);\n                    if (isAvailable) {\n                        asyncCallback({\n                            UploadId: UploadId,\n                            PartList: PartList\n                        }); // 马上结束\n                    } else {\n                        asyncCallback(); // 检查下一个 UploadId\n                    }\n                });\n            });\n        }, function (AvailableUploadData) {\n            if (!self._isRunningTask(TaskId)) return;\n            onHashProgress(null, true);\n            if (AvailableUploadData && AvailableUploadData.UploadId) {\n                ep.emit('upload_id_available', AvailableUploadData);\n            } else {\n                ep.emit('no_available_upload_id');\n            }\n        });\n    });\n\n    // 在本地缓存找可用的 UploadId\n    ep.on('seek_local_avail_upload_id', function (RemoteUploadIdList) {\n        // 在本地找可用的 UploadId\n        var uuid = session.getFileId(params.Body, params.ChunkSize, Bucket, Key);\n        var LocalUploadIdList = session.getUploadIdList.call(self, uuid);\n        if (!uuid || !LocalUploadIdList) {\n            ep.emit('has_and_check_upload_id', RemoteUploadIdList);\n            return;\n        }\n        var next = function (index) {\n            // 如果本地找不到可用 UploadId，再一个个遍历校验远端\n            if (index >= LocalUploadIdList.length) {\n                ep.emit('has_and_check_upload_id', RemoteUploadIdList);\n                return;\n            }\n            var UploadId = LocalUploadIdList[index];\n            // 如果不在远端 UploadId 列表里，跳过并删除\n            if (!util.isInArray(RemoteUploadIdList, UploadId)) {\n                session.removeUploadId.call(self, UploadId);\n                next(index + 1);\n                return;\n            }\n            // 如果正在上传，跳过\n            if (session.using[UploadId]) {\n                next(index + 1);\n                return;\n            }\n            // 判断 UploadId 是否存在线上\n            wholeMultipartListPart.call(self, {\n                Bucket: Bucket,\n                Region: Region,\n                Key: Key,\n                UploadId: UploadId,\n            }, function (err, PartListData) {\n                if (!self._isRunningTask(TaskId)) return;\n                if (err) {\n                    // 如果 UploadId 获取会出错，跳过并删除\n                    session.removeUploadId.call(self, UploadId);\n                    next(index + 1);\n                } else {\n                    // 找到可用 UploadId\n                    ep.emit('upload_id_available', {\n                        UploadId: UploadId,\n                        PartList: PartListData.PartList,\n                    });\n                }\n            });\n        };\n        next(0);\n    });\n\n    // 获取线上 UploadId 列表\n    ep.on('get_remote_upload_id_list', function () {\n        // 获取符合条件的 UploadId 列表，因为同一个文件可以有多个上传任务。\n        wholeMultipartList.call(self, {\n            Bucket: Bucket,\n            Region: Region,\n            Key: Key,\n        }, function (err, data) {\n            if (!self._isRunningTask(TaskId)) return;\n            if (err) return ep.emit('error', err);\n            // 整理远端 UploadId 列表\n            var RemoteUploadIdList = util.filter(data.UploadList, function (item) {\n                return item.Key === Key && (!StorageClass || item.StorageClass.toUpperCase() === StorageClass.toUpperCase());\n            }).reverse().map(function (item) {\n                return item.UploadId || item.UploadID;\n            });\n            if (RemoteUploadIdList.length) {\n                ep.emit('seek_local_avail_upload_id', RemoteUploadIdList);\n            } else {\n                // 远端没有 UploadId，清理缓存的 UploadId\n                var uuid = session.getFileId(params.Body, params.ChunkSize, Bucket, Key), LocalUploadIdList;\n                if (uuid && (LocalUploadIdList = session.getUploadIdList.call(self, uuid))) {\n                    util.each(LocalUploadIdList, function (UploadId) {\n                        session.removeUploadId.call(self, UploadId);\n                    });\n                }\n                ep.emit('no_available_upload_id');\n            }\n        });\n    });\n\n    // 开始找可用 UploadId\n    ep.emit('get_remote_upload_id_list');\n\n}\n\n// 获取符合条件的全部上传任务 (条件包括 Bucket, Region, Prefix)\nfunction wholeMultipartList(params, callback) {\n    var self = this;\n    var UploadList = [];\n    var sendParams = {\n        Bucket: params.Bucket,\n        Region: params.Region,\n        Prefix: params.Key\n    };\n    var next = function () {\n        self.multipartList(sendParams, function (err, data) {\n            if (err) return callback(err);\n            UploadList.push.apply(UploadList, data.Upload || []);\n            if (data.IsTruncated === 'true') { // 列表不完整\n                sendParams.KeyMarker = data.NextKeyMarker;\n                sendParams.UploadIdMarker = data.NextUploadIdMarker;\n                next();\n            } else {\n                callback(null, {UploadList: UploadList});\n            }\n        });\n    };\n    next();\n}\n\n// 获取指定上传任务的分块列表\nfunction wholeMultipartListPart(params, callback) {\n    var self = this;\n    var PartList = [];\n    var sendParams = {\n        Bucket: params.Bucket,\n        Region: params.Region,\n        Key: params.Key,\n        UploadId: params.UploadId\n    };\n    var next = function () {\n        self.multipartListPart(sendParams, function (err, data) {\n            if (err) return callback(err);\n            PartList.push.apply(PartList, data.Part || []);\n            if (data.IsTruncated === 'true') { // 列表不完整\n                sendParams.PartNumberMarker = data.NextPartNumberMarker;\n                next();\n            } else {\n                callback(null, {PartList: PartList});\n            }\n        });\n    };\n    next();\n}\n\n// 上传文件分块，包括\n/*\n UploadId (上传任务编号)\n AsyncLimit (并发量)，\n SliceList (上传的分块数组)，\n FilePath (本地文件的位置)，\n SliceSize (文件分块大小)\n FileSize (文件大小)\n onProgress (上传成功之后的回调函数)\n */\nfunction uploadSliceList(params, cb) {\n    var self = this;\n    var TaskId = params.TaskId;\n    var Bucket = params.Bucket;\n    var Region = params.Region;\n    var Key = params.Key;\n    var UploadData = params.UploadData;\n    var FileSize = params.FileSize;\n    var SliceSize = params.SliceSize;\n    var ChunkParallel = Math.min(params.AsyncLimit || self.options.ChunkParallelLimit || 1, 256);\n    var Body = params.Body;\n    var SliceCount = Math.ceil(FileSize / SliceSize);\n    var FinishSize = 0;\n    var ServerSideEncryption = params.ServerSideEncryption;\n    var Headers = params.Headers;\n    var needUploadSlices = util.filter(UploadData.PartList, function (SliceItem) {\n        if (SliceItem['Uploaded']) {\n            FinishSize += SliceItem['PartNumber'] >= SliceCount ? (FileSize % SliceSize || SliceSize) : SliceSize;\n        }\n        return !SliceItem['Uploaded'];\n    });\n    var onProgress = params.onProgress;\n\n    Async.eachLimit(needUploadSlices, ChunkParallel, function (SliceItem, asyncCallback) {\n        if (!self._isRunningTask(TaskId)) return;\n        var PartNumber = SliceItem['PartNumber'];\n        var currentSize = Math.min(FileSize, SliceItem['PartNumber'] * SliceSize) - (SliceItem['PartNumber'] - 1) * SliceSize;\n        var preAddSize = 0;\n        uploadSliceItem.call(self, {\n            TaskId: TaskId,\n            Bucket: Bucket,\n            Region: Region,\n            Key: Key,\n            SliceSize: SliceSize,\n            FileSize: FileSize,\n            PartNumber: PartNumber,\n            ServerSideEncryption: ServerSideEncryption,\n            Body: Body,\n            UploadData: UploadData,\n            Headers: Headers,\n            onProgress: function (data) {\n                FinishSize += data.loaded - preAddSize;\n                preAddSize = data.loaded;\n                onProgress({loaded: FinishSize, total: FileSize});\n            },\n        }, function (err, data) {\n            if (!self._isRunningTask(TaskId)) return;\n            if (!err && !data.ETag) err = 'get ETag error, please add \"ETag\" to CORS ExposeHeader setting.( 获取ETag失败，请在CORS ExposeHeader设置中添加ETag，请参考文档：https://cloud.tencent.com/document/product/436/13318 )';\n            if (err) {\n                FinishSize -= preAddSize;\n            } else {\n                FinishSize += currentSize - preAddSize;\n                SliceItem.ETag = data.ETag;\n            }\n            onProgress({loaded: FinishSize, total: FileSize});\n            asyncCallback(err || null, data);\n        });\n    }, function (err) {\n        if (!self._isRunningTask(TaskId)) return;\n        if (err) return cb(err);\n        cb(null, {\n            UploadId: UploadData.UploadId,\n            SliceList: UploadData.PartList\n        });\n    });\n}\n\n// 上传指定分片\nfunction uploadSliceItem(params, callback) {\n    var self = this;\n    var TaskId = params.TaskId;\n    var Bucket = params.Bucket;\n    var Region = params.Region;\n    var Key = params.Key;\n    var FileSize = params.FileSize;\n    var FileBody = params.Body;\n    var PartNumber = params.PartNumber * 1;\n    var SliceSize = params.SliceSize;\n    var ServerSideEncryption = params.ServerSideEncryption;\n    var UploadData = params.UploadData;\n    var Headers = params.Headers || {};\n    var ChunkRetryTimes = self.options.ChunkRetryTimes + 1;\n\n    var start = SliceSize * (PartNumber - 1);\n\n    var ContentLength = SliceSize;\n\n    var end = start + SliceSize;\n\n    if (end > FileSize) {\n        end = FileSize;\n        ContentLength = end - start;\n    }\n\n    var headersWhiteList = ['x-cos-traffic-limit', 'x-cos-mime-limit'];\n    var headers = {};\n    util.each(Headers, function(v, k) {\n        if (headersWhiteList.indexOf(k) > -1) {\n            headers[k] = v;\n        }\n    });\n\n    var PartItem = UploadData.PartList[PartNumber - 1];\n    Async.retry(ChunkRetryTimes, function (tryCallback) {\n        if (!self._isRunningTask(TaskId)) return;\n        util.fileSlice(FileBody, start, end, true, function (Body) {\n            self.multipartUpload({\n                TaskId: TaskId,\n                Bucket: Bucket,\n                Region: Region,\n                Key: Key,\n                ContentLength: ContentLength,\n                PartNumber: PartNumber,\n                UploadId: UploadData.UploadId,\n                ServerSideEncryption: ServerSideEncryption,\n                Body: Body,\n                Headers: headers,\n                onProgress: params.onProgress,\n            }, function (err, data) {\n                if (!self._isRunningTask(TaskId)) return;\n                if (err) return tryCallback(err);\n                PartItem.Uploaded = true;\n                return tryCallback(null, data);\n            });\n        });\n    }, function (err, data) {\n        if (!self._isRunningTask(TaskId)) return;\n        return callback(err, data);\n    });\n}\n\n\n// 完成分块上传\nfunction uploadSliceComplete(params, callback) {\n    var Bucket = params.Bucket;\n    var Region = params.Region;\n    var Key = params.Key;\n    var UploadId = params.UploadId;\n    var SliceList = params.SliceList;\n    var self = this;\n    var ChunkRetryTimes = this.options.ChunkRetryTimes + 1;\n    var Headers = params.Headers;\n    var Parts = SliceList.map(function (item) {\n        return {\n            PartNumber: item.PartNumber,\n            ETag: item.ETag\n        };\n    });\n    // 完成上传的请求也做重试\n    Async.retry(ChunkRetryTimes, function (tryCallback) {\n        self.multipartComplete({\n            Bucket: Bucket,\n            Region: Region,\n            Key: Key,\n            UploadId: UploadId,\n            Parts: Parts,\n            Headers: Headers,\n        }, tryCallback);\n    }, function (err, data) {\n        callback(err, data);\n    });\n}\n\n// 抛弃分块上传任务\n/*\n AsyncLimit (抛弃上传任务的并发量)，\n UploadId (上传任务的编号，当 Level 为 task 时候需要)\n Level (抛弃分块上传任务的级别，task : 抛弃指定的上传任务，file ： 抛弃指定的文件对应的上传任务，其他值 ：抛弃指定Bucket 的全部上传任务)\n */\nfunction abortUploadTask(params, callback) {\n    var Bucket = params.Bucket;\n    var Region = params.Region;\n    var Key = params.Key;\n    var UploadId = params.UploadId;\n    var Level = params.Level || 'task';\n    var AsyncLimit = params.AsyncLimit;\n    var self = this;\n\n    var ep = new EventProxy();\n\n    ep.on('error', function (errData) {\n        return callback(errData);\n    });\n\n    // 已经获取到需要抛弃的任务列表\n    ep.on('get_abort_array', function (AbortArray) {\n        abortUploadTaskArray.call(self, {\n            Bucket: Bucket,\n            Region: Region,\n            Key: Key,\n            Headers: params.Headers,\n            AsyncLimit: AsyncLimit,\n            AbortArray: AbortArray\n        }, callback);\n    });\n\n    if (Level === 'bucket') {\n        // Bucket 级别的任务抛弃，抛弃该 Bucket 下的全部上传任务\n        wholeMultipartList.call(self, {\n            Bucket: Bucket,\n            Region: Region\n        }, function (err, data) {\n            if (err) return callback(err);\n            ep.emit('get_abort_array', data.UploadList || []);\n        });\n    } else if (Level === 'file') {\n        // 文件级别的任务抛弃，抛弃该文件的全部上传任务\n        if (!Key) return callback(util.error(new Error('abort_upload_task_no_key')));\n        wholeMultipartList.call(self, {\n            Bucket: Bucket,\n            Region: Region,\n            Key: Key\n        }, function (err, data) {\n            if (err) return callback(err);\n            ep.emit('get_abort_array', data.UploadList || []);\n        });\n    } else if (Level === 'task') {\n        // 单个任务级别的任务抛弃，抛弃指定 UploadId 的上传任务\n        if (!UploadId) return callback(util.error(new Error('abort_upload_task_no_id')));\n        if (!Key) return callback(util.error(new Error('abort_upload_task_no_key')));\n        ep.emit('get_abort_array', [{\n            Key: Key,\n            UploadId: UploadId\n        }]);\n    } else {\n        return callback(util.error(new Error('abort_unknown_level')));\n    }\n}\n\n// 批量抛弃分块上传任务\nfunction abortUploadTaskArray(params, callback) {\n\n    var Bucket = params.Bucket;\n    var Region = params.Region;\n    var Key = params.Key;\n    var AbortArray = params.AbortArray;\n    var AsyncLimit = params.AsyncLimit || 1;\n    var self = this;\n\n    var index = 0;\n    var resultList = new Array(AbortArray.length);\n    Async.eachLimit(AbortArray, AsyncLimit, function (AbortItem, nextItem) {\n        var eachIndex = index;\n        if (Key && Key !== AbortItem.Key) {\n            resultList[eachIndex] = {error: {KeyNotMatch: true}};\n            nextItem(null);\n            return;\n        }\n        var UploadId = AbortItem.UploadId || AbortItem.UploadID;\n\n        self.multipartAbort({\n            Bucket: Bucket,\n            Region: Region,\n            Key: AbortItem.Key,\n            Headers: params.Headers,\n            UploadId: UploadId\n        }, function (err) {\n            var task = {\n                Bucket: Bucket,\n                Region: Region,\n                Key: AbortItem.Key,\n                UploadId: UploadId\n            };\n            resultList[eachIndex] = {error: err, task: task};\n            nextItem(null);\n        });\n        index++;\n\n    }, function (err) {\n        if (err) return callback(err);\n\n        var successList = [];\n        var errorList = [];\n\n        for (var i = 0, len = resultList.length; i < len; i++) {\n            var item = resultList[i];\n            if (item['task']) {\n                if (item['error']) {\n                    errorList.push(item['task']);\n                } else {\n                    successList.push(item['task']);\n                }\n            }\n        }\n\n        return callback(null, {\n            successList: successList,\n            errorList: errorList\n        });\n    });\n}\n\n// 高级上传\nfunction uploadFile(params, callback) {\n    var self = this;\n\n    // 判断多大的文件使用分片上传\n    var SliceSize = params.SliceSize === undefined ? self.options.SliceSize : params.SliceSize;\n\n    var taskList = [];\n\n    var Body = params.Body;\n    var FileSize = Body.size || Body.length || 0;\n    var fileInfo = {TaskId: ''};\n\n    // 整理 option，用于返回给回调\n    util.each(params, function (v, k) {\n        if (typeof v !== 'object' && typeof v !== 'function') {\n            fileInfo[k] = v;\n        }\n    });\n\n    // 处理文件 TaskReady\n    var _onTaskReady = params.onTaskReady;\n    var onTaskReady = function (tid) {\n        fileInfo.TaskId = tid;\n        _onTaskReady && _onTaskReady(tid);\n    };\n    params.onTaskReady = onTaskReady;\n\n    // 处理文件完成\n    var _onFileFinish = params.onFileFinish;\n    var onFileFinish = function (err, data) {\n        _onFileFinish && _onFileFinish(err, data, fileInfo);\n        callback && callback(err, data);\n    };\n\n    // 添加上传任务,超过阈值使用分块上传，小于等于则简单上传\n    var api = FileSize > SliceSize ? 'sliceUploadFile' : 'putObject';\n    taskList.push({\n        api: api,\n        params: params,\n        callback: onFileFinish,\n    });\n\n    self._addTasks(taskList);\n}\n\n// 批量上传文件\nfunction uploadFiles(params, callback) {\n    var self = this;\n\n    // 判断多大的文件使用分片上传\n    var SliceSize = params.SliceSize === undefined ? self.options.SliceSize : params.SliceSize;\n\n    // 汇总返回进度\n    var TotalSize = 0;\n    var TotalFinish = 0;\n    var onTotalProgress = util.throttleOnProgress.call(self, TotalFinish, params.onProgress);\n\n    // 汇总返回回调\n    var unFinishCount = params.files.length;\n    var _onTotalFileFinish = params.onFileFinish;\n    var resultList = Array(unFinishCount);\n    var onTotalFileFinish = function (err, data, options) {\n        onTotalProgress(null, true);\n        _onTotalFileFinish && _onTotalFileFinish(err, data, options);\n        resultList[options.Index] = {\n            options: options,\n            error: err,\n            data: data\n        };\n        if (--unFinishCount <= 0 && callback) {\n            callback(null, {files: resultList});\n        }\n    };\n\n    // 开始处理每个文件\n    var taskList = [];\n    util.each(params.files, function (fileParams, index) {\n        (function () { // 对齐 nodejs 缩进\n\n            var Body = fileParams.Body;\n            var FileSize = Body.size || Body.length || 0;\n            var fileInfo = {Index: index, TaskId: ''};\n\n            // 更新文件总大小\n            TotalSize += FileSize;\n\n            // 整理 option，用于返回给回调\n            util.each(fileParams, function (v, k) {\n                if (typeof v !== 'object' && typeof v !== 'function') {\n                    fileInfo[k] = v;\n                }\n            });\n\n            // 处理单个文件 TaskReady\n            var _onTaskReady = fileParams.onTaskReady;\n            var onTaskReady = function (tid) {\n                fileInfo.TaskId = tid;\n                _onTaskReady && _onTaskReady(tid);\n            };\n            fileParams.onTaskReady = onTaskReady;\n\n            // 处理单个文件进度\n            var PreAddSize = 0;\n            var _onProgress = fileParams.onProgress;\n            var onProgress = function (info) {\n                TotalFinish = TotalFinish - PreAddSize + info.loaded;\n                PreAddSize = info.loaded;\n                _onProgress && _onProgress(info);\n                onTotalProgress({loaded: TotalFinish, total: TotalSize});\n            };\n            fileParams.onProgress = onProgress;\n\n            // 处理单个文件完成\n            var _onFileFinish = fileParams.onFileFinish;\n            var onFileFinish = function (err, data) {\n                _onFileFinish && _onFileFinish(err, data);\n                onTotalFileFinish && onTotalFileFinish(err, data, fileInfo);\n            };\n\n            // 添加上传任务\n            var api = FileSize > SliceSize ? 'sliceUploadFile' : 'putObject';\n            taskList.push({\n                api: api,\n                params: fileParams,\n                callback: onFileFinish,\n            });\n        })();\n    });\n    self._addTasks(taskList);\n}\n\n// 分片复制文件\nfunction sliceCopyFile(params, callback) {\n    var ep = new EventProxy();\n\n    var self = this;\n    var Bucket = params.Bucket;\n    var Region = params.Region;\n    var Key = params.Key;\n    var CopySource = params.CopySource;\n    var m = util.getSourceParams.call(this, CopySource);\n    if (!m) {\n        callback(util.error(new Error('CopySource format error')));\n        return;\n    }\n\n    var SourceBucket = m.Bucket;\n    var SourceRegion = m.Region;\n    var SourceKey = decodeURIComponent(m.Key);\n    var CopySliceSize = params.CopySliceSize === undefined ? self.options.CopySliceSize : params.CopySliceSize;\n    CopySliceSize = Math.max(0, CopySliceSize);\n\n    var ChunkSize = params.CopyChunkSize || this.options.CopyChunkSize;\n    var ChunkParallel = this.options.CopyChunkParallelLimit;\n\n    var FinishSize = 0;\n    var FileSize;\n    var onProgress;\n\n    // 分片复制完成，开始 multipartComplete 操作\n    ep.on('copy_slice_complete', function (UploadData) {\n        var metaHeaders = {};\n        util.each(params.Headers, function (val, k) {\n            if (k.toLowerCase().indexOf('x-cos-meta-') === 0) metaHeaders[k] = val;\n        });\n        var Parts = util.map(UploadData.PartList, function (item) {\n            return {\n                PartNumber: item.PartNumber,\n                ETag: item.ETag,\n            };\n        });\n        self.multipartComplete({\n            Bucket: Bucket,\n            Region: Region,\n            Key: Key,\n            UploadId: UploadData.UploadId,\n            Parts: Parts,\n        },function (err, data) {\n            if (err) {\n                onProgress(null, true);\n                return callback(err);\n            }\n            onProgress({loaded: FileSize, total: FileSize}, true);\n            callback(null, data);\n        });\n    });\n\n    ep.on('get_copy_data_finish',function (UploadData) {\n        Async.eachLimit(UploadData.PartList, ChunkParallel, function (SliceItem, asyncCallback) {\n            var PartNumber = SliceItem.PartNumber;\n            var CopySourceRange = SliceItem.CopySourceRange;\n            var currentSize = SliceItem.end - SliceItem.start;\n\n            copySliceItem.call(self, {\n                Bucket: Bucket,\n                Region: Region,\n                Key: Key,\n                CopySource: CopySource,\n                UploadId: UploadData.UploadId,\n                PartNumber: PartNumber,\n                CopySourceRange: CopySourceRange,\n            },function (err,data) {\n                if (err) return asyncCallback(err);\n                FinishSize += currentSize;\n                onProgress({loaded: FinishSize, total: FileSize});\n                SliceItem.ETag = data.ETag;\n                asyncCallback(err || null, data);\n            });\n        }, function (err) {\n            if (err) {\n                onProgress(null, true);\n                return callback(err);\n            }\n\n            ep.emit('copy_slice_complete', UploadData);\n        });\n    });\n\n    ep.on('get_file_size_finish', function (SourceHeaders) {\n        // 控制分片大小\n        (function () {\n            var SIZE = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 1024 * 2, 1024 * 4, 1024 * 5];\n            var AutoChunkSize = 1024 * 1024;\n            for (var i = 0; i < SIZE.length; i++) {\n                AutoChunkSize = SIZE[i] * 1024 * 1024;\n                if (FileSize / AutoChunkSize <= self.options.MaxPartNumber) break;\n            }\n            params.ChunkSize = ChunkSize = Math.max(ChunkSize, AutoChunkSize);\n\n            var ChunkCount = Math.ceil(FileSize / ChunkSize);\n\n            var list = [];\n            for (var partNumber = 1; partNumber <= ChunkCount; partNumber++) {\n                var start = (partNumber - 1) * ChunkSize;\n                var end = partNumber * ChunkSize < FileSize ? (partNumber * ChunkSize - 1) : FileSize - 1;\n                var item = {\n                    PartNumber: partNumber,\n                    start: start,\n                    end: end,\n                    CopySourceRange: \"bytes=\" + start + \"-\" + end,\n                };\n                list.push(item);\n            }\n            params.PartList = list;\n        })();\n\n        var TargetHeader;\n        if (params.Headers['x-cos-metadata-directive'] === 'Replaced') {\n            TargetHeader = params.Headers;\n        } else {\n            TargetHeader = SourceHeaders;\n        }\n        TargetHeader['x-cos-storage-class'] = params.Headers['x-cos-storage-class'] || SourceHeaders['x-cos-storage-class'];\n        TargetHeader = util.clearKey(TargetHeader);\n        /**\n         * 对于归档存储的对象，如果未恢复副本，则不允许 Copy\n         */\n        if (SourceHeaders['x-cos-storage-class'] === 'ARCHIVE' || SourceHeaders['x-cos-storage-class'] === 'DEEP_ARCHIVE') {\n            var restoreHeader = SourceHeaders['x-cos-restore'];\n            if (!restoreHeader || restoreHeader === 'ongoing-request=\"true\"') {\n                callback(util.error(new Error('Unrestored archive object is not allowed to be copied')));\n                return;\n            }\n        }\n        /**\n         * 去除一些无用的头部，规避 multipartInit 出错\n         * 这些头部通常是在 putObjectCopy 时才使用\n         */\n        delete TargetHeader['x-cos-copy-source'];\n        delete TargetHeader['x-cos-metadata-directive'];\n        delete TargetHeader['x-cos-copy-source-If-Modified-Since'];\n        delete TargetHeader['x-cos-copy-source-If-Unmodified-Since'];\n        delete TargetHeader['x-cos-copy-source-If-Match'];\n        delete TargetHeader['x-cos-copy-source-If-None-Match'];\n        self.multipartInit({\n            Bucket: Bucket,\n            Region: Region,\n            Key: Key,\n            Headers: TargetHeader,\n        },function (err,data) {\n            if (err) return callback(err);\n            params.UploadId = data.UploadId;\n            ep.emit('get_copy_data_finish', params);\n        });\n    });\n\n    // 获取远端复制源文件的大小\n    self.headObject({\n        Bucket: SourceBucket,\n        Region: SourceRegion,\n        Key: SourceKey,\n    },function(err, data) {\n        if (err) {\n            if (err.statusCode && err.statusCode === 404) {\n                callback(util.error(err, {ErrorStatus: SourceKey + ' Not Exist'}));\n            } else {\n                callback(err);\n            }\n            return;\n        }\n\n        FileSize = params.FileSize = data.headers['content-length'];\n        if (FileSize === undefined || !FileSize) {\n            callback(util.error(new Error('get Content-Length error, please add \"Content-Length\" to CORS ExposeHeader setting.（ 获取Content-Length失败，请在CORS ExposeHeader设置中添加Content-Length，请参考文档：https://cloud.tencent.com/document/product/436/13318 ）')));\n            return;\n        }\n\n        onProgress = util.throttleOnProgress.call(self, FileSize, params.onProgress);\n\n        // 开始上传\n        if (FileSize <= CopySliceSize) {\n            if (!params.Headers['x-cos-metadata-directive']) {\n                params.Headers['x-cos-metadata-directive'] = 'Copy';\n            }\n            self.putObjectCopy(params, function (err, data) {\n                if (err) {\n                    onProgress(null, true);\n                    return callback(err);\n                }\n                onProgress({loaded: FileSize, total: FileSize}, true);\n                callback(err, data);\n            });\n        } else {\n            var resHeaders = data.headers;\n            var SourceHeaders = {\n                'Cache-Control': resHeaders['cache-control'],\n                'Content-Disposition': resHeaders['content-disposition'],\n                'Content-Encoding': resHeaders['content-encoding'],\n                'Content-Type': resHeaders['content-type'],\n                'Expires': resHeaders['expires'],\n                'x-cos-storage-class': resHeaders['x-cos-storage-class'],\n            };\n            util.each(resHeaders, function (v, k) {\n                var metaPrefix = 'x-cos-meta-';\n                if (k.indexOf(metaPrefix) === 0 && k.length > metaPrefix.length) {\n                    SourceHeaders[k] = v;\n                }\n            });\n            ep.emit('get_file_size_finish', SourceHeaders);\n        }\n    });\n}\n\n// 复制指定分片\nfunction copySliceItem(params, callback) {\n    var TaskId = params.TaskId;\n    var Bucket = params.Bucket;\n    var Region = params.Region;\n    var Key = params.Key;\n    var CopySource = params.CopySource;\n    var UploadId = params.UploadId;\n    var PartNumber = params.PartNumber * 1;\n    var CopySourceRange = params.CopySourceRange;\n\n    var ChunkRetryTimes = this.options.ChunkRetryTimes + 1;\n    var self = this;\n\n    Async.retry(ChunkRetryTimes, function (tryCallback) {\n        self.uploadPartCopy({\n            TaskId: TaskId,\n            Bucket: Bucket,\n            Region: Region,\n            Key: Key,\n            CopySource: CopySource,\n            UploadId: UploadId,\n            PartNumber:PartNumber,\n            CopySourceRange:CopySourceRange,\n        },function (err,data) {\n            tryCallback(err || null, data);\n        })\n    }, function (err, data) {\n        return callback(err, data);\n    });\n}\n\n\nvar API_MAP = {\n    sliceUploadFile: sliceUploadFile,\n    abortUploadTask: abortUploadTask,\n    uploadFile: uploadFile,\n    uploadFiles: uploadFiles,\n    sliceCopyFile: sliceCopyFile,\n};\n\nmodule.exports.init = function (COS, task) {\n    task.transferToTaskMethod(API_MAP, 'sliceUploadFile');\n    util.each(API_MAP, function (fn, apiName) {\n        COS.prototype[apiName] = util.apiWrapper(apiName, fn);\n    });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}